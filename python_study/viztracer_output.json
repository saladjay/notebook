{"traceEvents": [{"ph": "M", "pid": 26444, "tid": 26444, "name": "process_name", "args": {"name": "MainProcess"}}, {"ph": "M", "pid": 26444, "tid": 38292, "name": "thread_name", "args": {"name": "QueueFeederThread"}}, {"ph": "M", "pid": 26444, "tid": 28528, "name": "thread_name", "args": {"name": "Thread-2"}}, {"ph": "M", "pid": 26444, "tid": 39076, "name": "thread_name", "args": {"name": "Thread-1"}}, {"ph": "M", "pid": 26444, "tid": 43052, "name": "thread_name", "args": {"name": "MainThread"}}, {"pid": 26444, "tid": 43052, "ts": 356385113011.5, "dur": 0.5, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852412.1, "dur": 175.5, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385113012.7, "dur": 739576.2, "name": "normal (.\\processing_test.py:46)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852592.5, "dur": 1.1, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852595.3, "dur": 160.8, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852769.0, "dur": 0.8, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852766.7, "dur": 4.1, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852778.5, "dur": 1.2, "name": "__init__ (<frozen importlib._bootstrap>:143)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852782.7, "dur": 0.5, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852799.1, "dur": 4.9, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852804.5, "dur": 0.4, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852798.4, "dur": 7.2, "name": "__init__ (<frozen importlib._bootstrap>:58)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852809.1, "dur": 0.2, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852781.7, "dur": 27.7, "name": "_get_module_lock (<frozen importlib._bootstrap>:157)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852810.7, "dur": 0.2, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852810.3, "dur": 4.3, "name": "acquire (<frozen importlib._bootstrap>:78)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852780.5, "dur": 34.12, "name": "__enter__ (<frozen importlib._bootstrap>:147)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852815.6, "dur": 0.2, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852816.6, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852822.3, "dur": 0.1, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852821.7, "dur": 0.72, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852824.8, "dur": 1.4, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852823.7, "dur": 2.6, "name": "find_spec (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\site-packages\\_distutils_hack\\__init__.py:89)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852827.0, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852826.8, "dur": 0.32, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852828.02, "dur": 0.08, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852828.0, "dur": 0.12, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852829.0, "dur": 0.2, "name": "find_spec (<frozen importlib._bootstrap>:725)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852829.42, "dur": 0.08, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852829.4, "dur": 0.12, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852829.82, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852829.8, "dur": 0.1, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852831.0, "dur": 0.8, "name": "_imp.is_frozen", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852830.5, "dur": 1.5, "name": "find_spec (<frozen importlib._bootstrap>:800)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852832.2, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852832.1, "dur": 0.2, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852832.6, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852832.5, "dur": 0.14, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852837.1, "dur": 0.5, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852838.5, "dur": 1.4, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852840.9, "dur": 0.7, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852842.3, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852845.1, "dur": 82.5, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852843.4, "dur": 84.4, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852932.4, "dur": 1.3, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852936.1, "dur": 0.4, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852943.6, "dur": 0.3, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852944.1, "dur": 0.3, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852944.8, "dur": 0.6, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852948.5, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852948.62, "dur": 0.18, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852948.9, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852949.8, "dur": 0.3, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852951.3, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852951.6, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852950.9, "dur": 0.9, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852952.4, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852952.8, "dur": 0.6, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852935.6, "dur": 18.1, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852954.6, "dur": 1.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852956.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852957.6, "dur": 0.2, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852957.82, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852958.0, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852958.7, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852958.82, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852959.0, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852959.2, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852959.6, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852959.7, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852959.4, "dur": 0.42, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852960.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852960.2, "dur": 0.2, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852956.7, "dur": 3.8, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852960.8, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852962.02, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852962.7, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852962.8, "dur": 0.2, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852963.02, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852963.5, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852963.62, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852963.8, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852963.92, "dur": 0.08, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852964.3, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852964.4, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852964.2, "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852964.7, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852964.8, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852962.0, "dur": 3.0, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852965.2, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852966.7, "dur": 25.9, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852966.4, "dur": 26.3, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852966.2, "dur": 27.6, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852965.9, "dur": 29.1, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852996.2, "dur": 0.5, "name": "__init__ (<frozen importlib._bootstrap_external>:999)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852998.5, "dur": 0.9, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853000.8, "dur": 0.9, "name": "__init__ (<frozen importlib._bootstrap>:342)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852997.4, "dur": 5.5, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:689)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852995.6, "dur": 7.4, "name": "_get_spec (<frozen importlib._bootstrap_external>:1493)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852842.0, "dur": 161.2, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852835.6, "dur": 168.3, "name": "_get_spec (<frozen importlib._bootstrap_external>:1367)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852833.6, "dur": 170.7, "name": "find_spec (<frozen importlib._bootstrap_external>:1399)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853004.8, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853004.6, "dur": 0.4, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852818.8, "dur": 186.7, "name": "_find_spec (<frozen importlib._bootstrap>:890)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853006.7, "dur": 0.3, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853007.8, "dur": 0.4, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853008.5, "dur": 0.2, "name": "create_module (<frozen importlib._bootstrap_external>:834)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853009.3, "dur": 1.3, "name": "_new_module (<frozen importlib._bootstrap>:35)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853011.6, "dur": 0.3, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853012.0, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853012.5, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853013.1, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853012.8, "dur": 0.5, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853013.6, "dur": 2.5, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853016.6, "dur": 0.2, "name": "has_location (<frozen importlib._bootstrap>:397)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853016.9, "dur": 0.7, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853018.0, "dur": 0.6, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853021.7, "dur": 0.2, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853023.1, "dur": 0.1, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853026.4, "dur": 0.6, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853025.8, "dur": 1.3, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853028.1, "dur": 0.1, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853027.2, "dur": 1.1, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853028.4, "dur": 0.1, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853025.2, "dur": 3.9, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853023.8, "dur": 6.9, "name": "_path_split (<frozen importlib._bootstrap_external>:127)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853031.0, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853032.4, "dur": 0.3, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853035.0, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853035.9, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853036.1, "dur": 0.2, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853036.4, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853037.0, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853037.2, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853037.4, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853037.6, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853038.0, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853038.2, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853038.32, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853039.3, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853039.7, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853039.8, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853040.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853039.6, "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853040.3, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853040.5, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853034.9, "dur": 6.0, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853022.5, "dur": 18.6, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853020.5, "dur": 20.8, "name": "_get_cached (<frozen importlib._bootstrap_external>:484)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853019.1, "dur": 22.4, "name": "cached (<frozen importlib._bootstrap>:376)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853041.7, "dur": 0.1, "name": "cached (<frozen importlib._bootstrap>:376)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853011.1, "dur": 30.9, "name": "_init_module_attrs (<frozen importlib._bootstrap>:477)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853007.6, "dur": 34.5, "name": "module_from_spec (<frozen importlib._bootstrap>:549)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853045.7, "dur": 0.2, "name": "get_filename (<frozen importlib._bootstrap_external>:1024)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853044.9, "dur": 1.1, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:516)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853046.4, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853047.1, "dur": 0.1, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853046.9, "dur": 0.32, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853047.4, "dur": 0.1, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853047.3, "dur": 0.22, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853047.6, "dur": 0.1, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853046.8, "dur": 1.0, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853046.6, "dur": 1.5, "name": "_path_split (<frozen importlib._bootstrap_external>:127)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853048.3, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853048.7, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853049.6, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853050.2, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853050.32, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853050.5, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853050.9, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853051.1, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853051.2, "dur": 0.2, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853051.42, "dur": 0.08, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853051.8, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853051.9, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853052.1, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853052.22, "dur": 0.08, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853052.5, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853052.7, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853052.8, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853052.4, "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853053.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853053.1, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853049.5, "dur": 4.8, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853046.3, "dur": 8.1, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853056.0, "dur": 13.2, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853055.9, "dur": 13.4, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853055.7, "dur": 14.2, "name": "path_stats (<frozen importlib._bootstrap_external>:1070)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853071.8, "dur": 0.3, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853072.8, "dur": 306.7, "name": "io.open_code", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853381.8, "dur": 73.5, "name": "_io.BufferedReader.read", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853071.3, "dur": 397.4, "name": "get_data (<frozen importlib._bootstrap_external>:1029)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853473.6, "dur": 0.4, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853475.2, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853476.0, "dur": 0.6, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853474.6, "dur": 2.2, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853471.8, "dur": 5.6, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:553)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853481.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853481.2, "dur": 0.2, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853480.9, "dur": 0.52, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853482.02, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853482.12, "dur": 0.18, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853482.0, "dur": 0.32, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853480.5, "dur": 2.0, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:586)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853483.5, "dur": 0.7, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853485.8, "dur": 79.0, "name": "marshal.loads", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853565.0, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853565.6, "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853566.5, "dur": 1.5, "name": "_imp._fix_co_filename", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853485.2, "dur": 82.82, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:638)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853044.2, "dur": 524.0, "name": "get_code (<frozen importlib._bootstrap_external>:909)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853584.6, "dur": 0.6, "name": "__init__ (<frozen importlib._bootstrap>:143)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853586.5, "dur": 0.3, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853588.8, "dur": 1.4, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853590.7, "dur": 0.4, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853588.5, "dur": 3.1, "name": "__init__ (<frozen importlib._bootstrap>:58)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853593.2, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853586.2, "dur": 7.2, "name": "_get_module_lock (<frozen importlib._bootstrap>:157)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853594.1, "dur": 0.1, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853593.7, "dur": 2.5, "name": "acquire (<frozen importlib._bootstrap>:78)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853585.9, "dur": 10.4, "name": "__enter__ (<frozen importlib._bootstrap>:147)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853596.8, "dur": 0.2, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853597.7, "dur": 0.3, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853600.8, "dur": 0.1, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853599.8, "dur": 1.2, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853602.4, "dur": 0.8, "name": "builtins.locals", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853603.3, "dur": 2.2, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853606.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853607.9, "dur": 0.2, "name": "<lambda> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\site-packages\\_distutils_hack\\__init__.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853601.8, "dur": 6.4, "name": "find_spec (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\site-packages\\_distutils_hack\\__init__.py:89)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853608.9, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853608.7, "dur": 0.32, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853611.42, "dur": 0.08, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853611.4, "dur": 0.12, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853612.6, "dur": 2.2, "name": "_imp.is_builtin", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853612.3, "dur": 2.6, "name": "find_spec (<frozen importlib._bootstrap>:725)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853615.1, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853615.0, "dur": 0.2, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853615.52, "dur": 0.08, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853615.5, "dur": 0.12, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853616.2, "dur": 0.4, "name": "_imp.is_frozen", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853616.0, "dur": 0.7, "name": "find_spec (<frozen importlib._bootstrap>:800)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853616.82, "dur": 0.08, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853616.8, "dur": 0.12, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853617.22, "dur": 0.08, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853617.2, "dur": 0.12, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853618.5, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853619.6, "dur": 0.7, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853620.5, "dur": 0.2, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853621.3, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853622.2, "dur": 32.6, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853621.9, "dur": 32.92, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853656.7, "dur": 0.5, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853658.8, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853661.0, "dur": 0.7, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853661.8, "dur": 0.4, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853662.3, "dur": 0.4, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853664.4, "dur": 0.2, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853664.7, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853664.9, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853665.4, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853666.3, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853666.6, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853666.0, "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853667.1, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853667.3, "dur": 0.3, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853658.3, "dur": 9.5, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853668.3, "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853669.2, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853670.0, "dur": 0.2, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853670.22, "dur": 0.18, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853670.5, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853671.1, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853671.3, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853671.42, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853671.6, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853672.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853672.2, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853671.9, "dur": 1.4, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853673.4, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853673.5, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853669.1, "dur": 4.7, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853674.0, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853674.52, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853675.1, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853675.2, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853675.4, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853675.8, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853676.0, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853676.1, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853676.3, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853676.6, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853676.7, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853676.5, "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853676.82, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853677.0, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853674.5, "dur": 2.62, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853677.3, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853677.82, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853678.3, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853678.4, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853678.52, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853678.9, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853679.1, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853679.22, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853679.4, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853679.7, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853679.8, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853679.6, "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853679.92, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853680.1, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853677.8, "dur": 2.4, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853680.4, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853680.92, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853681.4, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853681.5, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853681.62, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853682.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853682.1, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853682.22, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853682.4, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853682.6, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853682.7, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853682.5, "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853682.9, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853684.3, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853680.9, "dur": 3.6, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853684.7, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853621.0, "dur": 64.0, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853685.5, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853685.9, "dur": 0.6, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853686.7, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853686.9, "dur": 0.2, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853687.2, "dur": 0.2, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853687.6, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853688.0, "dur": 22.9, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853687.9, "dur": 23.02, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853711.5, "dur": 0.2, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853712.3, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853713.0, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853713.2, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853713.4, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853713.9, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853714.02, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853714.2, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853714.4, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853714.8, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853715.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853714.6, "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853715.3, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853715.4, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853712.2, "dur": 3.4, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853715.8, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853716.42, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853716.9, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853717.02, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853717.2, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853717.6, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853717.7, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853717.82, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853718.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853718.22, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853718.4, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853718.2, "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853718.6, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853718.7, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853716.4, "dur": 2.5, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853719.0, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853719.9, "dur": 17.6, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853719.8, "dur": 17.72, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853719.7, "dur": 18.2, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853719.5, "dur": 19.4, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853741.0, "dur": 0.4, "name": "nt._path_splitroot", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853741.6, "dur": 0.3, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853742.0, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853742.2, "dur": 0.2, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853742.5, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853740.8, "dur": 1.9, "name": "_path_isabs (<frozen importlib._bootstrap_external>:167)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853740.0, "dur": 2.9, "name": "__init__ (<frozen importlib._bootstrap_external>:1148)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853743.8, "dur": 0.2, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853745.0, "dur": 0.6, "name": "__init__ (<frozen importlib._bootstrap>:342)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853743.5, "dur": 3.0, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:689)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853739.3, "dur": 7.3, "name": "_get_spec (<frozen importlib._bootstrap_external>:1493)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853687.5, "dur": 59.3, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853618.0, "dur": 129.2, "name": "_get_spec (<frozen importlib._bootstrap_external>:1367)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853617.6, "dur": 129.8, "name": "find_spec (<frozen importlib._bootstrap_external>:1399)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853747.8, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853747.6, "dur": 0.32, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853598.5, "dur": 150.4, "name": "_find_spec (<frozen importlib._bootstrap>:890)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853749.7, "dur": 0.3, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853750.3, "dur": 0.1, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853751.8, "dur": 468.9, "name": "_imp.create_dynamic", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853751.7, "dur": 469.7, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854224.1, "dur": 0.7, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853750.8, "dur": 474.2, "name": "create_module (<frozen importlib._bootstrap_external>:1164)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854226.2, "dur": 0.2, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854226.6, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854227.1, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854228.0, "dur": 0.3, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854227.6, "dur": 1.0, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854228.9, "dur": 2.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854231.2, "dur": 0.2, "name": "has_location (<frozen importlib._bootstrap>:397)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854231.5, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854231.6, "dur": 0.6, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854234.7, "dur": 0.6, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854235.7, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854233.8, "dur": 2.1, "name": "_get_cached (<frozen importlib._bootstrap_external>:484)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854232.7, "dur": 3.5, "name": "cached (<frozen importlib._bootstrap>:376)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854225.8, "dur": 10.5, "name": "_init_module_attrs (<frozen importlib._bootstrap>:477)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853750.2, "dur": 486.3, "name": "module_from_spec (<frozen importlib._bootstrap>:549)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854238.6, "dur": 0.5, "name": "_imp.exec_dynamic", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854238.5, "dur": 0.62, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854239.7, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854237.6, "dur": 2.3, "name": "exec_module (<frozen importlib._bootstrap_external>:1172)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854240.6, "dur": 0.3, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854241.4, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853749.5, "dur": 492.2, "name": "_load_unlocked (<frozen importlib._bootstrap>:650)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853597.5, "dur": 644.5, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:956)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854246.2, "dur": 0.3, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854245.1, "dur": 3.8, "name": "release (<frozen importlib._bootstrap>:103)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854244.5, "dur": 4.5, "name": "__exit__ (<frozen importlib._bootstrap>:151)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854250.2, "dur": 0.2, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854250.8, "dur": 0.2, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854251.4, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854249.7, "dur": 1.82, "name": "cb (<frozen importlib._bootstrap>:176)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853583.8, "dur": 670.9, "name": "_find_and_load (<frozen importlib._bootstrap>:986)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854256.4, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854256.1, "dur": 0.6, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854259.2, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854259.5, "dur": 0.9, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854260.9, "dur": 1.3, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854265.1, "dur": 1.4, "name": "__init__ (<frozen importlib._bootstrap>:143)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854267.1, "dur": 0.1, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854269.2, "dur": 2.3, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854271.7, "dur": 0.5, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854268.8, "dur": 3.6, "name": "__init__ (<frozen importlib._bootstrap>:58)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854273.5, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854266.9, "dur": 6.8, "name": "_get_module_lock (<frozen importlib._bootstrap>:157)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854274.2, "dur": 0.02, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854273.9, "dur": 1.5, "name": "acquire (<frozen importlib._bootstrap>:78)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854266.8, "dur": 8.7, "name": "__enter__ (<frozen importlib._bootstrap>:147)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854275.7, "dur": 0.1, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854276.1, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854279.1, "dur": 0.1, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854278.1, "dur": 1.12, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854280.8, "dur": 0.3, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854280.3, "dur": 0.82, "name": "find_spec (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\site-packages\\_distutils_hack\\__init__.py:89)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854281.5, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854281.4, "dur": 0.22, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854282.1, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854282.0, "dur": 0.2, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854283.0, "dur": 0.2, "name": "find_spec (<frozen importlib._bootstrap>:725)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854283.4, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854283.3, "dur": 0.2, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854283.72, "dur": 0.08, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854283.7, "dur": 0.12, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854284.4, "dur": 0.7, "name": "_imp.is_frozen", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854284.3, "dur": 0.9, "name": "find_spec (<frozen importlib._bootstrap>:800)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854285.32, "dur": 0.08, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854285.3, "dur": 0.12, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854285.72, "dur": 0.08, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854285.7, "dur": 0.12, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854287.8, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854288.2, "dur": 0.6, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854289.8, "dur": 0.3, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854290.5, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854291.5, "dur": 29.6, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854291.1, "dur": 30.1, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854330.6, "dur": 0.6, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854332.5, "dur": 0.2, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854336.8, "dur": 0.3, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854337.2, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854337.4, "dur": 0.3, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854339.2, "dur": 0.2, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854339.42, "dur": 0.18, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854339.7, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854340.2, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854341.1, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854341.4, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854340.8, "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854341.8, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854342.0, "dur": 0.3, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854332.2, "dur": 10.3, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854343.0, "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854343.9, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854344.6, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854344.72, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854344.9, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854345.4, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854345.6, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854345.72, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854345.9, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854346.3, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854346.4, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854346.2, "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854346.6, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854346.7, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854343.8, "dur": 3.1, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854347.1, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854347.72, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854348.3, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854348.5, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854348.62, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854349.1, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854349.2, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854349.4, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854349.52, "dur": 0.08, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854349.82, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854349.92, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854349.8, "dur": 0.22, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854350.2, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854351.1, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854347.7, "dur": 3.7, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854351.6, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854352.5, "dur": 18.1, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854352.4, "dur": 18.22, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854352.2, "dur": 18.9, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854352.1, "dur": 19.3, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854372.2, "dur": 0.4, "name": "__init__ (<frozen importlib._bootstrap_external>:999)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854373.3, "dur": 0.2, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854374.4, "dur": 0.5, "name": "__init__ (<frozen importlib._bootstrap>:342)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854373.1, "dur": 2.7, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:689)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854371.7, "dur": 4.2, "name": "_get_spec (<frozen importlib._bootstrap_external>:1493)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854290.3, "dur": 85.8, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854287.3, "dur": 89.1, "name": "_get_spec (<frozen importlib._bootstrap_external>:1367)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854286.9, "dur": 89.8, "name": "find_spec (<frozen importlib._bootstrap_external>:1399)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854377.0, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854376.9, "dur": 0.22, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854277.0, "dur": 100.6, "name": "_find_spec (<frozen importlib._bootstrap>:890)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854378.1, "dur": 0.2, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854378.6, "dur": 0.2, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854379.1, "dur": 0.1, "name": "create_module (<frozen importlib._bootstrap_external>:834)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854379.5, "dur": 1.6, "name": "_new_module (<frozen importlib._bootstrap>:35)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854381.4, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854381.7, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854382.0, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854382.4, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854382.2, "dur": 0.4, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854382.9, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854384.1, "dur": 0.02, "name": "has_location (<frozen importlib._bootstrap>:397)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854384.3, "dur": 0.5, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854385.1, "dur": 0.5, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854386.9, "dur": 0.2, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854388.1, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854390.6, "dur": 0.5, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854390.1, "dur": 1.1, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854391.5, "dur": 0.1, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854391.3, "dur": 0.4, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854391.9, "dur": 0.02, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854389.5, "dur": 3.0, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854388.4, "dur": 5.3, "name": "_path_split (<frozen importlib._bootstrap_external>:127)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854393.9, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854394.6, "dur": 0.2, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854396.7, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854397.5, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854397.7, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854397.82, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854399.2, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854399.32, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854399.5, "dur": 0.2, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854399.8, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854400.3, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854400.42, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854400.52, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854400.7, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854401.0, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854401.2, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854401.3, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854400.9, "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854401.5, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854401.7, "dur": 0.2, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854396.6, "dur": 5.4, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854387.4, "dur": 14.7, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854386.6, "dur": 15.7, "name": "_get_cached (<frozen importlib._bootstrap_external>:484)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854385.9, "dur": 16.6, "name": "cached (<frozen importlib._bootstrap>:376)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854402.7, "dur": 0.1, "name": "cached (<frozen importlib._bootstrap>:376)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854381.3, "dur": 21.6, "name": "_init_module_attrs (<frozen importlib._bootstrap>:477)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854378.5, "dur": 24.5, "name": "module_from_spec (<frozen importlib._bootstrap>:549)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854405.8, "dur": 0.02, "name": "get_filename (<frozen importlib._bootstrap_external>:1024)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854405.1, "dur": 0.8, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:516)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854406.3, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854406.8, "dur": 0.1, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854406.7, "dur": 0.3, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854407.1, "dur": 0.1, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854407.02, "dur": 0.28, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854407.32, "dur": 0.08, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854406.6, "dur": 1.0, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854406.4, "dur": 1.5, "name": "_path_split (<frozen importlib._bootstrap_external>:127)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854408.0, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854408.4, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854409.1, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854409.8, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854409.92, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854410.1, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854410.5, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854410.62, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854410.72, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854410.9, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854411.2, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854411.4, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854411.52, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854411.7, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854412.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854412.04, "dur": 0.06, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854413.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854411.9, "dur": 1.14, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854413.2, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854413.3, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854409.0, "dur": 4.5, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854406.2, "dur": 7.4, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854414.4, "dur": 11.9, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854414.3, "dur": 12.02, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854414.2, "dur": 12.7, "name": "path_stats (<frozen importlib._bootstrap_external>:1070)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854428.7, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854429.5, "dur": 173.3, "name": "io.open_code", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854604.1, "dur": 58.4, "name": "_io.BufferedReader.read", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854428.3, "dur": 243.3, "name": "get_data (<frozen importlib._bootstrap_external>:1029)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854674.9, "dur": 0.4, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854676.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854677.0, "dur": 0.6, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854675.7, "dur": 2.0, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854673.6, "dur": 4.6, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:553)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854680.62, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854680.8, "dur": 0.2, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854680.6, "dur": 0.42, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854681.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854681.9, "dur": 0.1, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854681.7, "dur": 0.32, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854680.3, "dur": 1.9, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:586)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854683.0, "dur": 0.4, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854685.1, "dur": 251.3, "name": "marshal.loads", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854936.8, "dur": 0.2, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854937.5, "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854938.2, "dur": 2.1, "name": "_imp._fix_co_filename", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854683.9, "dur": 256.42, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:638)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854404.6, "dur": 535.9, "name": "get_code (<frozen importlib._bootstrap_external>:909)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854953.6, "dur": 0.3, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854953.2, "dur": 0.9, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854956.7, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854956.9, "dur": 0.3, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854956.4, "dur": 1.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854958.1, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854958.0, "dur": 0.4, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854958.9, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854959.0, "dur": 0.4, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854959.42, "dur": 0.08, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854959.6, "dur": 0.2, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854958.7, "dur": 1.2, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854960.4, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854960.3, "dur": 0.22, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854968.3, "dur": 1.4, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854973.4, "dur": 3.2, "name": "_ConnectionBase (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854972.1, "dur": 16.9, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854989.8, "dur": 1.6, "name": "PipeConnection (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:268)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854989.4, "dur": 10.8, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855000.6, "dur": 1.5, "name": "Connection (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:348)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855000.4, "dur": 8.2, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855009.1, "dur": 4.7, "name": "Listener (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:432)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855009.0, "dur": 11.1, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855022.6, "dur": 0.4, "name": "SocketListener (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:579)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855022.4, "dur": 6.2, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855029.4, "dur": 0.7, "name": "PipeListener (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:639)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855029.0, "dur": 6.2, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855036.0, "dur": 0.3, "name": "ConnectionWrapper (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:765)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855035.8, "dur": 5.8, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855042.1, "dur": 0.2, "name": "XmlListener (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:787)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855041.9, "dur": 6.8, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855051.1, "dur": 1.0, "name": "register (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:43)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855052.5, "dur": 0.2, "name": "register (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:43)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854944.5, "dur": 108.22, "name": "<module> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:10)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854943.5, "dur": 109.4, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854943.3, "dur": 109.7, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854403.7, "dur": 649.5, "name": "exec_module (<frozen importlib._bootstrap_external>:837)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855056.8, "dur": 0.2, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855057.5, "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854377.9, "dur": 680.1, "name": "_load_unlocked (<frozen importlib._bootstrap>:650)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855058.5, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855058.8, "dur": 0.8, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854276.0, "dur": 783.7, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:956)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855061.3, "dur": 0.3, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855060.8, "dur": 2.4, "name": "release (<frozen importlib._bootstrap>:103)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855060.2, "dur": 3.1, "name": "__exit__ (<frozen importlib._bootstrap>:151)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855064.4, "dur": 0.3, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855064.8, "dur": 0.3, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855065.4, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855063.7, "dur": 1.9, "name": "cb (<frozen importlib._bootstrap>:176)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854264.7, "dur": 802.8, "name": "_find_and_load (<frozen importlib._bootstrap>:986)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854262.5, "dur": 805.7, "name": "builtins.__import__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854262.4, "dur": 805.9, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385854258.9, "dur": 809.7, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855069.4, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855069.2, "dur": 0.4, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855070.2, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855070.5, "dur": 0.7, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855070.0, "dur": 1.3, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855072.2, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855072.1, "dur": 0.3, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855077.4, "dur": 2.4, "name": "Queue (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:34)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855077.2, "dur": 8.7, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855086.6, "dur": 0.5, "name": "JoinableQueue (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:289)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855086.4, "dur": 7.1, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855094.0, "dur": 0.7, "name": "SimpleQueue (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:332)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855093.8, "dur": 6.1, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853571.5, "dur": 1528.42, "name": "<module> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:10)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853570.4, "dur": 1529.7, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853570.1, "dur": 1530.02, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853043.0, "dur": 2057.6, "name": "exec_module (<frozen importlib._bootstrap_external>:837)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855101.7, "dur": 0.2, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855102.2, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385853006.2, "dur": 2096.3, "name": "_load_unlocked (<frozen importlib._bootstrap>:650)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855103.0, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855103.3, "dur": 0.2, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852816.2, "dur": 2287.4, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:956)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855104.7, "dur": 0.02, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855104.6, "dur": 0.8, "name": "release (<frozen importlib._bootstrap>:103)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855104.4, "dur": 1.1, "name": "__exit__ (<frozen importlib._bootstrap>:151)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855105.7, "dur": 0.1, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855105.9, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855106.1, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855105.6, "dur": 0.62, "name": "cb (<frozen importlib._bootstrap>:176)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852775.9, "dur": 2331.6, "name": "_find_and_load (<frozen importlib._bootstrap>:986)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855109.6, "dur": 1.2, "name": "get_context (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855112.4, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855112.2, "dur": 0.3, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855114.0, "dur": 0.3, "name": "__init__ (<frozen importlib._bootstrap>:143)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855114.8, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855116.42, "dur": 1.38, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855118.0, "dur": 0.4, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855116.4, "dur": 2.2, "name": "__init__ (<frozen importlib._bootstrap>:58)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855120.0, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855114.7, "dur": 5.42, "name": "_get_module_lock (<frozen importlib._bootstrap>:157)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855120.6, "dur": 0.02, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855120.4, "dur": 1.3, "name": "acquire (<frozen importlib._bootstrap>:78)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855114.5, "dur": 7.3, "name": "__enter__ (<frozen importlib._bootstrap>:147)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855122.0, "dur": 0.1, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855122.4, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855124.6, "dur": 0.1, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855124.4, "dur": 0.32, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855125.7, "dur": 0.4, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855125.3, "dur": 0.9, "name": "find_spec (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\site-packages\\_distutils_hack\\__init__.py:89)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855126.6, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855126.4, "dur": 0.3, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855127.1, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855127.0, "dur": 0.2, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855128.8, "dur": 10.6, "name": "find_spec (<frozen importlib._bootstrap>:725)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855139.8, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855139.7, "dur": 0.22, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855140.5, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855140.4, "dur": 0.2, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855141.2, "dur": 0.5, "name": "_imp.is_frozen", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855141.0, "dur": 0.8, "name": "find_spec (<frozen importlib._bootstrap>:800)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855141.92, "dur": 0.08, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855141.9, "dur": 0.12, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855142.32, "dur": 0.08, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855142.3, "dur": 0.12, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855143.4, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855143.9, "dur": 0.6, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855144.6, "dur": 0.2, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855145.3, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855146.6, "dur": 28.6, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855146.3, "dur": 29.0, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855176.4, "dur": 0.3, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855177.9, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855180.0, "dur": 0.4, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855180.5, "dur": 0.3, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855180.9, "dur": 0.3, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855182.6, "dur": 0.2, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855182.82, "dur": 0.18, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855183.1, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855183.7, "dur": 0.2, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855184.6, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855184.9, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855184.3, "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855185.3, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855185.5, "dur": 0.3, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855177.7, "dur": 8.2, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855186.5, "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855187.42, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855188.3, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855188.5, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855188.62, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855189.3, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855189.4, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855189.6, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855189.8, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855190.4, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855190.5, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855190.3, "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855190.7, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855190.9, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855187.4, "dur": 4.8, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855192.5, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855193.22, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855193.9, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855194.1, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855194.22, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855194.6, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855194.8, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855194.92, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855195.1, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855195.4, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855195.5, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855195.3, "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855195.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855195.9, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855193.2, "dur": 2.82, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855196.3, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855197.2, "dur": 17.4, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855197.1, "dur": 17.6, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855197.0, "dur": 18.2, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855196.8, "dur": 18.7, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855216.1, "dur": 0.4, "name": "__init__ (<frozen importlib._bootstrap_external>:999)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855217.2, "dur": 0.2, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855218.2, "dur": 0.5, "name": "__init__ (<frozen importlib._bootstrap>:342)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855217.0, "dur": 2.6, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:689)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855215.8, "dur": 3.9, "name": "_get_spec (<frozen importlib._bootstrap_external>:1493)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855145.1, "dur": 74.8, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855143.0, "dur": 77.3, "name": "_get_spec (<frozen importlib._bootstrap_external>:1367)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855142.8, "dur": 77.7, "name": "find_spec (<frozen importlib._bootstrap_external>:1399)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855220.8, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855220.7, "dur": 0.22, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855123.3, "dur": 98.0, "name": "_find_spec (<frozen importlib._bootstrap>:890)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855221.8, "dur": 0.2, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855222.3, "dur": 0.1, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855222.6, "dur": 0.1, "name": "create_module (<frozen importlib._bootstrap_external>:834)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855222.9, "dur": 0.8, "name": "_new_module (<frozen importlib._bootstrap>:35)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855224.1, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855224.3, "dur": 0.2, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855224.8, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855225.2, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855225.0, "dur": 0.4, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855225.7, "dur": 1.2, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855227.2, "dur": 0.1, "name": "has_location (<frozen importlib._bootstrap>:397)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855227.4, "dur": 0.6, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855228.3, "dur": 0.6, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855230.5, "dur": 0.2, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855231.3, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855234.1, "dur": 0.4, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855233.8, "dur": 0.8, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855234.9, "dur": 0.1, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855234.7, "dur": 0.4, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855235.2, "dur": 0.1, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855233.4, "dur": 2.2, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855232.7, "dur": 3.8, "name": "_path_split (<frozen importlib._bootstrap_external>:127)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855236.7, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855237.3, "dur": 0.2, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855238.7, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855239.6, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855239.8, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855239.92, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855240.5, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855240.62, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855240.8, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855241.0, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855241.5, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855241.7, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855241.82, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855242.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855242.4, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855242.5, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855242.6, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855242.3, "dur": 0.4, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855242.9, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855243.0, "dur": 0.2, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855238.6, "dur": 4.7, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855231.0, "dur": 12.5, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855230.0, "dur": 13.8, "name": "_get_cached (<frozen importlib._bootstrap_external>:484)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855229.2, "dur": 14.7, "name": "cached (<frozen importlib._bootstrap>:376)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855244.1, "dur": 0.2, "name": "cached (<frozen importlib._bootstrap>:376)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855223.9, "dur": 20.5, "name": "_init_module_attrs (<frozen importlib._bootstrap>:477)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855222.2, "dur": 22.3, "name": "module_from_spec (<frozen importlib._bootstrap>:549)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855246.3, "dur": 0.1, "name": "get_filename (<frozen importlib._bootstrap_external>:1024)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855245.7, "dur": 0.8, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:516)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855246.9, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855247.5, "dur": 0.1, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855247.4, "dur": 0.3, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855247.8, "dur": 0.2, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855247.72, "dur": 0.3, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855248.1, "dur": 0.1, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855247.3, "dur": 1.0, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855247.0, "dur": 1.6, "name": "_path_split (<frozen importlib._bootstrap_external>:127)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855248.7, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855249.1, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855258.2, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855259.3, "dur": 0.2, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855259.6, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855259.72, "dur": 0.18, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855260.4, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855260.52, "dur": 0.18, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855260.72, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855260.9, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855261.3, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855261.42, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855261.6, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855261.8, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855262.1, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855262.3, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855262.4, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855262.0, "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855262.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855262.9, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855258.1, "dur": 5.0, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855246.7, "dur": 16.5, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855263.8, "dur": 13.0, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855263.7, "dur": 13.2, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855263.6, "dur": 13.8, "name": "path_stats (<frozen importlib._bootstrap_external>:1070)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855278.5, "dur": 0.2, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855279.1, "dur": 137.2, "name": "io.open_code", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855417.3, "dur": 36.0, "name": "_io.BufferedReader.read", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855278.3, "dur": 181.6, "name": "get_data (<frozen importlib._bootstrap_external>:1029)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855462.6, "dur": 0.3, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855463.5, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855464.0, "dur": 0.3, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855463.3, "dur": 1.1, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855461.7, "dur": 3.2, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:553)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855467.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855467.1, "dur": 0.1, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855466.9, "dur": 0.4, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855467.72, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855467.9, "dur": 0.1, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855467.7, "dur": 0.32, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855466.8, "dur": 1.5, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:586)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855468.9, "dur": 0.4, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855470.1, "dur": 68.7, "name": "marshal.loads", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855539.2, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855539.6, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855540.5, "dur": 1.3, "name": "_imp._fix_co_filename", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855469.7, "dur": 72.2, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:638)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855245.4, "dur": 296.6, "name": "get_code (<frozen importlib._bootstrap_external>:909)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855548.8, "dur": 0.3, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855548.5, "dur": 1.8, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855551.5, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855551.8, "dur": 0.2, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855551.2, "dur": 1.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855552.7, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855552.5, "dur": 0.4, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855553.3, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855553.4, "dur": 0.1, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855553.1, "dur": 0.5, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855553.82, "dur": 0.18, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855553.8, "dur": 0.22, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855554.4, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855554.44, "dur": 0.06, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855554.3, "dur": 0.3, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855561.1, "dur": 2.1, "name": "SemLock (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:46)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855560.4, "dur": 12.5, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855573.4, "dur": 0.4, "name": "Semaphore (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:123)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855573.2, "dur": 7.2, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855581.1, "dur": 0.1, "name": "BoundedSemaphore (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:142)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855580.7, "dur": 8.5, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855589.8, "dur": 0.2, "name": "Lock (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855589.4, "dur": 7.1, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855596.8, "dur": 0.2, "name": "RLock (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855596.7, "dur": 4.7, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855601.8, "dur": 1.2, "name": "Condition (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:210)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855601.6, "dur": 6.9, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855608.9, "dur": 0.5, "name": "Event (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:321)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855608.7, "dur": 6.2, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855617.0, "dur": 0.5, "name": "property.setter", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855618.0, "dur": 0.1, "name": "property.setter", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855615.6, "dur": 2.6, "name": "Barrier (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:360)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855615.5, "dur": 9.7, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855544.1, "dur": 81.2, "name": "<module> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:11)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855543.4, "dur": 82.0, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855543.3, "dur": 82.2, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855245.2, "dur": 380.5, "name": "exec_module (<frozen importlib._bootstrap_external>:837)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855627.5, "dur": 0.2, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855628.1, "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855221.7, "dur": 406.9, "name": "_load_unlocked (<frozen importlib._bootstrap>:650)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855629.1, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855629.3, "dur": 0.4, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855122.3, "dur": 507.5, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:956)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855632.0, "dur": 0.2, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855631.6, "dur": 2.2, "name": "release (<frozen importlib._bootstrap>:103)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855631.0, "dur": 2.9, "name": "__exit__ (<frozen importlib._bootstrap>:151)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855634.6, "dur": 0.3, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855636.0, "dur": 0.2, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855636.5, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855634.4, "dur": 2.3, "name": "cb (<frozen importlib._bootstrap>:176)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855113.6, "dur": 524.5, "name": "_find_and_load (<frozen importlib._bootstrap>:986)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855643.6, "dur": 2.9, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855646.7, "dur": 0.3, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855651.3, "dur": 0.2, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855652.1, "dur": 0.1, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855650.7, "dur": 1.6, "name": "_get_candidate_names (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855656.6, "dur": 0.1, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855656.9, "dur": 0.2, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855666.7, "dur": 0.4, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855668.7, "dur": 8.7, "name": "Random.seed", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855666.0, "dur": 12.0, "name": "seed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:123)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855665.2, "dur": 13.0, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855656.5, "dur": 22.4, "name": "rng (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:133)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855680.8, "dur": 0.3, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855682.3, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855682.5, "dur": 0.6, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855681.5, "dur": 1.7, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855680.5, "dur": 3.8, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855684.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855685.1, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855685.2, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855685.0, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855684.7, "dur": 0.8, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855685.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855686.0, "dur": 0.1, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855686.12, "dur": 0.18, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855686.4, "dur": 0.1, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855685.9, "dur": 0.7, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855685.7, "dur": 0.92, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855686.9, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855687.1, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855687.2, "dur": 0.1, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855687.0, "dur": 0.4, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855686.8, "dur": 0.8, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855687.82, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855688.1, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855688.2, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855688.0, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855687.8, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855688.62, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855688.9, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855688.94, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855688.8, "dur": 0.22, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855688.6, "dur": 0.5, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855692.5, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855692.8, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855692.9, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855692.7, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855692.4, "dur": 0.8, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855693.4, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855693.6, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855693.7, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855693.5, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855693.3, "dur": 1.1, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855679.9, "dur": 14.6, "name": "<listcomp> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:147)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855694.8, "dur": 0.3, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855655.5, "dur": 39.7, "name": "__next__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:144)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855653.8, "dur": 41.7, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855697.3, "dur": 0.1, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855697.6, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855698.4, "dur": 0.1, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855698.6, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855698.2, "dur": 0.8, "name": "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855699.72, "dur": 0.08, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855699.82, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855700.1, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855700.3, "dur": 0.5, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855702.6, "dur": 0.5, "name": "str.find", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855703.4, "dur": 0.1, "name": "str.find", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855699.7, "dur": 4.3, "name": "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855697.0, "dur": 8.0, "name": "join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:77)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855706.1, "dur": 26.2, "name": "nt.lstat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855705.6, "dur": 27.9, "name": "_exists (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:75)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855649.4, "dur": 84.2, "name": "mktemp (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:390)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855642.5, "dur": 91.3, "name": "arbitrary_address (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:69)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855737.2, "dur": 26.3, "name": "_winapi.CreateNamedPipe", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855764.4, "dur": 4.5, "name": "_winapi.CreateFile", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855769.3, "dur": 3.0, "name": "_winapi.SetNamedPipeHandleState", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855772.6, "dur": 7.3, "name": "_winapi.ConnectNamedPipe", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855780.7, "dur": 1.3, "name": "_winapi.Overlapped.GetOverlappedResult", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855783.5, "dur": 2.0, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855786.0, "dur": 0.5, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855642.1, "dur": 144.6, "name": "Pipe (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:535)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855790.2, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855789.9, "dur": 0.5, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855792.8, "dur": 0.2, "name": "get_context (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:187)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855795.0, "dur": 0.2, "name": "get_start_method (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:197)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855797.9, "dur": 0.3, "name": "current_process (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855801.6, "dur": 0.2, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855801.9, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855809.2, "dur": 0.2, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855810.0, "dur": 5.7, "name": "Random.seed", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855808.8, "dur": 7.1, "name": "seed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:123)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855808.5, "dur": 7.6, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855801.4, "dur": 15.2, "name": "rng (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:133)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855817.9, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855818.4, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855818.5, "dur": 0.4, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855818.1, "dur": 0.82, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855817.8, "dur": 1.5, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855819.52, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855819.8, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855819.84, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855820.0, "dur": 0.1, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855820.2, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855819.7, "dur": 0.6, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855819.5, "dur": 0.9, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855820.62, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855820.82, "dur": 0.08, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855821.0, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855820.8, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855820.6, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855821.4, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855821.6, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855821.7, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855821.8, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855821.9, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855821.5, "dur": 0.5, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855821.3, "dur": 0.9, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855822.4, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855822.6, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855822.64, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855822.5, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855822.3, "dur": 0.52, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855823.12, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855823.32, "dur": 0.08, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855823.42, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855823.3, "dur": 0.22, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855823.1, "dur": 0.5, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855823.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855824.2, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855824.24, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855824.0, "dur": 0.32, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855823.7, "dur": 0.8, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855824.7, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855824.9, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855824.94, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855825.2, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855824.8, "dur": 0.5, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855824.6, "dur": 0.9, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855817.6, "dur": 7.92, "name": "<listcomp> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:147)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855825.8, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855800.2, "dur": 25.8, "name": "__next__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:144)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855799.8, "dur": 26.4, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855796.9, "dur": 30.1, "name": "_make_name (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855831.1, "dur": 0.5, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855832.1, "dur": 0.9, "name": "_make_methods (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:90)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855794.6, "dur": 39.0, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:50)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855793.9, "dur": 39.8, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:161)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855789.5, "dur": 44.4, "name": "Lock (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:65)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855834.5, "dur": 0.02, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855836.4, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855836.1, "dur": 0.5, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855838.2, "dur": 0.1, "name": "get_context (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:187)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855839.6, "dur": 0.1, "name": "get_start_method (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:197)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855840.6, "dur": 0.1, "name": "current_process (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855841.5, "dur": 0.1, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855841.7, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855841.4, "dur": 0.5, "name": "rng (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:133)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855842.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855843.1, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855843.2, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855843.3, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855842.9, "dur": 0.5, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855842.7, "dur": 0.72, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855843.72, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855843.92, "dur": 0.08, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855844.02, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855844.12, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855843.9, "dur": 0.32, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855843.7, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855844.6, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855844.8, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855844.84, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855844.92, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855845.0, "dur": 0.1, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855844.7, "dur": 0.42, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855844.5, "dur": 0.9, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855845.6, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855845.8, "dur": 0.1, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855845.92, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855845.7, "dur": 0.32, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855845.5, "dur": 0.7, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855846.42, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855846.82, "dur": 0.08, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855846.92, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855847.1, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855847.2, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855847.3, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855846.8, "dur": 0.6, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855846.4, "dur": 1.2, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855847.9, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855848.02, "dur": 0.08, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855848.12, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855848.0, "dur": 0.22, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855847.8, "dur": 0.5, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855848.5, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855848.7, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855848.74, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855848.82, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855848.6, "dur": 0.32, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855848.4, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855849.2, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855849.4, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855849.5, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855849.6, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855849.3, "dur": 0.34, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855849.1, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855842.5, "dur": 7.3, "name": "<listcomp> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:147)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855850.0, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855841.2, "dur": 9.0, "name": "__next__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:144)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855841.0, "dur": 9.3, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855840.4, "dur": 10.1, "name": "_make_name (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855852.5, "dur": 0.2, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855853.0, "dur": 0.6, "name": "_make_methods (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:90)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855839.4, "dur": 14.5, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:50)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855839.0, "dur": 15.0, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:144)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855835.9, "dur": 18.3, "name": "BoundedSemaphore (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:85)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855856.2, "dur": 0.1, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855857.4, "dur": 0.6, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855859.1, "dur": 6.3, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855855.9, "dur": 22.9, "name": "_after_fork (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:67)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855111.9, "dur": 767.2, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:36)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852763.7, "dur": 3115.9, "name": "Queue (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:100)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855883.1, "dur": 1.2, "name": "_newname (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:734)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855886.5, "dur": 0.02, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855886.1, "dur": 1.0, "name": "current_thread (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1306)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855888.5, "dur": 0.8, "name": "daemon (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1095)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855891.3, "dur": 0.5, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855892.1, "dur": 2.1, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855891.0, "dur": 4.3, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:505)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855897.0, "dur": 1.5, "name": "_make_invoke_excepthook (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1177)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855901.5, "dur": 0.5, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855899.7, "dur": 2.4, "name": "add (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855881.9, "dur": 20.22, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:761)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855903.2, "dur": 0.3, "name": "_newname (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:734)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855904.02, "dur": 0.08, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855904.0, "dur": 0.2, "name": "current_thread (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1306)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855904.4, "dur": 0.1, "name": "daemon (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1095)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855905.12, "dur": 0.58, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855905.8, "dur": 2.3, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855905.1, "dur": 3.2, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:505)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855908.9, "dur": 0.4, "name": "_make_invoke_excepthook (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1177)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855910.0, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855909.6, "dur": 0.5, "name": "add (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855902.8, "dur": 7.32, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:761)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855911.4, "dur": 0.2, "name": "is_set (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855913.0, "dur": 38.1, "name": "_thread.start_new_thread", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855953.5, "dur": 0.1, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855953.2, "dur": 0.5, "name": "__enter__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855955.6, "dur": 0.3, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855955.3, "dur": 0.62, "name": "_is_owned (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855956.2, "dur": 0.5, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855956.8, "dur": 0.1, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855957.7, "dur": 0.1, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855958.7, "dur": 0.02, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855958.5, "dur": 0.3, "name": "_release_save (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:255)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855959.2, "dur": 13455.3, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869427.1, "dur": 2.0, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869424.6, "dur": 4.8, "name": "_acquire_restore (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:258)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855954.5, "dur": 13475.7, "name": "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:270)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869440.2, "dur": 0.1, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869439.5, "dur": 0.9, "name": "__exit__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855952.3, "dur": 13488.9, "name": "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:540)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385855910.7, "dur": 13531.1, "name": "start (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:834)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869444.5, "dur": 0.4, "name": "is_set (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869448.2, "dur": 73.1, "name": "_thread.start_new_thread", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869523.1, "dur": 0.2, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869523.0, "dur": 0.4, "name": "__enter__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869525.2, "dur": 0.9, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869524.4, "dur": 1.8, "name": "_is_owned (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869526.7, "dur": 2.2, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869529.0, "dur": 0.1, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869529.9, "dur": 0.5, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869531.5, "dur": 0.1, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869531.2, "dur": 0.5, "name": "_release_save (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:255)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869531.9, "dur": 31208.0, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385900756.1, "dur": 5.4, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385900751.7, "dur": 10.1, "name": "_acquire_restore (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:258)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869524.1, "dur": 31239.2, "name": "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:270)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385900778.7, "dur": 0.1, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385900777.1, "dur": 1.9, "name": "__exit__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869522.3, "dur": 31257.4, "name": "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:540)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385869443.3, "dur": 31337.4, "name": "start (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:834)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385900790.8, "dur": 0.8, "name": "is_set (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385900793.5, "dur": 1.0, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385900792.6, "dur": 3.8, "name": "current_thread (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1306)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571765.0, "dur": 4.3, "name": "_multiprocessing.SemLock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571772.9, "dur": 0.9, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571771.2, "dur": 2.8, "name": "__enter__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571776.9, "dur": 0.5, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571778.8, "dur": 0.5, "name": "collections.deque.clear", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571792.3, "dur": 0.4, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571791.8, "dur": 1.9, "name": "current_thread (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1306)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571794.5, "dur": 0.9, "name": "daemon (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1095)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571797.1, "dur": 9.5, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571807.7, "dur": 13.1, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571796.6, "dur": 24.8, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:505)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571823.9, "dur": 1.5, "name": "_make_invoke_excepthook (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1177)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571828.9, "dur": 0.6, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571827.0, "dur": 2.7, "name": "add (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571786.5, "dur": 43.22, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:761)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571832.1, "dur": 0.2, "name": "is_set (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571831.4, "dur": 1.0, "name": "daemon (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1110)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571832.7, "dur": 0.1, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571833.8, "dur": 0.02, "name": "is_set (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571835.5, "dur": 38.0, "name": "_thread.start_new_thread", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571875.4, "dur": 0.1, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571875.2, "dur": 0.4, "name": "__enter__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571876.8, "dur": 0.4, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571876.6, "dur": 0.62, "name": "_is_owned (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571877.4, "dur": 0.6, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571878.1, "dur": 0.1, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571878.5, "dur": 0.2, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571879.5, "dur": 0.02, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571879.3, "dur": 0.3, "name": "_release_save (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:255)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356386572606.2, "dur": 2.9, "name": "_multiprocessing.SemLock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572665.5, "dur": 0.3, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571879.9, "dur": 793.5, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572674.9, "dur": 0.2, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572674.6, "dur": 0.6, "name": "_acquire_restore (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:258)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571876.2, "dur": 799.2, "name": "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:270)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572677.6, "dur": 0.1, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572677.4, "dur": 0.7, "name": "__exit__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571874.5, "dur": 803.8, "name": "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:540)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571833.4, "dur": 845.1, "name": "start (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:834)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572679.1, "dur": 0.1, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572685.2, "dur": 0.3, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572687.4, "dur": 0.5, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572689.4, "dur": 0.6, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572683.9, "dur": 7.3, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:186)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572692.6, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572693.5, "dur": 0.02, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572693.7, "dur": 0.02, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572692.5, "dur": 1.4, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:186)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571775.6, "dur": 918.7, "name": "_start_thread (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:158)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572694.8, "dur": 0.1, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572695.8, "dur": 0.2, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572695.6, "dur": 0.5, "name": "_is_owned (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572695.3, "dur": 2.1, "name": "notify (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572697.8, "dur": 2.1, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572697.7, "dur": 2.3, "name": "__exit__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386571763.1, "dur": 937.3, "name": "put (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:80)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356385885158.9, "dur": 687541.7, "name": "job (.\\processing_test.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356385885156.1, "dur": 687546.4, "name": "run (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:859)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 28528, "ts": 356386572703.3, "dur": 0.1, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356386572611.6, "dur": 98.5, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356386572610.5, "dur": 99.9, "name": "__enter__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356386572711.5, "dur": 0.1, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356386572712.7, "dur": 4.4, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356386572712.4, "dur": 4.9, "name": "_is_owned (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356386572712.2, "dur": 6.5, "name": "notify (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356386572719.4, "dur": 2.1, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356386572719.2, "dur": 2.32, "name": "__exit__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356386572604.8, "dur": 117.0, "name": "put (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:80)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356385856364.0, "dur": 716358.0, "name": "job (.\\processing_test.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356385856362.0, "dur": 716362.2, "name": "run (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:859)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 39076, "ts": 356386572725.5, "dur": 0.1, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385900799.1, "dur": 671951.2, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572751.4, "dur": 0.2, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572756.3, "dur": 0.1, "name": "_thread.lock.locked", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572757.7, "dur": 0.3, "name": "daemon (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1095)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572760.1, "dur": 0.6, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572754.6, "dur": 7.4, "name": "_stop (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:944)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385900798.7, "dur": 671963.6, "name": "_wait_for_tstate_lock (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385900787.8, "dur": 671977.4, "name": "join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:979)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572767.2, "dur": 0.2, "name": "is_set (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572767.9, "dur": 0.4, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572767.7, "dur": 1.2, "name": "current_thread (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1306)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572769.6, "dur": 0.7, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572770.7, "dur": 0.1, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572771.0, "dur": 0.1, "name": "_thread.lock.locked", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572771.4, "dur": 0.1, "name": "daemon (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1095)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572771.8, "dur": 0.1, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572770.9, "dur": 1.1, "name": "_stop (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:944)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572769.3, "dur": 2.8, "name": "_wait_for_tstate_lock (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572766.3, "dur": 6.3, "name": "join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:979)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572776.3, "dur": 0.7, "name": "_multiprocessing.SemLock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572775.2, "dur": 1.9, "name": "__enter__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572779.0, "dur": 1.5, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:134)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572780.9, "dur": 0.3, "name": "_check_readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:138)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572785.5, "dur": 15.6, "name": "_winapi.ReadFile", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572667.6, "dur": 148.3, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572816.4, "dur": 0.2, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572816.7, "dur": 0.1, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572843.5, "dur": 0.5, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572845.5, "dur": 1.2, "name": "dict.update", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572827.8, "dur": 19.1, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:38)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572847.6, "dur": 7.5, "name": "ForkingPickler.dump", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572856.0, "dur": 1.7, "name": "_io.BytesIO.getbuffer", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572819.6, "dur": 38.12, "name": "dumps (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572859.5, "dur": 0.2, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:134)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572860.7, "dur": 0.2, "name": "_check_writable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:142)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572862.6, "dur": 0.5, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572866.8, "dur": 9.9, "name": "_winapi.WriteFile", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572877.6, "dur": 1.0, "name": "_winapi.Overlapped.GetOverlappedResult", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572878.9, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572865.9, "dur": 13.12, "name": "_send_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:279)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572859.0, "dur": 21.1, "name": "send_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:181)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572880.6, "dur": 0.1, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572883.8, "dur": 0.1, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572884.2, "dur": 0.4, "name": "dict.update", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572882.2, "dur": 2.5, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:38)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572884.9, "dur": 0.9, "name": "ForkingPickler.dump", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572886.1, "dur": 0.2, "name": "_io.BytesIO.getbuffer", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572881.5, "dur": 4.82, "name": "dumps (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572886.9, "dur": 0.1, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:134)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572887.1, "dur": 0.1, "name": "_check_writable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:142)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572887.6, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572888.3, "dur": 4.3, "name": "_winapi.WriteFile", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572893.0, "dur": 0.3, "name": "_winapi.Overlapped.GetOverlappedResult", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572893.4, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572888.1, "dur": 5.5, "name": "_send_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:279)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572886.7, "dur": 7.4, "name": "send_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:181)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572894.2, "dur": 0.3, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572896.2, "dur": 0.2, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572897.6, "dur": 0.3, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572897.4, "dur": 0.52, "name": "_is_owned (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572898.1, "dur": 1.0, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572899.2, "dur": 0.1, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572899.5, "dur": 0.2, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572900.1, "dur": 0.02, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572899.9, "dur": 0.3, "name": "_release_save (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:255)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572804.3, "dur": 101.7, "name": "_winapi.WaitForMultipleObjects", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572907.1, "dur": 1.2, "name": "_winapi.Overlapped.GetOverlappedResult", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572910.0, "dur": 0.02, "name": "_winapi.Overlapped.getbuffer", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572910.2, "dur": 0.5, "name": "_io.BytesIO.write", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572782.7, "dur": 128.2, "name": "_recv_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:294)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572912.3, "dur": 0.4, "name": "_io.BytesIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572778.2, "dur": 134.52, "name": "recv_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:208)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572914.5, "dur": 0.4, "name": "_multiprocessing.SemLock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572913.7, "dur": 1.22, "name": "__exit__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:97)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572915.5, "dur": 0.2, "name": "_multiprocessing.SemLock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572916.3, "dur": 6.6, "name": "_pickle.loads", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572773.3, "dur": 149.7, "name": "get (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:92)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572924.4, "dur": 0.5, "name": "_multiprocessing.SemLock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572924.2, "dur": 0.8, "name": "__enter__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572925.7, "dur": 0.1, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:134)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572926.1, "dur": 0.1, "name": "_check_readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:138)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572926.9, "dur": 4.9, "name": "_winapi.ReadFile", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572932.2, "dur": 0.3, "name": "_winapi.Overlapped.GetOverlappedResult", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572932.9, "dur": 0.02, "name": "_winapi.Overlapped.getbuffer", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572932.94, "dur": 0.16, "name": "_io.BytesIO.write", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572926.5, "dur": 6.7, "name": "_recv_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:294)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572933.6, "dur": 0.1, "name": "_io.BytesIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572925.4, "dur": 8.32, "name": "recv_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:208)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572934.2, "dur": 0.1, "name": "_multiprocessing.SemLock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572934.0, "dur": 0.4, "name": "__exit__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:97)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572934.5, "dur": 0.2, "name": "_multiprocessing.SemLock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572934.9, "dur": 0.4, "name": "_pickle.loads", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572923.6, "dur": 11.8, "name": "get (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:92)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386572935.8, "dur": 150.8, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356385852759.6, "dur": 720327.8, "name": "multithread (.\\processing_test.py:53)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573091.5, "dur": 0.4, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573092.9, "dur": 0.3, "name": "sub_debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:44)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573094.9, "dur": 0.1, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573096.0, "dur": 0.6, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573095.6, "dur": 1.1, "name": "__enter__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573097.1, "dur": 0.1, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573098.1, "dur": 0.4, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573097.9, "dur": 0.7, "name": "_is_owned (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573100.2, "dur": 2.4, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573102.9, "dur": 0.1, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573097.6, "dur": 5.9, "name": "notify (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573104.2, "dur": 0.1, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573104.0, "dur": 0.4, "name": "__exit__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573094.4, "dur": 10.2, "name": "_finalize_close (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573090.4, "dur": 15.2, "name": "__call__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:205)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573109.9, "dur": 7.9, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573109.7, "dur": 8.2, "name": "_close (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:276)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573108.9, "dur": 9.1, "name": "__del__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:130)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573121.1, "dur": 0.2, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573119.6, "dur": 1.8, "name": "_remove (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py:38)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573124.8, "dur": 0.02, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573124.6, "dur": 0.3, "name": "_remove (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py:38)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573128.1, "dur": 0.5, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572900.4, "dur": 247.0, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573148.9, "dur": 0.3, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573148.6, "dur": 0.62, "name": "_acquire_restore (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:258)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572897.1, "dur": 252.4, "name": "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:270)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573151.1, "dur": 0.1, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573151.3, "dur": 0.1, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573152.4, "dur": 0.1, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573154.0, "dur": 5.1, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573153.9, "dur": 5.4, "name": "_close (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:276)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573153.4, "dur": 6.3, "name": "close (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:173)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572664.6, "dur": 495.2, "name": "_feed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:207)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573162.9, "dur": 0.1, "name": "__del__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:130)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386572660.7, "dur": 503.3, "name": "run (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:859)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573164.6, "dur": 0.2, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573167.0, "dur": 0.2, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573167.7, "dur": 0.2, "name": "sub_debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:44)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573168.7, "dur": 0.02, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573169.1, "dur": 0.1, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573168.5, "dur": 0.8, "name": "_finalize_join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:190)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573166.5, "dur": 3.3, "name": "__call__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:205)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573171.0, "dur": 0.2, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 38292, "ts": 356386573170.4, "dur": 0.82, "name": "_remove (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py:38)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573131.2, "dur": 69.5, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573209.5, "dur": 0.9, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573207.2, "dur": 3.6, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573216.4, "dur": 0.6, "name": "get_context (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573218.9, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573218.7, "dur": 0.42, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573224.7, "dur": 0.2, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573225.1, "dur": 0.1, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573228.8, "dur": 0.2, "name": "_get_candidate_names (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573235.2, "dur": 0.1, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573235.6, "dur": 0.3, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573234.5, "dur": 1.8, "name": "rng (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:133)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573238.9, "dur": 0.2, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573240.6, "dur": 0.2, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573240.9, "dur": 0.4, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573239.9, "dur": 1.6, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573238.4, "dur": 3.7, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573242.5, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573242.7, "dur": 0.1, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573242.82, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573242.6, "dur": 0.4, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573242.4, "dur": 0.8, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573243.5, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573243.7, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573243.8, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573243.6, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573243.4, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573244.22, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573244.5, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573244.6, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573244.7, "dur": 0.1, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573244.9, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573244.4, "dur": 0.6, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573244.2, "dur": 0.9, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573245.4, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573245.6, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573245.7, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573245.5, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573245.3, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573246.2, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573246.4, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573246.5, "dur": 0.1, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573246.7, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573246.8, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573246.3, "dur": 0.6, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573246.1, "dur": 0.9, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573247.22, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573247.5, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573247.54, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573247.62, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573247.72, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573247.4, "dur": 0.42, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573247.2, "dur": 0.9, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573248.3, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573248.5, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573248.54, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573248.62, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573248.8, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573248.4, "dur": 0.6, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573248.2, "dur": 0.9, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573237.8, "dur": 11.4, "name": "<listcomp> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:147)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573249.8, "dur": 1.0, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573233.2, "dur": 17.7, "name": "__next__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:144)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573232.1, "dur": 19.1, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573253.1, "dur": 0.3, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573253.7, "dur": 1.2, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573255.8, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573255.9, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573255.5, "dur": 1.0, "name": "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573257.7, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573257.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573258.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573258.2, "dur": 0.4, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573260.3, "dur": 1.1, "name": "str.find", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573261.7, "dur": 0.2, "name": "str.find", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573257.6, "dur": 4.7, "name": "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573252.6, "dur": 10.8, "name": "join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:77)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573264.3, "dur": 28.4, "name": "nt.lstat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573263.9, "dur": 30.4, "name": "_exists (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:75)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573227.9, "dur": 66.6, "name": "mktemp (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:390)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573223.0, "dur": 71.6, "name": "arbitrary_address (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:69)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573297.0, "dur": 18.9, "name": "_winapi.CreateNamedPipe", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573316.9, "dur": 4.2, "name": "_winapi.CreateFile", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573321.4, "dur": 1.9, "name": "_winapi.SetNamedPipeHandleState", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573323.5, "dur": 3.7, "name": "_winapi.ConnectNamedPipe", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573327.3, "dur": 0.7, "name": "_winapi.Overlapped.GetOverlappedResult", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573329.1, "dur": 1.4, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573331.0, "dur": 0.3, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573221.7, "dur": 109.7, "name": "Pipe (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:535)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573334.0, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573333.7, "dur": 0.6, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573336.1, "dur": 0.2, "name": "get_context (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:187)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573338.1, "dur": 0.4, "name": "get_start_method (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:197)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573342.0, "dur": 0.3, "name": "current_process (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573344.2, "dur": 0.02, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573344.4, "dur": 0.2, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573344.0, "dur": 0.7, "name": "rng (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:133)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573345.7, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573346.1, "dur": 0.1, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573346.22, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573346.0, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573345.6, "dur": 1.0, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573346.9, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573347.1, "dur": 0.1, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573347.4, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573347.0, "dur": 0.5, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573346.8, "dur": 0.8, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573347.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573348.0, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573348.1, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573347.9, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573347.7, "dur": 0.8, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573348.7, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573348.9, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573349.0, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573348.8, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573348.6, "dur": 0.7, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573349.42, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573349.7, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573349.74, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573349.6, "dur": 0.22, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573349.4, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573350.2, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573350.4, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573350.5, "dur": 0.1, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573350.7, "dur": 0.1, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573350.3, "dur": 0.52, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573350.1, "dur": 0.8, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573351.12, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573351.32, "dur": 0.08, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573351.5, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573351.3, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573351.1, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573351.9, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573352.1, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573352.14, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573352.0, "dur": 0.22, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573351.8, "dur": 0.5, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573345.5, "dur": 6.9, "name": "<listcomp> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:147)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573352.7, "dur": 0.2, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573343.7, "dur": 9.22, "name": "__next__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:144)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573343.3, "dur": 9.8, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573341.0, "dur": 12.7, "name": "_make_name (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573356.7, "dur": 0.1, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573357.3, "dur": 0.6, "name": "_make_methods (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:90)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573337.6, "dur": 20.7, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:50)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573336.9, "dur": 21.6, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:161)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573333.3, "dur": 25.4, "name": "Lock (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:65)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573359.0, "dur": 0.02, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573360.1, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573360.0, "dur": 0.3, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573361.4, "dur": 0.1, "name": "get_context (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:187)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573362.4, "dur": 0.1, "name": "get_start_method (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:197)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573363.2, "dur": 0.1, "name": "current_process (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573364.0, "dur": 0.02, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573364.1, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573363.9, "dur": 0.3, "name": "rng (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:133)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573364.92, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573365.2, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573365.3, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573365.1, "dur": 0.3, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573364.9, "dur": 0.52, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573365.7, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573365.9, "dur": 0.1, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573366.02, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573365.8, "dur": 0.32, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573365.6, "dur": 0.7, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573366.52, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573366.72, "dur": 0.08, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573366.82, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573366.7, "dur": 0.22, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573366.5, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573367.3, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573367.5, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573367.6, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573367.4, "dur": 0.24, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573367.2, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573368.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573368.2, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573368.3, "dur": 0.02, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573368.1, "dur": 0.24, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573367.9, "dur": 0.5, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573368.7, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573368.82, "dur": 0.08, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573368.92, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573368.8, "dur": 0.22, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573368.6, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573369.32, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573369.6, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573369.64, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573369.5, "dur": 0.22, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573369.3, "dur": 0.6, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573370.1, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573370.3, "dur": 0.02, "name": "int.bit_length", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573370.34, "dur": 0.06, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573370.42, "dur": 0.08, "name": "Random.getrandbits", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573370.2, "dur": 0.32, "name": "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573370.0, "dur": 0.7, "name": "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573364.7, "dur": 6.2, "name": "<listcomp> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:147)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573371.1, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573363.7, "dur": 7.5, "name": "__next__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:144)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573363.4, "dur": 8.0, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573363.0, "dur": 8.6, "name": "_make_name (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573372.8, "dur": 0.02, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573373.0, "dur": 0.3, "name": "_make_methods (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:90)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573362.2, "dur": 11.3, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:50)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573361.9, "dur": 11.7, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:144)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573359.7, "dur": 14.0, "name": "BoundedSemaphore (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:85)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573374.4, "dur": 0.1, "name": "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573374.9, "dur": 0.7, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573375.9, "dur": 3.1, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573374.1, "dur": 6.7, "name": "_after_fork (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:67)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573218.2, "dur": 162.7, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:36)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573205.2, "dur": 175.9, "name": "Queue (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:100)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573383.7, "dur": 0.1, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573385.0, "dur": 0.3, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573385.7, "dur": 0.02, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573386.7, "dur": 0.4, "name": "name (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:189)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573392.4, "dur": 0.7, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573393.3, "dur": 0.1, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573391.6, "dur": 2.2, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573396.0, "dur": 0.3, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573395.1, "dur": 1.22, "name": "add (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573383.2, "dur": 13.2, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:80)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573397.2, "dur": 0.02, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573397.6, "dur": 0.1, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573397.9, "dur": 0.02, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573398.2, "dur": 0.02, "name": "name (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:189)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573399.4, "dur": 0.2, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573399.7, "dur": 0.02, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573399.3, "dur": 0.6, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573400.4, "dur": 0.1, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573400.2, "dur": 0.32, "name": "add (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573397.1, "dur": 3.44, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:80)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573401.7, "dur": 0.1, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:99)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573402.0, "dur": 0.1, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573402.8, "dur": 0.1, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573403.3, "dur": 1.1, "name": "_cleanup (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:61)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573405.7, "dur": 0.1, "name": "get_context (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573407.6, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573407.5, "dur": 0.3, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573410.7, "dur": 0.5, "name": "__init__ (<frozen importlib._bootstrap>:143)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573413.0, "dur": 0.5, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573415.4, "dur": 0.4, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573416.4, "dur": 0.3, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573415.0, "dur": 2.2, "name": "__init__ (<frozen importlib._bootstrap>:58)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573418.8, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573412.4, "dur": 6.6, "name": "_get_module_lock (<frozen importlib._bootstrap>:157)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573419.8, "dur": 0.02, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573419.5, "dur": 1.7, "name": "acquire (<frozen importlib._bootstrap>:78)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573412.0, "dur": 9.3, "name": "__enter__ (<frozen importlib._bootstrap>:147)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573421.6, "dur": 0.1, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573422.3, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573425.1, "dur": 0.1, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573424.7, "dur": 0.52, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573426.7, "dur": 0.8, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573426.1, "dur": 1.5, "name": "find_spec (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\site-packages\\_distutils_hack\\__init__.py:89)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573428.1, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573427.9, "dur": 0.3, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573428.62, "dur": 0.08, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573428.6, "dur": 0.12, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573429.5, "dur": 0.2, "name": "find_spec (<frozen importlib._bootstrap>:725)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573429.82, "dur": 0.08, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573429.8, "dur": 0.12, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573430.22, "dur": 0.08, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573430.2, "dur": 0.12, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573431.1, "dur": 0.7, "name": "_imp.is_frozen", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573430.8, "dur": 1.02, "name": "find_spec (<frozen importlib._bootstrap>:800)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573432.0, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573431.9, "dur": 0.2, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573432.4, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573432.3, "dur": 0.14, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573434.9, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573435.5, "dur": 0.9, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573436.7, "dur": 0.3, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573438.2, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573439.7, "dur": 61.0, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573439.0, "dur": 61.8, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573502.4, "dur": 0.9, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573504.6, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573507.1, "dur": 0.5, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573507.7, "dur": 0.5, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573508.4, "dur": 0.5, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573511.0, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573511.2, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573511.4, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573512.3, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573513.2, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573513.4, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573512.8, "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573513.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573518.1, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573504.2, "dur": 14.3, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573519.1, "dur": 1.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573521.1, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573521.9, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573522.1, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573522.3, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573522.9, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573523.02, "dur": 0.18, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573523.22, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573523.4, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573523.8, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573523.9, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573523.7, "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573524.1, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573524.3, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573521.0, "dur": 3.5, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573524.7, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573525.4, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573525.9, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573526.1, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573526.22, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573526.7, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573526.82, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573527.0, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573527.12, "dur": 0.08, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573527.42, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573527.6, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573527.4, "dur": 0.32, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573527.8, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573528.0, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573525.3, "dur": 2.9, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573528.5, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573529.8, "dur": 25.0, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573529.7, "dur": 25.12, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573529.5, "dur": 25.9, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573529.1, "dur": 26.5, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573556.6, "dur": 0.4, "name": "__init__ (<frozen importlib._bootstrap_external>:999)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573558.0, "dur": 0.1, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573559.7, "dur": 0.7, "name": "__init__ (<frozen importlib._bootstrap>:342)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573557.5, "dur": 3.6, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:689)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573556.0, "dur": 5.3, "name": "_get_spec (<frozen importlib._bootstrap_external>:1493)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573437.8, "dur": 123.6, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573434.2, "dur": 127.6, "name": "_get_spec (<frozen importlib._bootstrap_external>:1367)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573433.2, "dur": 129.0, "name": "find_spec (<frozen importlib._bootstrap_external>:1399)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573562.6, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573562.5, "dur": 0.4, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573423.5, "dur": 140.0, "name": "_find_spec (<frozen importlib._bootstrap>:890)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573564.4, "dur": 0.3, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573565.5, "dur": 0.1, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573565.8, "dur": 0.2, "name": "create_module (<frozen importlib._bootstrap_external>:834)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573566.3, "dur": 0.9, "name": "_new_module (<frozen importlib._bootstrap>:35)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573568.2, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573568.4, "dur": 0.3, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573569.0, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573569.5, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573569.2, "dur": 0.5, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573570.0, "dur": 1.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573571.7, "dur": 0.2, "name": "has_location (<frozen importlib._bootstrap>:397)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573572.0, "dur": 0.6, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573572.9, "dur": 0.6, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573576.3, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573577.5, "dur": 0.1, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573579.1, "dur": 0.4, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573578.8, "dur": 0.8, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573579.8, "dur": 0.1, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573579.7, "dur": 0.3, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573580.1, "dur": 0.1, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573578.4, "dur": 2.0, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573577.8, "dur": 3.2, "name": "_path_split (<frozen importlib._bootstrap_external>:127)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573581.2, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573581.8, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573583.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573584.7, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573584.9, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573585.1, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573585.8, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573585.92, "dur": 0.18, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573586.12, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573586.3, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573586.8, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573586.92, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573587.02, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573587.2, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573587.6, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573587.7, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573587.8, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573587.5, "dur": 0.4, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573588.0, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573588.2, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573583.7, "dur": 4.8, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573577.0, "dur": 11.6, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573575.6, "dur": 13.3, "name": "_get_cached (<frozen importlib._bootstrap_external>:484)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573574.5, "dur": 14.7, "name": "cached (<frozen importlib._bootstrap>:376)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573589.4, "dur": 0.1, "name": "cached (<frozen importlib._bootstrap>:376)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573567.9, "dur": 21.8, "name": "_init_module_attrs (<frozen importlib._bootstrap>:477)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573565.3, "dur": 24.5, "name": "module_from_spec (<frozen importlib._bootstrap>:549)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573592.3, "dur": 0.1, "name": "get_filename (<frozen importlib._bootstrap_external>:1024)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573591.5, "dur": 1.0, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:516)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573592.9, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573593.5, "dur": 0.1, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573593.4, "dur": 0.22, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573593.8, "dur": 0.1, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573593.7, "dur": 0.22, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573594.0, "dur": 0.02, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573593.3, "dur": 0.9, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573593.1, "dur": 1.4, "name": "_path_split (<frozen importlib._bootstrap_external>:127)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573594.6, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573594.9, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573595.52, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573596.2, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573596.4, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573596.6, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573597.1, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573597.2, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573597.4, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573597.52, "dur": 0.08, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573597.8, "dur": 6.5, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573604.5, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573604.7, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573604.9, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573605.42, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573605.6, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573605.8, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573605.4, "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573606.0, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573606.2, "dur": 0.2, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573595.5, "dur": 11.0, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573592.8, "dur": 13.8, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573607.5, "dur": 15.7, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573607.4, "dur": 15.82, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573607.1, "dur": 16.7, "name": "path_stats (<frozen importlib._bootstrap_external>:1070)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573625.6, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573626.6, "dur": 245.3, "name": "io.open_code", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573873.6, "dur": 56.0, "name": "_io.BufferedReader.read", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573625.3, "dur": 313.2, "name": "get_data (<frozen importlib._bootstrap_external>:1029)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573941.9, "dur": 0.4, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573943.6, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573944.2, "dur": 0.4, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573943.2, "dur": 1.6, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573940.6, "dur": 4.7, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:553)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573947.32, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573947.4, "dur": 0.2, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573947.3, "dur": 0.4, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573948.22, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573948.4, "dur": 0.02, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573948.2, "dur": 0.3, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573947.0, "dur": 1.6, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:586)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573949.7, "dur": 0.7, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573951.4, "dur": 43.7, "name": "marshal.loads", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573995.3, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573995.6, "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573996.3, "dur": 0.8, "name": "_imp._fix_co_filename", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573950.9, "dur": 46.3, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:638)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573590.9, "dur": 406.4, "name": "get_code (<frozen importlib._bootstrap_external>:909)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574005.8, "dur": 0.3, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574005.3, "dur": 1.0, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574009.0, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574008.9, "dur": 0.32, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574010.7, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574011.5, "dur": 0.7, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574012.7, "dur": 1.6, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574016.8, "dur": 0.4, "name": "__init__ (<frozen importlib._bootstrap>:143)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574018.3, "dur": 0.2, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574020.9, "dur": 0.8, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574021.9, "dur": 0.3, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574020.7, "dur": 2.3, "name": "__init__ (<frozen importlib._bootstrap>:58)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574024.1, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574017.9, "dur": 6.4, "name": "_get_module_lock (<frozen importlib._bootstrap>:157)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574024.9, "dur": 0.1, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574024.7, "dur": 1.8, "name": "acquire (<frozen importlib._bootstrap>:78)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574017.6, "dur": 8.92, "name": "__enter__ (<frozen importlib._bootstrap>:147)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574027.1, "dur": 0.1, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574027.7, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574029.9, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574029.5, "dur": 0.6, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574031.2, "dur": 0.4, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574030.9, "dur": 0.8, "name": "find_spec (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\site-packages\\_distutils_hack\\__init__.py:89)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574032.1, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574031.9, "dur": 0.3, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574032.72, "dur": 0.08, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574032.7, "dur": 0.12, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574033.3, "dur": 0.1, "name": "find_spec (<frozen importlib._bootstrap>:725)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574033.6, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574033.5, "dur": 0.2, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574034.0, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574033.9, "dur": 0.3, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574035.4, "dur": 0.3, "name": "_imp.is_frozen", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574035.0, "dur": 0.8, "name": "find_spec (<frozen importlib._bootstrap>:800)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574035.92, "dur": 0.08, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574035.9, "dur": 0.12, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574036.4, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574036.3, "dur": 0.14, "name": "__enter__ (<frozen importlib._bootstrap>:863)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574037.7, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574038.4, "dur": 0.6, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574039.2, "dur": 0.3, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574039.8, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574040.6, "dur": 22.2, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574040.3, "dur": 22.6, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574064.0, "dur": 0.5, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574065.6, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574067.3, "dur": 0.2, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574067.7, "dur": 0.2, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574068.0, "dur": 0.3, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574069.7, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574069.82, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574070.0, "dur": 0.2, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574070.6, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574071.5, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574071.7, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574071.2, "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574072.1, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574072.4, "dur": 0.2, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574065.4, "dur": 7.4, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574073.3, "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574074.2, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574075.0, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574075.12, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574075.3, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574075.9, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574076.1, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574076.22, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574076.4, "dur": 0.1, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574076.8, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574076.9, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574076.7, "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574077.1, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574077.2, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574074.1, "dur": 3.4, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574077.7, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574078.3, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574078.8, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574079.1, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574079.3, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574079.7, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574079.82, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574080.0, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574080.2, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574080.5, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574080.6, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574080.4, "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574080.8, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574080.9, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574078.2, "dur": 2.9, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574081.2, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574082.8, "dur": 16.0, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574082.7, "dur": 16.12, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574082.6, "dur": 16.7, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574082.2, "dur": 17.4, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574100.2, "dur": 0.4, "name": "__init__ (<frozen importlib._bootstrap_external>:999)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574101.6, "dur": 0.1, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574102.5, "dur": 0.5, "name": "__init__ (<frozen importlib._bootstrap>:342)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574101.1, "dur": 2.7, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:689)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574099.9, "dur": 4.0, "name": "_get_spec (<frozen importlib._bootstrap_external>:1493)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574039.7, "dur": 64.4, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574037.3, "dur": 67.1, "name": "_get_spec (<frozen importlib._bootstrap_external>:1367)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574037.0, "dur": 67.7, "name": "find_spec (<frozen importlib._bootstrap_external>:1399)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574104.9, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574104.8, "dur": 0.22, "name": "__exit__ (<frozen importlib._bootstrap>:867)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574028.7, "dur": 76.7, "name": "_find_spec (<frozen importlib._bootstrap>:890)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574106.1, "dur": 0.1, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574106.8, "dur": 0.1, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574107.1, "dur": 0.2, "name": "create_module (<frozen importlib._bootstrap_external>:834)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574107.7, "dur": 0.8, "name": "_new_module (<frozen importlib._bootstrap>:35)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574109.3, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574109.5, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574109.8, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574110.2, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574110.0, "dur": 0.5, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574110.7, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574112.1, "dur": 0.1, "name": "has_location (<frozen importlib._bootstrap>:397)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574112.4, "dur": 0.5, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574113.2, "dur": 0.6, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574115.5, "dur": 0.2, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574116.4, "dur": 0.1, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574118.1, "dur": 0.3, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574117.8, "dur": 0.7, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574118.7, "dur": 0.2, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574118.6, "dur": 0.32, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574119.2, "dur": 0.1, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574117.4, "dur": 2.1, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574116.7, "dur": 3.5, "name": "_path_split (<frozen importlib._bootstrap_external>:127)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574120.5, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574121.0, "dur": 0.2, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574122.4, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574123.2, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574123.32, "dur": 0.18, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574123.6, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574124.2, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574124.3, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574124.5, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574124.7, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574125.1, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574125.3, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574125.42, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574125.6, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574125.9, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574126.1, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574126.2, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574125.8, "dur": 0.52, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574126.5, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574126.6, "dur": 0.2, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574122.3, "dur": 4.6, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574115.9, "dur": 11.1, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574115.0, "dur": 12.2, "name": "_get_cached (<frozen importlib._bootstrap_external>:484)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574114.1, "dur": 13.3, "name": "cached (<frozen importlib._bootstrap>:376)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574127.5, "dur": 0.1, "name": "cached (<frozen importlib._bootstrap>:376)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574108.9, "dur": 18.9, "name": "_init_module_attrs (<frozen importlib._bootstrap>:477)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574106.7, "dur": 21.2, "name": "module_from_spec (<frozen importlib._bootstrap>:549)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574130.3, "dur": 0.1, "name": "get_filename (<frozen importlib._bootstrap_external>:1024)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574129.7, "dur": 0.8, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:516)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574130.9, "dur": 0.1, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574131.5, "dur": 0.1, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574131.4, "dur": 0.22, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574131.72, "dur": 0.18, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574131.7, "dur": 0.22, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574132.0, "dur": 0.02, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574131.3, "dur": 0.9, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574131.1, "dur": 1.4, "name": "_path_split (<frozen importlib._bootstrap_external>:127)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574132.6, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574132.9, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574133.62, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574134.2, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574134.4, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574134.6, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574135.1, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574135.22, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574135.4, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574135.52, "dur": 0.08, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574135.9, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574136.1, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574136.22, "dur": 0.08, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574136.4, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574136.6, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574136.72, "dur": 0.08, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574136.9, "dur": 0.1, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574136.5, "dur": 0.52, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574137.1, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574137.2, "dur": 0.1, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574133.6, "dur": 3.8, "name": "_path_join (<frozen importlib._bootstrap_external>:91)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574130.8, "dur": 6.7, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574138.0, "dur": 11.5, "name": "nt.stat", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574137.9, "dur": 11.7, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574137.8, "dur": 12.2, "name": "path_stats (<frozen importlib._bootstrap_external>:1070)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574151.3, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574151.7, "dur": 126.4, "name": "io.open_code", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574279.1, "dur": 33.3, "name": "_io.BufferedReader.read", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574151.0, "dur": 168.1, "name": "get_data (<frozen importlib._bootstrap_external>:1029)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574321.7, "dur": 0.2, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574322.5, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574323.4, "dur": 0.3, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574322.3, "dur": 1.42, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574321.0, "dur": 3.2, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:553)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574325.92, "dur": 0.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574326.1, "dur": 0.1, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574325.9, "dur": 0.32, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574326.7, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574326.8, "dur": 0.1, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574326.6, "dur": 0.32, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574325.7, "dur": 1.3, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:586)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574327.6, "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574328.4, "dur": 54.2, "name": "marshal.loads", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574382.8, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574383.1, "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574383.5, "dur": 0.7, "name": "_imp._fix_co_filename", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574328.2, "dur": 56.02, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:638)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574129.3, "dur": 255.1, "name": "get_code (<frozen importlib._bootstrap_external>:909)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574390.6, "dur": 0.3, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574390.4, "dur": 0.7, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574392.6, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574392.8, "dur": 0.3, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574393.2, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574393.5, "dur": 0.7, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574392.3, "dur": 2.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574394.8, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574394.7, "dur": 0.3, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574395.4, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574395.52, "dur": 0.18, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574395.3, "dur": 0.42, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574396.0, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574395.9, "dur": 0.22, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574398.1, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574398.0, "dur": 0.2, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574398.5, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574398.7, "dur": 0.1, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574398.4, "dur": 0.42, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574399.4, "dur": 1.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574400.9, "dur": 0.2, "name": "str.lower", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574401.3, "dur": 0.3, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574386.3, "dur": 17.2, "name": "<module> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:11)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574385.7, "dur": 18.0, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574385.6, "dur": 18.2, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574128.9, "dur": 275.0, "name": "exec_module (<frozen importlib._bootstrap_external>:837)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574404.9, "dur": 0.2, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574405.7, "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574105.9, "dur": 300.2, "name": "_load_unlocked (<frozen importlib._bootstrap>:650)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574406.6, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574406.9, "dur": 0.3, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574027.5, "dur": 379.72, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:956)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574408.5, "dur": 0.1, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574408.2, "dur": 1.9, "name": "release (<frozen importlib._bootstrap>:103)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574407.8, "dur": 2.4, "name": "__exit__ (<frozen importlib._bootstrap>:151)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574411.0, "dur": 0.1, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574411.3, "dur": 0.1, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574411.7, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574410.7, "dur": 1.12, "name": "cb (<frozen importlib._bootstrap>:176)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574016.2, "dur": 396.9, "name": "_find_and_load (<frozen importlib._bootstrap>:986)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574014.8, "dur": 398.8, "name": "builtins.__import__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574014.7, "dur": 399.0, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574010.2, "dur": 403.8, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574414.6, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574414.5, "dur": 0.3, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574415.2, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574415.3, "dur": 0.1, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574415.1, "dur": 0.32, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574416.0, "dur": 0.7, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574416.9, "dur": 0.1, "name": "str.lower", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574417.1, "dur": 0.1, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574418.1, "dur": 0.1, "name": "_path_eq (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:22)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574419.7, "dur": 1.2, "name": "Popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:38)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574418.7, "dur": 15.6, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574000.3, "dur": 434.1, "name": "<module> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:1)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573998.8, "dur": 435.7, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573998.7, "dur": 435.9, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573590.4, "dur": 844.4, "name": "exec_module (<frozen importlib._bootstrap_external>:837)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574435.5, "dur": 0.3, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574436.1, "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573564.1, "dur": 872.3, "name": "_load_unlocked (<frozen importlib._bootstrap>:650)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574436.7, "dur": 0.1, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574436.9, "dur": 0.5, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573422.1, "dur": 1015.4, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:956)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574437.9, "dur": 0.1, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574437.8, "dur": 0.9, "name": "release (<frozen importlib._bootstrap>:103)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574437.7, "dur": 1.02, "name": "__exit__ (<frozen importlib._bootstrap>:151)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574439.02, "dur": 0.08, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574439.2, "dur": 0.1, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574439.5, "dur": 0.1, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574439.0, "dur": 0.62, "name": "cb (<frozen importlib._bootstrap>:176)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573409.8, "dur": 1030.7, "name": "_find_and_load (<frozen importlib._bootstrap>:986)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574444.5, "dur": 0.2, "name": "current_process (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574444.8, "dur": 0.5, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574443.6, "dur": 1.8, "name": "_check_not_importing_main (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:132)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574446.0, "dur": 0.1, "name": "current_process (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574446.7, "dur": 0.4, "name": "authkey (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:213)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574449.0, "dur": 0.4, "name": "list.copy", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574449.7, "dur": 1.0, "name": "list.index", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574452.2, "dur": 1.1, "name": "nt.getcwd", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574453.8, "dur": 0.7, "name": "get_start_method (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574454.7, "dur": 0.7, "name": "dict.update", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574456.1, "dur": 0.2, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574456.6, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574458.1, "dur": 0.1, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574458.4, "dur": 0.2, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574458.7, "dur": 0.4, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574459.2, "dur": 7.0, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574466.8, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574467.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574467.2, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574467.5, "dur": 0.2, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574466.6, "dur": 2.2, "name": "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574469.0, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574469.8, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574469.6, "dur": 0.4, "name": "_get_bothseps (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:34)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574457.7, "dur": 12.5, "name": "isabs (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:61)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574471.0, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574471.2, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574471.52, "dur": 0.08, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574471.7, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574471.8, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574471.92, "dur": 0.08, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574471.5, "dur": 1.1, "name": "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574473.3, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574473.4, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574473.5, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574473.6, "dur": 0.1, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574473.2, "dur": 0.9, "name": "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574470.9, "dur": 4.4, "name": "join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:77)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574476.0, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574476.1, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574476.3, "dur": 0.2, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574476.6, "dur": 0.02, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574476.9, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574476.94, "dur": 0.06, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574477.1, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574477.2, "dur": 0.1, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574476.8, "dur": 0.9, "name": "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574477.8, "dur": 0.1, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574478.3, "dur": 0.2, "name": "str.lstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574478.7, "dur": 0.7, "name": "str.split", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574479.5, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574480.1, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574480.4, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574480.6, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574481.1, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574481.3, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574481.5, "dur": 0.3, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574475.9, "dur": 6.0, "name": "normpath (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:450)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574443.4, "dur": 38.8, "name": "get_preparation_data (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:150)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574482.6, "dur": 14.2, "name": "_winapi.CreatePipe", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574497.2, "dur": 1.0, "name": "msvcrt.open_osfhandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574498.5, "dur": 0.2, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574499.2, "dur": 0.8, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574500.3, "dur": 0.4, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574501.8, "dur": 0.8, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:87)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574502.8, "dur": 0.4, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:87)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574503.3, "dur": 0.02, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:87)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574501.3, "dur": 2.5, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574506.9, "dur": 0.6, "name": "_optim_args_from_interpreter_flags (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\subprocess.py:263)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574507.6, "dur": 0.1, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574507.9, "dur": 0.4, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574508.5, "dur": 0.2, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574508.9, "dur": 0.2, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574509.3, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574509.5, "dur": 0.2, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574509.8, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574511.4, "dur": 0.2, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574505.4, "dur": 7.3, "name": "_args_from_interpreter_flags (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\subprocess.py:273)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574499.1, "dur": 14.3, "name": "get_command_line (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:78)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574514.0, "dur": 0.3, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:57)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574514.4, "dur": 0.1, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:57)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574514.6, "dur": 0.2, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:57)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574514.9, "dur": 0.1, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:57)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574515.1, "dur": 0.02, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:57)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574513.9, "dur": 1.6, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574515.9, "dur": 0.1, "name": "get_executable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:45)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574516.4, "dur": 8.8, "name": "io.open", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574526.5, "dur": 3037.2, "name": "_winapi.CreateProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577566.1, "dur": 1.2, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577576.3, "dur": 0.3, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577576.9, "dur": 0.3, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577573.7, "dur": 4.1, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:186)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577579.1, "dur": 1.6, "name": "set_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577588.6, "dur": 0.4, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577589.6, "dur": 0.9, "name": "dict.update", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577583.0, "dur": 7.6, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:38)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577604.2, "dur": 0.9, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577603.5, "dur": 1.9, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577609.3, "dur": 0.3, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577609.1, "dur": 0.52, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577602.5, "dur": 9.0, "name": "__reduce__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:344)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577591.0, "dur": 33.8, "name": "ForkingPickler.dump", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577581.9, "dur": 44.1, "name": "dump (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:58)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577627.9, "dur": 0.2, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577628.3, "dur": 0.3, "name": "dict.update", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577626.8, "dur": 1.82, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:38)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577636.6, "dur": 0.5, "name": "mappingproxy.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577637.5, "dur": 0.7, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577635.3, "dur": 4.5, "name": "_slotnames (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\copyreg.py:99)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577644.3, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577644.1, "dur": 0.5, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577645.9, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577645.8, "dur": 0.2, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577643.9, "dur": 2.6, "name": "__reduce__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:344)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577653.0, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577652.9, "dur": 0.22, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577652.7, "dur": 0.5, "name": "assert_spawning (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:357)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577652.0, "dur": 2.3, "name": "__getstate__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:57)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577657.7, "dur": 0.1, "name": "readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:158)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577658.8, "dur": 0.2, "name": "writable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:163)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577660.6, "dur": 0.2, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:134)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577660.3, "dur": 0.6, "name": "fileno (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577722.8, "dur": 0.1, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577723.4, "dur": 2.6, "name": "_winapi.OpenProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577726.3, "dur": 0.2, "name": "_winapi.GetCurrentProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577726.6, "dur": 1.2, "name": "_winapi.DuplicateHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577728.4, "dur": 0.5, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577722.3, "dur": 7.2, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:106)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577730.0, "dur": 0.1, "name": "readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:158)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577730.3, "dur": 0.1, "name": "writable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:163)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577656.9, "dur": 73.6, "name": "reduce_pipe_connection (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:956)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577734.4, "dur": 0.3, "name": "mappingproxy.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577734.9, "dur": 0.5, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577734.1, "dur": 1.7, "name": "_slotnames (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\copyreg.py:99)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577738.7, "dur": 0.02, "name": "readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:158)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577738.9, "dur": 0.1, "name": "writable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:163)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577739.8, "dur": 0.1, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:134)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577739.6, "dur": 0.4, "name": "fileno (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577740.5, "dur": 0.1, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577740.8, "dur": 0.9, "name": "_winapi.OpenProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577741.8, "dur": 0.1, "name": "_winapi.GetCurrentProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577742.0, "dur": 0.4, "name": "_winapi.DuplicateHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577768.1, "dur": 0.3, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577740.4, "dur": 28.4, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:106)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577769.0, "dur": 0.1, "name": "readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:158)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577769.2, "dur": 0.02, "name": "writable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:163)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577738.5, "dur": 30.8, "name": "reduce_pipe_connection (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:956)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577772.8, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577772.7, "dur": 0.22, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577772.5, "dur": 0.5, "name": "assert_spawning (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:357)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577773.5, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577773.4, "dur": 0.2, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577774.4, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577774.3, "dur": 0.22, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577775.6, "dur": 0.02, "name": "_winapi.GetCurrentProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577776.4, "dur": 0.8, "name": "_winapi.DuplicateHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577775.4, "dur": 1.9, "name": "duplicate (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577774.2, "dur": 3.2, "name": "duplicate_for_child (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:97)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577772.3, "dur": 5.7, "name": "__getstate__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:100)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577780.9, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577780.8, "dur": 0.22, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577780.6, "dur": 0.5, "name": "assert_spawning (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:357)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577781.4, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577781.3, "dur": 0.2, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577781.9, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577781.8, "dur": 0.2, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577782.5, "dur": 0.1, "name": "_winapi.GetCurrentProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577782.8, "dur": 0.4, "name": "_winapi.DuplicateHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577782.4, "dur": 0.9, "name": "duplicate (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577781.7, "dur": 1.62, "name": "duplicate_for_child (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:97)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577780.4, "dur": 3.3, "name": "__getstate__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:100)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577628.8, "dur": 157.8, "name": "ForkingPickler.dump", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577626.5, "dur": 161.4, "name": "dump (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:58)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577788.2, "dur": 0.2, "name": "set_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386574442.8, "dur": 3364.0, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:44)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573407.1, "dur": 4401.8, "name": "_Popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:324)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573405.1, "dur": 4404.0, "name": "_Popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577811.7, "dur": 0.2, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573401.1, "dur": 4411.4, "name": "start (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:110)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577813.7, "dur": 0.3, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:99)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577814.4, "dur": 0.1, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577815.2, "dur": 0.1, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577819.1, "dur": 0.8, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577820.3, "dur": 0.7, "name": "_winapi.WaitForSingleObject", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577817.7, "dur": 3.6, "name": "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:101)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577817.1, "dur": 4.3, "name": "poll (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577815.5, "dur": 6.2, "name": "_cleanup (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:61)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577822.5, "dur": 1.0, "name": "get_context (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577825.1, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577824.7, "dur": 0.7, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577828.0, "dur": 0.1, "name": "current_process (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577828.2, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577827.6, "dur": 0.8, "name": "_check_not_importing_main (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:132)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577828.7, "dur": 0.1, "name": "current_process (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577829.2, "dur": 0.1, "name": "authkey (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:213)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577830.4, "dur": 0.2, "name": "list.copy", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577831.1, "dur": 0.9, "name": "list.index", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577833.4, "dur": 1.1, "name": "nt.getcwd", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577834.7, "dur": 0.4, "name": "get_start_method (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577835.2, "dur": 0.7, "name": "dict.update", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577836.3, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577836.7, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577838.1, "dur": 0.1, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577838.4, "dur": 0.2, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577838.8, "dur": 0.2, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577839.5, "dur": 0.4, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577840.5, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577840.7, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577841.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577841.2, "dur": 0.1, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577840.3, "dur": 2.3, "name": "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577842.8, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577843.8, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577843.6, "dur": 0.24, "name": "_get_bothseps (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:34)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577837.7, "dur": 6.4, "name": "isabs (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:61)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577845.0, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577845.1, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577845.5, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577845.6, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577845.7, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577845.9, "dur": 0.02, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577845.4, "dur": 1.2, "name": "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577847.4, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577847.5, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577847.6, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577847.7, "dur": 0.1, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577847.3, "dur": 0.8, "name": "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577844.8, "dur": 4.6, "name": "join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:77)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577849.92, "dur": 0.08, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577850.1, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577850.3, "dur": 0.2, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577850.6, "dur": 0.02, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577850.9, "dur": 0.02, "name": "nt.fspath", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577850.94, "dur": 0.06, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577851.1, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577851.2, "dur": 0.1, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577850.8, "dur": 0.9, "name": "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577851.8, "dur": 0.2, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577852.4, "dur": 0.3, "name": "str.lstrip", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577852.9, "dur": 0.3, "name": "str.split", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577853.4, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577854.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577854.3, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577854.5, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577854.9, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577855.1, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577855.3, "dur": 0.4, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577849.9, "dur": 6.0, "name": "normpath (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:450)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577827.3, "dur": 28.8, "name": "get_preparation_data (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:150)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577856.5, "dur": 13.9, "name": "_winapi.CreatePipe", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577870.8, "dur": 0.9, "name": "msvcrt.open_osfhandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577872.0, "dur": 0.02, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577872.6, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577874.0, "dur": 0.3, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577875.3, "dur": 1.3, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:87)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577876.8, "dur": 0.4, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:87)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577877.3, "dur": 0.1, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:87)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577875.0, "dur": 3.0, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577880.9, "dur": 1.0, "name": "_optim_args_from_interpreter_flags (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\subprocess.py:263)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577882.2, "dur": 0.1, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577882.5, "dur": 0.3, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577883.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577883.2, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577883.3, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577883.5, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577883.8, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577884.5, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577879.5, "dur": 6.6, "name": "_args_from_interpreter_flags (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\subprocess.py:273)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577872.5, "dur": 14.4, "name": "get_command_line (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:78)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577887.5, "dur": 0.3, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:57)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577887.9, "dur": 0.2, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:57)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577888.2, "dur": 0.2, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:57)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577888.5, "dur": 7.8, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:57)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577896.5, "dur": 0.1, "name": "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:57)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577887.4, "dur": 9.7, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577897.7, "dur": 0.02, "name": "get_executable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:45)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577898.3, "dur": 9.1, "name": "io.open", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577908.1, "dur": 2358.3, "name": "_winapi.CreateProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580269.4, "dur": 1.6, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580279.1, "dur": 0.4, "name": "builtins.next", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580279.9, "dur": 0.4, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580276.6, "dur": 4.5, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:186)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580282.8, "dur": 2.1, "name": "set_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580293.5, "dur": 0.5, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580294.7, "dur": 1.1, "name": "dict.update", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580287.2, "dur": 8.7, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:38)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580303.1, "dur": 0.7, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580302.5, "dur": 2.3, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580309.5, "dur": 0.3, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580309.3, "dur": 0.6, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580301.2, "dur": 11.2, "name": "__reduce__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:344)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580296.1, "dur": 28.2, "name": "ForkingPickler.dump", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580286.0, "dur": 39.6, "name": "dump (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:58)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580327.3, "dur": 0.2, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580327.7, "dur": 0.3, "name": "dict.update", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580326.4, "dur": 1.7, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:38)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580335.0, "dur": 0.2, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580334.8, "dur": 0.42, "name": "parent (<frozen importlib._bootstrap>:389)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580336.5, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580336.4, "dur": 0.22, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580334.6, "dur": 2.4, "name": "__reduce__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:344)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580343.72, "dur": 0.08, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580343.7, "dur": 0.2, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580343.4, "dur": 0.6, "name": "assert_spawning (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:357)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580342.5, "dur": 2.4, "name": "__getstate__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:57)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580351.5, "dur": 0.3, "name": "readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:158)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580352.4, "dur": 0.2, "name": "writable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:163)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580353.9, "dur": 0.2, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:134)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580353.5, "dur": 0.62, "name": "fileno (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580355.9, "dur": 0.02, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580356.4, "dur": 2.5, "name": "_winapi.OpenProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580359.4, "dur": 0.1, "name": "_winapi.GetCurrentProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580359.6, "dur": 1.2, "name": "_winapi.DuplicateHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580361.4, "dur": 0.5, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580355.5, "dur": 7.1, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:106)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580363.1, "dur": 0.1, "name": "readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:158)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580363.3, "dur": 0.1, "name": "writable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:163)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580350.9, "dur": 12.6, "name": "reduce_pipe_connection (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:956)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580367.0, "dur": 0.2, "name": "readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:158)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580367.4, "dur": 0.02, "name": "writable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:163)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580367.9, "dur": 0.2, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:134)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580367.8, "dur": 0.4, "name": "fileno (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580368.6, "dur": 0.02, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580368.8, "dur": 0.8, "name": "_winapi.OpenProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580369.7, "dur": 0.1, "name": "_winapi.GetCurrentProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580369.9, "dur": 0.6, "name": "_winapi.DuplicateHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580370.7, "dur": 0.3, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580368.5, "dur": 2.6, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:106)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580371.3, "dur": 0.02, "name": "readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:158)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580371.5, "dur": 0.02, "name": "writable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:163)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580366.9, "dur": 4.7, "name": "reduce_pipe_connection (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:956)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580374.0, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580373.9, "dur": 0.22, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580373.8, "dur": 0.4, "name": "assert_spawning (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:357)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580374.72, "dur": 0.08, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580374.7, "dur": 0.12, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580375.8, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580375.7, "dur": 0.2, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580376.8, "dur": 0.02, "name": "_winapi.GetCurrentProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580377.2, "dur": 1.3, "name": "_winapi.DuplicateHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580376.6, "dur": 1.92, "name": "duplicate (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580375.5, "dur": 3.1, "name": "duplicate_for_child (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:97)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580373.5, "dur": 5.8, "name": "__getstate__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:100)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580381.9, "dur": 0.1, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580381.8, "dur": 0.22, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580381.7, "dur": 0.4, "name": "assert_spawning (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:357)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580382.4, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580382.3, "dur": 0.2, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580382.9, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580382.8, "dur": 0.14, "name": "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580383.22, "dur": 0.08, "name": "_winapi.GetCurrentProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580383.6, "dur": 0.5, "name": "_winapi.DuplicateHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580383.2, "dur": 1.1, "name": "duplicate (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580382.7, "dur": 1.7, "name": "duplicate_for_child (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:97)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580381.5, "dur": 3.2, "name": "__getstate__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:100)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580328.2, "dur": 58.8, "name": "ForkingPickler.dump", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580326.1, "dur": 62.2, "name": "dump (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:58)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580388.5, "dur": 0.3, "name": "set_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577826.9, "dur": 2576.9, "name": "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:44)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577824.3, "dur": 2581.5, "name": "_Popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:324)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577822.0, "dur": 2584.3, "name": "_Popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580408.7, "dur": 0.3, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386577813.3, "dur": 2595.9, "name": "start (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:110)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580410.8, "dur": 0.1, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:99)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580411.2, "dur": 0.1, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580412.7, "dur": 435495.0, "name": "_winapi.WaitForSingleObject", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387015913.7, "dur": 3.3, "name": "_winapi.GetExitCodeProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580412.1, "dur": 435506.6, "name": "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:101)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387015921.4, "dur": 0.5, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386580410.3, "dur": 435511.8, "name": "join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:142)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387015925.2, "dur": 0.3, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:99)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387015927.1, "dur": 0.8, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387015931.5, "dur": 5617.3, "name": "_winapi.WaitForSingleObject", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021552.4, "dur": 2.0, "name": "_winapi.GetExitCodeProcess", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387015928.7, "dur": 5627.0, "name": "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:101)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021557.4, "dur": 0.4, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387015924.4, "dur": 5633.6, "name": "join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:142)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021563.9, "dur": 1.6, "name": "_multiprocessing.SemLock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021562.4, "dur": 3.2, "name": "__enter__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021567.6, "dur": 0.3, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:134)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021568.4, "dur": 0.4, "name": "_check_readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:138)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021570.4, "dur": 7.5, "name": "_winapi.ReadFile", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021579.1, "dur": 1.8, "name": "_winapi.Overlapped.GetOverlappedResult", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021583.3, "dur": 0.1, "name": "_winapi.Overlapped.getbuffer", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021583.6, "dur": 0.5, "name": "_io.BytesIO.write", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021569.3, "dur": 14.9, "name": "_recv_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:294)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021585.7, "dur": 0.8, "name": "_io.BytesIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021566.9, "dur": 20.1, "name": "recv_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:208)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021588.1, "dur": 0.5, "name": "_multiprocessing.SemLock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021587.7, "dur": 1.0, "name": "__exit__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:97)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021589.5, "dur": 0.3, "name": "_multiprocessing.SemLock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021591.2, "dur": 2.6, "name": "_pickle.loads", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021560.5, "dur": 33.5, "name": "get (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:92)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021594.7, "dur": 0.2, "name": "_multiprocessing.SemLock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021594.6, "dur": 0.32, "name": "__enter__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021595.3, "dur": 0.1, "name": "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:134)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021595.6, "dur": 0.02, "name": "_check_readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:138)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021596.0, "dur": 1.6, "name": "_winapi.ReadFile", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021598.0, "dur": 0.2, "name": "_winapi.Overlapped.GetOverlappedResult", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021598.5, "dur": 0.02, "name": "_winapi.Overlapped.getbuffer", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021598.6, "dur": 0.1, "name": "_io.BytesIO.write", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021595.8, "dur": 2.92, "name": "_recv_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:294)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021599.1, "dur": 0.1, "name": "_io.BytesIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021595.1, "dur": 4.12, "name": "recv_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:208)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021599.5, "dur": 0.1, "name": "_multiprocessing.SemLock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021599.4, "dur": 0.3, "name": "__exit__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:97)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021599.8, "dur": 0.2, "name": "_multiprocessing.SemLock.release", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021600.1, "dur": 0.3, "name": "_pickle.loads", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021594.3, "dur": 6.12, "name": "get (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:92)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021601.2, "dur": 150.0, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356386573202.1, "dur": 448549.7, "name": "multicore (.\\processing_test.py:34)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021762.2, "dur": 4.1, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021761.9, "dur": 4.5, "name": "_close (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:276)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021760.5, "dur": 6.1, "name": "__del__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:130)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021767.72, "dur": 5.58, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021767.7, "dur": 5.62, "name": "_close (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:276)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021767.5, "dur": 5.9, "name": "__del__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:130)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021776.4, "dur": 0.3, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021774.5, "dur": 2.22, "name": "_remove (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py:38)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021780.8, "dur": 0.5, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021783.1, "dur": 0.5, "name": "sub_debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:44)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021785.2, "dur": 53.8, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021839.5, "dur": 4.2, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021784.4, "dur": 59.6, "name": "_close_handles (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021779.6, "dur": 66.0, "name": "__call__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:205)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021848.2, "dur": 0.1, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021847.7, "dur": 0.7, "name": "_remove (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py:38)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021849.5, "dur": 0.2, "name": "nt.getpid", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021850.2, "dur": 0.1, "name": "sub_debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:44)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021850.7, "dur": 25.7, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021876.7, "dur": 2.5, "name": "_winapi.CloseHandle", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021850.5, "dur": 28.8, "name": "_close_handles (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021849.1, "dur": 30.9, "name": "__call__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:205)", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021881.9, "dur": 0.6, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 26444, "tid": 43052, "ts": 356387021882.9, "dur": 136.8, "name": "builtins.print", "ph": "X", "cat": "FEE"}], "viztracer_metadata": {"version": "0.16.3", "overflow": false}, "file_info": {"files": {".\\processing_test.py": ["import multiprocessing as mp\nimport threading as td\nimport queue\n\ndef job(q):\n    print(type(q))\n    res = 0\n    for i in range(10000000):\n        res += i\n    q.put(res)\n\nif __name__ == '__main__&mp.Queue':\n    q1 = mp.Queue()\n    q2 = mp.Queue()\n    q1.put(1)\n    p1 = mp.Process(target=job, args=(q1,)) # \u53ea\u80fd\u4f7f\u7528mp.Queue, \u4e0d\u80fd\u4f7f\u7528queue.Queue\n    p2 = mp.Process(target=job, args=(q2,)) # \u53ea\u6709\u4e00\u4e2a\u53c2\u6570\u65f6\uff0c\u5e94\u8be5\u52a0\u4e0a\u9017\u53f7\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n\n\nimport multiprocessing as mp\nimport threading as td\nimport time\n\ndef job(q):\n    res = 0\n    for i in range(1000000):\n        res += i+i**2+i**3\n    q.put(res) # queue\n\ndef multicore():\n    q = mp.Queue()\n    p1 = mp.Process(target=job, args=(q,))\n    p2 = mp.Process(target=job, args=(q,))\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n    res1 = q.get()\n    res2 = q.get()\n    print('multicore:' , res1+res2)\n\ndef normal():\n    res = 0\n    for _ in range(2):\n        for i in range(1000000):\n            res += i+i**2+i**3\n    print('normal:', res)\n\ndef multithread():\n    q = mp.Queue()\n    t1 = td.Thread(target=job, args=(q,))\n    t2 = td.Thread(target=job, args=(q,))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    res1 = q.get()\n    res2 = q.get()\n    print('multithread:', res1+res2)\n\nif __name__ == '__main__':\n    from viztracer import VizTracer\n    tracer = VizTracer()\n    tracer.start()\n    st = time.time()\n    normal()\n    st1= time.time()\n    print('normal time:', st1 - st)\n    multithread()\n    st2 = time.time()\n    print('multithread time:', st2 - st1)\n    multicore()\n    print('multicore time:', time.time()-st2)\n\n    # Something happens here\n    tracer.stop()\n    tracer.save('./viztracer_output.json') # also takes output_file as an optional argument", 80], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\site-packages\\_distutils_hack\\__init__.py": ["# don't import any costly modules\nimport sys\nimport os\n\n\nis_pypy = '__pypy__' in sys.builtin_module_names\n\n\ndef warn_distutils_present():\n    if 'distutils' not in sys.modules:\n        return\n    if is_pypy and sys.version_info < (3, 7):\n        # PyPy for 3.6 unconditionally imports distutils, so bypass the warning\n        # https://foss.heptapod.net/pypy/pypy/-/blob/be829135bc0d758997b3566062999ee8b23872b4/lib-python/3/site.py#L250\n        return\n    import warnings\n\n    warnings.warn(\n        \"Distutils was imported before Setuptools, but importing Setuptools \"\n        \"also replaces the `distutils` module in `sys.modules`. This may lead \"\n        \"to undesirable behaviors or errors. To avoid these issues, avoid \"\n        \"using distutils directly, ensure that setuptools is installed in the \"\n        \"traditional way (e.g. not an editable install), and/or make sure \"\n        \"that setuptools is always imported before distutils.\"\n    )\n\n\ndef clear_distutils():\n    if 'distutils' not in sys.modules:\n        return\n    import warnings\n\n    warnings.warn(\"Setuptools is replacing distutils.\")\n    mods = [\n        name\n        for name in sys.modules\n        if name == \"distutils\" or name.startswith(\"distutils.\")\n    ]\n    for name in mods:\n        del sys.modules[name]\n\n\ndef enabled():\n    \"\"\"\n    Allow selection of distutils by environment variable.\n    \"\"\"\n    which = os.environ.get('SETUPTOOLS_USE_DISTUTILS', 'local')\n    return which == 'local'\n\n\ndef ensure_local_distutils():\n    import importlib\n\n    clear_distutils()\n\n    # With the DistutilsMetaFinder in place,\n    # perform an import to cause distutils to be\n    # loaded from setuptools._distutils. Ref #2906.\n    with shim():\n        importlib.import_module('distutils')\n\n    # check that submodules load as expected\n    core = importlib.import_module('distutils.core')\n    assert '_distutils' in core.__file__, core.__file__\n    assert 'setuptools._distutils.log' not in sys.modules\n\n\ndef do_override():\n    \"\"\"\n    Ensure that the local copy of distutils is preferred over stdlib.\n\n    See https://github.com/pypa/setuptools/issues/417#issuecomment-392298401\n    for more motivation.\n    \"\"\"\n    if enabled():\n        warn_distutils_present()\n        ensure_local_distutils()\n\n\nclass _TrivialRe:\n    def __init__(self, *patterns):\n        self._patterns = patterns\n\n    def match(self, string):\n        return all(pat in string for pat in self._patterns)\n\n\nclass DistutilsMetaFinder:\n    def find_spec(self, fullname, path, target=None):\n        # optimization: only consider top level modules and those\n        # found in the CPython test suite.\n        if path is not None and not fullname.startswith('test.'):\n            return\n\n        method_name = 'spec_for_{fullname}'.format(**locals())\n        method = getattr(self, method_name, lambda: None)\n        return method()\n\n    def spec_for_distutils(self):\n        if self.is_cpython():\n            return\n\n        import importlib\n        import importlib.abc\n        import importlib.util\n\n        try:\n            mod = importlib.import_module('setuptools._distutils')\n        except Exception:\n            # There are a couple of cases where setuptools._distutils\n            # may not be present:\n            # - An older Setuptools without a local distutils is\n            #   taking precedence. Ref #2957.\n            # - Path manipulation during sitecustomize removes\n            #   setuptools from the path but only after the hook\n            #   has been loaded. Ref #2980.\n            # In either case, fall back to stdlib behavior.\n            return\n\n        class DistutilsLoader(importlib.abc.Loader):\n            def create_module(self, spec):\n                mod.__name__ = 'distutils'\n                return mod\n\n            def exec_module(self, module):\n                pass\n\n        return importlib.util.spec_from_loader(\n            'distutils', DistutilsLoader(), origin=mod.__file__\n        )\n\n    @staticmethod\n    def is_cpython():\n        \"\"\"\n        Suppress supplying distutils for CPython (build and tests).\n        Ref #2965 and #3007.\n        \"\"\"\n        return os.path.isfile('pybuilddir.txt')\n\n    def spec_for_pip(self):\n        \"\"\"\n        Ensure stdlib distutils when running under pip.\n        See pypa/pip#8761 for rationale.\n        \"\"\"\n        if sys.version_info >= (3, 12) or self.pip_imported_during_build():\n            return\n        clear_distutils()\n        self.spec_for_distutils = lambda: None\n\n    @classmethod\n    def pip_imported_during_build(cls):\n        \"\"\"\n        Detect if pip is being imported in a build script. Ref #2355.\n        \"\"\"\n        import traceback\n\n        return any(\n            cls.frame_file_is_setup(frame) for frame, line in traceback.walk_stack(None)\n        )\n\n    @staticmethod\n    def frame_file_is_setup(frame):\n        \"\"\"\n        Return True if the indicated frame suggests a setup.py file.\n        \"\"\"\n        # some frames may not have __file__ (#2940)\n        return frame.f_globals.get('__file__', '').endswith('setup.py')\n\n    def spec_for_sensitive_tests(self):\n        \"\"\"\n        Ensure stdlib distutils when running select tests under CPython.\n\n        python/cpython#91169\n        \"\"\"\n        clear_distutils()\n        self.spec_for_distutils = lambda: None\n\n    sensitive_tests = (\n        [\n            'test.test_distutils',\n            'test.test_peg_generator',\n            'test.test_importlib',\n        ]\n        if sys.version_info < (3, 10)\n        else [\n            'test.test_distutils',\n        ]\n    )\n\n\nfor name in DistutilsMetaFinder.sensitive_tests:\n    setattr(\n        DistutilsMetaFinder,\n        f'spec_for_{name}',\n        DistutilsMetaFinder.spec_for_sensitive_tests,\n    )\n\n\nDISTUTILS_FINDER = DistutilsMetaFinder()\n\n\ndef add_shim():\n    DISTUTILS_FINDER in sys.meta_path or insert_shim()\n\n\nclass shim:\n    def __enter__(self):\n        insert_shim()\n\n    def __exit__(self, exc, value, tb):\n        _remove_shim()\n\n\ndef insert_shim():\n    sys.meta_path.insert(0, DISTUTILS_FINDER)\n\n\ndef _remove_shim():\n    try:\n        sys.meta_path.remove(DISTUTILS_FINDER)\n    except ValueError:\n        pass\n\n\nif sys.version_info < (3, 12):\n    # DistutilsMetaFinder can only be disabled in Python < 3.12 (PEP 632)\n    remove_shim = _remove_shim\n", 227], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py": ["#\n# A higher level module for using sockets (or Windows named pipes)\n#\n# multiprocessing/connection.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\n__all__ = [ 'Client', 'Listener', 'Pipe', 'wait' ]\n\nimport io\nimport os\nimport sys\nimport socket\nimport struct\nimport time\nimport tempfile\nimport itertools\n\nimport _multiprocessing\n\nfrom . import util\n\nfrom . import AuthenticationError, BufferTooShort\nfrom .context import reduction\n_ForkingPickler = reduction.ForkingPickler\n\ntry:\n    import _winapi\n    from _winapi import WAIT_OBJECT_0, WAIT_ABANDONED_0, WAIT_TIMEOUT, INFINITE\nexcept ImportError:\n    if sys.platform == 'win32':\n        raise\n    _winapi = None\n\n#\n#\n#\n\nBUFSIZE = 8192\n# A very generous timeout when it comes to local connections...\nCONNECTION_TIMEOUT = 20.\n\n_mmap_counter = itertools.count()\n\ndefault_family = 'AF_INET'\nfamilies = ['AF_INET']\n\nif hasattr(socket, 'AF_UNIX'):\n    default_family = 'AF_UNIX'\n    families += ['AF_UNIX']\n\nif sys.platform == 'win32':\n    default_family = 'AF_PIPE'\n    families += ['AF_PIPE']\n\n\ndef _init_timeout(timeout=CONNECTION_TIMEOUT):\n    return time.monotonic() + timeout\n\ndef _check_timeout(t):\n    return time.monotonic() > t\n\n#\n#\n#\n\ndef arbitrary_address(family):\n    '''\n    Return an arbitrary free address for the given family\n    '''\n    if family == 'AF_INET':\n        return ('localhost', 0)\n    elif family == 'AF_UNIX':\n        return tempfile.mktemp(prefix='listener-', dir=util.get_temp_dir())\n    elif family == 'AF_PIPE':\n        return tempfile.mktemp(prefix=r'\\\\.\\pipe\\pyc-%d-%d-' %\n                               (os.getpid(), next(_mmap_counter)), dir=\"\")\n    else:\n        raise ValueError('unrecognized family')\n\ndef _validate_family(family):\n    '''\n    Checks if the family is valid for the current environment.\n    '''\n    if sys.platform != 'win32' and family == 'AF_PIPE':\n        raise ValueError('Family %s is not recognized.' % family)\n\n    if sys.platform == 'win32' and family == 'AF_UNIX':\n        # double check\n        if not hasattr(socket, family):\n            raise ValueError('Family %s is not recognized.' % family)\n\ndef address_type(address):\n    '''\n    Return the types of the address\n\n    This can be 'AF_INET', 'AF_UNIX', or 'AF_PIPE'\n    '''\n    if type(address) == tuple:\n        return 'AF_INET'\n    elif type(address) is str and address.startswith('\\\\\\\\'):\n        return 'AF_PIPE'\n    elif type(address) is str or util.is_abstract_socket_namespace(address):\n        return 'AF_UNIX'\n    else:\n        raise ValueError('address type of %r unrecognized' % address)\n\n#\n# Connection classes\n#\n\nclass _ConnectionBase:\n    _handle = None\n\n    def __init__(self, handle, readable=True, writable=True):\n        handle = handle.__index__()\n        if handle < 0:\n            raise ValueError(\"invalid handle\")\n        if not readable and not writable:\n            raise ValueError(\n                \"at least one of `readable` and `writable` must be True\")\n        self._handle = handle\n        self._readable = readable\n        self._writable = writable\n\n    # XXX should we use util.Finalize instead of a __del__?\n\n    def __del__(self):\n        if self._handle is not None:\n            self._close()\n\n    def _check_closed(self):\n        if self._handle is None:\n            raise OSError(\"handle is closed\")\n\n    def _check_readable(self):\n        if not self._readable:\n            raise OSError(\"connection is write-only\")\n\n    def _check_writable(self):\n        if not self._writable:\n            raise OSError(\"connection is read-only\")\n\n    def _bad_message_length(self):\n        if self._writable:\n            self._readable = False\n        else:\n            self.close()\n        raise OSError(\"bad message length\")\n\n    @property\n    def closed(self):\n        \"\"\"True if the connection is closed\"\"\"\n        return self._handle is None\n\n    @property\n    def readable(self):\n        \"\"\"True if the connection is readable\"\"\"\n        return self._readable\n\n    @property\n    def writable(self):\n        \"\"\"True if the connection is writable\"\"\"\n        return self._writable\n\n    def fileno(self):\n        \"\"\"File descriptor or handle of the connection\"\"\"\n        self._check_closed()\n        return self._handle\n\n    def close(self):\n        \"\"\"Close the connection\"\"\"\n        if self._handle is not None:\n            try:\n                self._close()\n            finally:\n                self._handle = None\n\n    def send_bytes(self, buf, offset=0, size=None):\n        \"\"\"Send the bytes data from a bytes-like object\"\"\"\n        self._check_closed()\n        self._check_writable()\n        m = memoryview(buf)\n        # HACK for byte-indexing of non-bytewise buffers (e.g. array.array)\n        if m.itemsize > 1:\n            m = memoryview(bytes(m))\n        n = len(m)\n        if offset < 0:\n            raise ValueError(\"offset is negative\")\n        if n < offset:\n            raise ValueError(\"buffer length < offset\")\n        if size is None:\n            size = n - offset\n        elif size < 0:\n            raise ValueError(\"size is negative\")\n        elif offset + size > n:\n            raise ValueError(\"buffer length < offset + size\")\n        self._send_bytes(m[offset:offset + size])\n\n    def send(self, obj):\n        \"\"\"Send a (picklable) object\"\"\"\n        self._check_closed()\n        self._check_writable()\n        self._send_bytes(_ForkingPickler.dumps(obj))\n\n    def recv_bytes(self, maxlength=None):\n        \"\"\"\n        Receive bytes data as a bytes object.\n        \"\"\"\n        self._check_closed()\n        self._check_readable()\n        if maxlength is not None and maxlength < 0:\n            raise ValueError(\"negative maxlength\")\n        buf = self._recv_bytes(maxlength)\n        if buf is None:\n            self._bad_message_length()\n        return buf.getvalue()\n\n    def recv_bytes_into(self, buf, offset=0):\n        \"\"\"\n        Receive bytes data into a writeable bytes-like object.\n        Return the number of bytes read.\n        \"\"\"\n        self._check_closed()\n        self._check_readable()\n        with memoryview(buf) as m:\n            # Get bytesize of arbitrary buffer\n            itemsize = m.itemsize\n            bytesize = itemsize * len(m)\n            if offset < 0:\n                raise ValueError(\"negative offset\")\n            elif offset > bytesize:\n                raise ValueError(\"offset too large\")\n            result = self._recv_bytes()\n            size = result.tell()\n            if bytesize < offset + size:\n                raise BufferTooShort(result.getvalue())\n            # Message can fit in dest\n            result.seek(0)\n            result.readinto(m[offset // itemsize :\n                              (offset + size) // itemsize])\n            return size\n\n    def recv(self):\n        \"\"\"Receive a (picklable) object\"\"\"\n        self._check_closed()\n        self._check_readable()\n        buf = self._recv_bytes()\n        return _ForkingPickler.loads(buf.getbuffer())\n\n    def poll(self, timeout=0.0):\n        \"\"\"Whether there is any input available to be read\"\"\"\n        self._check_closed()\n        self._check_readable()\n        return self._poll(timeout)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, exc_tb):\n        self.close()\n\n\nif _winapi:\n\n    class PipeConnection(_ConnectionBase):\n        \"\"\"\n        Connection class based on a Windows named pipe.\n        Overlapped I/O is used, so the handles must have been created\n        with FILE_FLAG_OVERLAPPED.\n        \"\"\"\n        _got_empty_message = False\n\n        def _close(self, _CloseHandle=_winapi.CloseHandle):\n            _CloseHandle(self._handle)\n\n        def _send_bytes(self, buf):\n            ov, err = _winapi.WriteFile(self._handle, buf, overlapped=True)\n            try:\n                if err == _winapi.ERROR_IO_PENDING:\n                    waitres = _winapi.WaitForMultipleObjects(\n                        [ov.event], False, INFINITE)\n                    assert waitres == WAIT_OBJECT_0\n            except:\n                ov.cancel()\n                raise\n            finally:\n                nwritten, err = ov.GetOverlappedResult(True)\n            assert err == 0\n            assert nwritten == len(buf)\n\n        def _recv_bytes(self, maxsize=None):\n            if self._got_empty_message:\n                self._got_empty_message = False\n                return io.BytesIO()\n            else:\n                bsize = 128 if maxsize is None else min(maxsize, 128)\n                try:\n                    ov, err = _winapi.ReadFile(self._handle, bsize,\n                                                overlapped=True)\n                    try:\n                        if err == _winapi.ERROR_IO_PENDING:\n                            waitres = _winapi.WaitForMultipleObjects(\n                                [ov.event], False, INFINITE)\n                            assert waitres == WAIT_OBJECT_0\n                    except:\n                        ov.cancel()\n                        raise\n                    finally:\n                        nread, err = ov.GetOverlappedResult(True)\n                        if err == 0:\n                            f = io.BytesIO()\n                            f.write(ov.getbuffer())\n                            return f\n                        elif err == _winapi.ERROR_MORE_DATA:\n                            return self._get_more_data(ov, maxsize)\n                except OSError as e:\n                    if e.winerror == _winapi.ERROR_BROKEN_PIPE:\n                        raise EOFError\n                    else:\n                        raise\n            raise RuntimeError(\"shouldn't get here; expected KeyboardInterrupt\")\n\n        def _poll(self, timeout):\n            if (self._got_empty_message or\n                        _winapi.PeekNamedPipe(self._handle)[0] != 0):\n                return True\n            return bool(wait([self], timeout))\n\n        def _get_more_data(self, ov, maxsize):\n            buf = ov.getbuffer()\n            f = io.BytesIO()\n            f.write(buf)\n            left = _winapi.PeekNamedPipe(self._handle)[1]\n            assert left > 0\n            if maxsize is not None and len(buf) + left > maxsize:\n                self._bad_message_length()\n            ov, err = _winapi.ReadFile(self._handle, left, overlapped=True)\n            rbytes, err = ov.GetOverlappedResult(True)\n            assert err == 0\n            assert rbytes == left\n            f.write(ov.getbuffer())\n            return f\n\n\nclass Connection(_ConnectionBase):\n    \"\"\"\n    Connection class based on an arbitrary file descriptor (Unix only), or\n    a socket handle (Windows).\n    \"\"\"\n\n    if _winapi:\n        def _close(self, _close=_multiprocessing.closesocket):\n            _close(self._handle)\n        _write = _multiprocessing.send\n        _read = _multiprocessing.recv\n    else:\n        def _close(self, _close=os.close):\n            _close(self._handle)\n        _write = os.write\n        _read = os.read\n\n    def _send(self, buf, write=_write):\n        remaining = len(buf)\n        while True:\n            n = write(self._handle, buf)\n            remaining -= n\n            if remaining == 0:\n                break\n            buf = buf[n:]\n\n    def _recv(self, size, read=_read):\n        buf = io.BytesIO()\n        handle = self._handle\n        remaining = size\n        while remaining > 0:\n            chunk = read(handle, remaining)\n            n = len(chunk)\n            if n == 0:\n                if remaining == size:\n                    raise EOFError\n                else:\n                    raise OSError(\"got end of file during message\")\n            buf.write(chunk)\n            remaining -= n\n        return buf\n\n    def _send_bytes(self, buf):\n        n = len(buf)\n        if n > 0x7fffffff:\n            pre_header = struct.pack(\"!i\", -1)\n            header = struct.pack(\"!Q\", n)\n            self._send(pre_header)\n            self._send(header)\n            self._send(buf)\n        else:\n            # For wire compatibility with 3.7 and lower\n            header = struct.pack(\"!i\", n)\n            if n > 16384:\n                # The payload is large so Nagle's algorithm won't be triggered\n                # and we'd better avoid the cost of concatenation.\n                self._send(header)\n                self._send(buf)\n            else:\n                # Issue #20540: concatenate before sending, to avoid delays due\n                # to Nagle's algorithm on a TCP socket.\n                # Also note we want to avoid sending a 0-length buffer separately,\n                # to avoid \"broken pipe\" errors if the other end closed the pipe.\n                self._send(header + buf)\n\n    def _recv_bytes(self, maxsize=None):\n        buf = self._recv(4)\n        size, = struct.unpack(\"!i\", buf.getvalue())\n        if size == -1:\n            buf = self._recv(8)\n            size, = struct.unpack(\"!Q\", buf.getvalue())\n        if maxsize is not None and size > maxsize:\n            return None\n        return self._recv(size)\n\n    def _poll(self, timeout):\n        r = wait([self], timeout)\n        return bool(r)\n\n\n#\n# Public functions\n#\n\nclass Listener(object):\n    '''\n    Returns a listener object.\n\n    This is a wrapper for a bound socket which is 'listening' for\n    connections, or for a Windows named pipe.\n    '''\n    def __init__(self, address=None, family=None, backlog=1, authkey=None):\n        family = family or (address and address_type(address)) \\\n                 or default_family\n        address = address or arbitrary_address(family)\n\n        _validate_family(family)\n        if family == 'AF_PIPE':\n            self._listener = PipeListener(address, backlog)\n        else:\n            self._listener = SocketListener(address, family, backlog)\n\n        if authkey is not None and not isinstance(authkey, bytes):\n            raise TypeError('authkey should be a byte string')\n\n        self._authkey = authkey\n\n    def accept(self):\n        '''\n        Accept a connection on the bound socket or named pipe of `self`.\n\n        Returns a `Connection` object.\n        '''\n        if self._listener is None:\n            raise OSError('listener is closed')\n        c = self._listener.accept()\n        if self._authkey:\n            deliver_challenge(c, self._authkey)\n            answer_challenge(c, self._authkey)\n        return c\n\n    def close(self):\n        '''\n        Close the bound socket or named pipe of `self`.\n        '''\n        listener = self._listener\n        if listener is not None:\n            self._listener = None\n            listener.close()\n\n    @property\n    def address(self):\n        return self._listener._address\n\n    @property\n    def last_accepted(self):\n        return self._listener._last_accepted\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, exc_tb):\n        self.close()\n\n\ndef Client(address, family=None, authkey=None):\n    '''\n    Returns a connection to the address of a `Listener`\n    '''\n    family = family or address_type(address)\n    _validate_family(family)\n    if family == 'AF_PIPE':\n        c = PipeClient(address)\n    else:\n        c = SocketClient(address)\n\n    if authkey is not None and not isinstance(authkey, bytes):\n        raise TypeError('authkey should be a byte string')\n\n    if authkey is not None:\n        answer_challenge(c, authkey)\n        deliver_challenge(c, authkey)\n\n    return c\n\n\nif sys.platform != 'win32':\n\n    def Pipe(duplex=True):\n        '''\n        Returns pair of connection objects at either end of a pipe\n        '''\n        if duplex:\n            s1, s2 = socket.socketpair()\n            s1.setblocking(True)\n            s2.setblocking(True)\n            c1 = Connection(s1.detach())\n            c2 = Connection(s2.detach())\n        else:\n            fd1, fd2 = os.pipe()\n            c1 = Connection(fd1, writable=False)\n            c2 = Connection(fd2, readable=False)\n\n        return c1, c2\n\nelse:\n\n    def Pipe(duplex=True):\n        '''\n        Returns pair of connection objects at either end of a pipe\n        '''\n        address = arbitrary_address('AF_PIPE')\n        if duplex:\n            openmode = _winapi.PIPE_ACCESS_DUPLEX\n            access = _winapi.GENERIC_READ | _winapi.GENERIC_WRITE\n            obsize, ibsize = BUFSIZE, BUFSIZE\n        else:\n            openmode = _winapi.PIPE_ACCESS_INBOUND\n            access = _winapi.GENERIC_WRITE\n            obsize, ibsize = 0, BUFSIZE\n\n        h1 = _winapi.CreateNamedPipe(\n            address, openmode | _winapi.FILE_FLAG_OVERLAPPED |\n            _winapi.FILE_FLAG_FIRST_PIPE_INSTANCE,\n            _winapi.PIPE_TYPE_MESSAGE | _winapi.PIPE_READMODE_MESSAGE |\n            _winapi.PIPE_WAIT,\n            1, obsize, ibsize, _winapi.NMPWAIT_WAIT_FOREVER,\n            # default security descriptor: the handle cannot be inherited\n            _winapi.NULL\n            )\n        h2 = _winapi.CreateFile(\n            address, access, 0, _winapi.NULL, _winapi.OPEN_EXISTING,\n            _winapi.FILE_FLAG_OVERLAPPED, _winapi.NULL\n            )\n        _winapi.SetNamedPipeHandleState(\n            h2, _winapi.PIPE_READMODE_MESSAGE, None, None\n            )\n\n        overlapped = _winapi.ConnectNamedPipe(h1, overlapped=True)\n        _, err = overlapped.GetOverlappedResult(True)\n        assert err == 0\n\n        c1 = PipeConnection(h1, writable=duplex)\n        c2 = PipeConnection(h2, readable=duplex)\n\n        return c1, c2\n\n#\n# Definitions for connections based on sockets\n#\n\nclass SocketListener(object):\n    '''\n    Representation of a socket which is bound to an address and listening\n    '''\n    def __init__(self, address, family, backlog=1):\n        self._socket = socket.socket(getattr(socket, family))\n        try:\n            # SO_REUSEADDR has different semantics on Windows (issue #2550).\n            if os.name == 'posix':\n                self._socket.setsockopt(socket.SOL_SOCKET,\n                                        socket.SO_REUSEADDR, 1)\n            self._socket.setblocking(True)\n            self._socket.bind(address)\n            self._socket.listen(backlog)\n            self._address = self._socket.getsockname()\n        except OSError:\n            self._socket.close()\n            raise\n        self._family = family\n        self._last_accepted = None\n\n        if family == 'AF_UNIX' and not util.is_abstract_socket_namespace(address):\n            # Linux abstract socket namespaces do not need to be explicitly unlinked\n            self._unlink = util.Finalize(\n                self, os.unlink, args=(address,), exitpriority=0\n                )\n        else:\n            self._unlink = None\n\n    def accept(self):\n        s, self._last_accepted = self._socket.accept()\n        s.setblocking(True)\n        return Connection(s.detach())\n\n    def close(self):\n        try:\n            self._socket.close()\n        finally:\n            unlink = self._unlink\n            if unlink is not None:\n                self._unlink = None\n                unlink()\n\n\ndef SocketClient(address):\n    '''\n    Return a connection object connected to the socket given by `address`\n    '''\n    family = address_type(address)\n    with socket.socket( getattr(socket, family) ) as s:\n        s.setblocking(True)\n        s.connect(address)\n        return Connection(s.detach())\n\n#\n# Definitions for connections based on named pipes\n#\n\nif sys.platform == 'win32':\n\n    class PipeListener(object):\n        '''\n        Representation of a named pipe\n        '''\n        def __init__(self, address, backlog=None):\n            self._address = address\n            self._handle_queue = [self._new_handle(first=True)]\n\n            self._last_accepted = None\n            util.sub_debug('listener created with address=%r', self._address)\n            self.close = util.Finalize(\n                self, PipeListener._finalize_pipe_listener,\n                args=(self._handle_queue, self._address), exitpriority=0\n                )\n\n        def _new_handle(self, first=False):\n            flags = _winapi.PIPE_ACCESS_DUPLEX | _winapi.FILE_FLAG_OVERLAPPED\n            if first:\n                flags |= _winapi.FILE_FLAG_FIRST_PIPE_INSTANCE\n            return _winapi.CreateNamedPipe(\n                self._address, flags,\n                _winapi.PIPE_TYPE_MESSAGE | _winapi.PIPE_READMODE_MESSAGE |\n                _winapi.PIPE_WAIT,\n                _winapi.PIPE_UNLIMITED_INSTANCES, BUFSIZE, BUFSIZE,\n                _winapi.NMPWAIT_WAIT_FOREVER, _winapi.NULL\n                )\n\n        def accept(self):\n            self._handle_queue.append(self._new_handle())\n            handle = self._handle_queue.pop(0)\n            try:\n                ov = _winapi.ConnectNamedPipe(handle, overlapped=True)\n            except OSError as e:\n                if e.winerror != _winapi.ERROR_NO_DATA:\n                    raise\n                # ERROR_NO_DATA can occur if a client has already connected,\n                # written data and then disconnected -- see Issue 14725.\n            else:\n                try:\n                    res = _winapi.WaitForMultipleObjects(\n                        [ov.event], False, INFINITE)\n                except:\n                    ov.cancel()\n                    _winapi.CloseHandle(handle)\n                    raise\n                finally:\n                    _, err = ov.GetOverlappedResult(True)\n                    assert err == 0\n            return PipeConnection(handle)\n\n        @staticmethod\n        def _finalize_pipe_listener(queue, address):\n            util.sub_debug('closing listener with address=%r', address)\n            for handle in queue:\n                _winapi.CloseHandle(handle)\n\n    def PipeClient(address):\n        '''\n        Return a connection object connected to the pipe given by `address`\n        '''\n        t = _init_timeout()\n        while 1:\n            try:\n                _winapi.WaitNamedPipe(address, 1000)\n                h = _winapi.CreateFile(\n                    address, _winapi.GENERIC_READ | _winapi.GENERIC_WRITE,\n                    0, _winapi.NULL, _winapi.OPEN_EXISTING,\n                    _winapi.FILE_FLAG_OVERLAPPED, _winapi.NULL\n                    )\n            except OSError as e:\n                if e.winerror not in (_winapi.ERROR_SEM_TIMEOUT,\n                                      _winapi.ERROR_PIPE_BUSY) or _check_timeout(t):\n                    raise\n            else:\n                break\n        else:\n            raise\n\n        _winapi.SetNamedPipeHandleState(\n            h, _winapi.PIPE_READMODE_MESSAGE, None, None\n            )\n        return PipeConnection(h)\n\n#\n# Authentication stuff\n#\n\nMESSAGE_LENGTH = 20\n\nCHALLENGE = b'#CHALLENGE#'\nWELCOME = b'#WELCOME#'\nFAILURE = b'#FAILURE#'\n\ndef deliver_challenge(connection, authkey):\n    import hmac\n    if not isinstance(authkey, bytes):\n        raise ValueError(\n            \"Authkey must be bytes, not {0!s}\".format(type(authkey)))\n    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n        connection.send_bytes(WELCOME)\n    else:\n        connection.send_bytes(FAILURE)\n        raise AuthenticationError('digest received was wrong')\n\ndef answer_challenge(connection, authkey):\n    import hmac\n    if not isinstance(authkey, bytes):\n        raise ValueError(\n            \"Authkey must be bytes, not {0!s}\".format(type(authkey)))\n    message = connection.recv_bytes(256)         # reject large message\n    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n    if response != WELCOME:\n        raise AuthenticationError('digest sent was rejected')\n\n#\n# Support for using xmlrpclib for serialization\n#\n\nclass ConnectionWrapper(object):\n    def __init__(self, conn, dumps, loads):\n        self._conn = conn\n        self._dumps = dumps\n        self._loads = loads\n        for attr in ('fileno', 'close', 'poll', 'recv_bytes', 'send_bytes'):\n            obj = getattr(conn, attr)\n            setattr(self, attr, obj)\n    def send(self, obj):\n        s = self._dumps(obj)\n        self._conn.send_bytes(s)\n    def recv(self):\n        s = self._conn.recv_bytes()\n        return self._loads(s)\n\ndef _xml_dumps(obj):\n    return xmlrpclib.dumps((obj,), None, None, None, 1).encode('utf-8')\n\ndef _xml_loads(s):\n    (obj,), method = xmlrpclib.loads(s.decode('utf-8'))\n    return obj\n\nclass XmlListener(Listener):\n    def accept(self):\n        global xmlrpclib\n        import xmlrpc.client as xmlrpclib\n        obj = Listener.accept(self)\n        return ConnectionWrapper(obj, _xml_dumps, _xml_loads)\n\ndef XmlClient(*args, **kwds):\n    global xmlrpclib\n    import xmlrpc.client as xmlrpclib\n    return ConnectionWrapper(Client(*args, **kwds), _xml_dumps, _xml_loads)\n\n#\n# Wait\n#\n\nif sys.platform == 'win32':\n\n    def _exhaustive_wait(handles, timeout):\n        # Return ALL handles which are currently signalled.  (Only\n        # returning the first signalled might create starvation issues.)\n        L = list(handles)\n        ready = []\n        while L:\n            res = _winapi.WaitForMultipleObjects(L, False, timeout)\n            if res == WAIT_TIMEOUT:\n                break\n            elif WAIT_OBJECT_0 <= res < WAIT_OBJECT_0 + len(L):\n                res -= WAIT_OBJECT_0\n            elif WAIT_ABANDONED_0 <= res < WAIT_ABANDONED_0 + len(L):\n                res -= WAIT_ABANDONED_0\n            else:\n                raise RuntimeError('Should not get here')\n            ready.append(L[res])\n            L = L[res+1:]\n            timeout = 0\n        return ready\n\n    _ready_errors = {_winapi.ERROR_BROKEN_PIPE, _winapi.ERROR_NETNAME_DELETED}\n\n    def wait(object_list, timeout=None):\n        '''\n        Wait till an object in object_list is ready/readable.\n\n        Returns list of those objects in object_list which are ready/readable.\n        '''\n        if timeout is None:\n            timeout = INFINITE\n        elif timeout < 0:\n            timeout = 0\n        else:\n            timeout = int(timeout * 1000 + 0.5)\n\n        object_list = list(object_list)\n        waithandle_to_obj = {}\n        ov_list = []\n        ready_objects = set()\n        ready_handles = set()\n\n        try:\n            for o in object_list:\n                try:\n                    fileno = getattr(o, 'fileno')\n                except AttributeError:\n                    waithandle_to_obj[o.__index__()] = o\n                else:\n                    # start an overlapped read of length zero\n                    try:\n                        ov, err = _winapi.ReadFile(fileno(), 0, True)\n                    except OSError as e:\n                        ov, err = None, e.winerror\n                        if err not in _ready_errors:\n                            raise\n                    if err == _winapi.ERROR_IO_PENDING:\n                        ov_list.append(ov)\n                        waithandle_to_obj[ov.event] = o\n                    else:\n                        # If o.fileno() is an overlapped pipe handle and\n                        # err == 0 then there is a zero length message\n                        # in the pipe, but it HAS NOT been consumed...\n                        if ov and sys.getwindowsversion()[:2] >= (6, 2):\n                            # ... except on Windows 8 and later, where\n                            # the message HAS been consumed.\n                            try:\n                                _, err = ov.GetOverlappedResult(False)\n                            except OSError as e:\n                                err = e.winerror\n                            if not err and hasattr(o, '_got_empty_message'):\n                                o._got_empty_message = True\n                        ready_objects.add(o)\n                        timeout = 0\n\n            ready_handles = _exhaustive_wait(waithandle_to_obj.keys(), timeout)\n        finally:\n            # request that overlapped reads stop\n            for ov in ov_list:\n                ov.cancel()\n\n            # wait for all overlapped reads to stop\n            for ov in ov_list:\n                try:\n                    _, err = ov.GetOverlappedResult(True)\n                except OSError as e:\n                    err = e.winerror\n                    if err not in _ready_errors:\n                        raise\n                if err != _winapi.ERROR_OPERATION_ABORTED:\n                    o = waithandle_to_obj[ov.event]\n                    ready_objects.add(o)\n                    if err == 0:\n                        # If o.fileno() is an overlapped pipe handle then\n                        # a zero length message HAS been consumed.\n                        if hasattr(o, '_got_empty_message'):\n                            o._got_empty_message = True\n\n        ready_objects.update(waithandle_to_obj[h] for h in ready_handles)\n        return [o for o in object_list if o in ready_objects]\n\nelse:\n\n    import selectors\n\n    # poll/select have the advantage of not requiring any extra file\n    # descriptor, contrarily to epoll/kqueue (also, they require a single\n    # syscall).\n    if hasattr(selectors, 'PollSelector'):\n        _WaitSelector = selectors.PollSelector\n    else:\n        _WaitSelector = selectors.SelectSelector\n\n    def wait(object_list, timeout=None):\n        '''\n        Wait till an object in object_list is ready/readable.\n\n        Returns list of those objects in object_list which are ready/readable.\n        '''\n        with _WaitSelector() as selector:\n            for obj in object_list:\n                selector.register(obj, selectors.EVENT_READ)\n\n            if timeout is not None:\n                deadline = time.monotonic() + timeout\n\n            while True:\n                ready = selector.select(timeout)\n                if ready:\n                    return [key.fileobj for (key, events) in ready]\n                else:\n                    if timeout is not None:\n                        timeout = deadline - time.monotonic()\n                        if timeout < 0:\n                            return ready\n\n#\n# Make connection and socket objects sharable if possible\n#\n\nif sys.platform == 'win32':\n    def reduce_connection(conn):\n        handle = conn.fileno()\n        with socket.fromfd(handle, socket.AF_INET, socket.SOCK_STREAM) as s:\n            from . import resource_sharer\n            ds = resource_sharer.DupSocket(s)\n            return rebuild_connection, (ds, conn.readable, conn.writable)\n    def rebuild_connection(ds, readable, writable):\n        sock = ds.detach()\n        return Connection(sock.detach(), readable, writable)\n    reduction.register(Connection, reduce_connection)\n\n    def reduce_pipe_connection(conn):\n        access = ((_winapi.FILE_GENERIC_READ if conn.readable else 0) |\n                  (_winapi.FILE_GENERIC_WRITE if conn.writable else 0))\n        dh = reduction.DupHandle(conn.fileno(), access)\n        return rebuild_pipe_connection, (dh, conn.readable, conn.writable)\n    def rebuild_pipe_connection(dh, readable, writable):\n        handle = dh.detach()\n        return PipeConnection(handle, readable, writable)\n    reduction.register(PipeConnection, reduce_pipe_connection)\n\nelse:\n    def reduce_connection(conn):\n        df = reduction.DupFd(conn.fileno())\n        return rebuild_connection, (df, conn.readable, conn.writable)\n    def rebuild_connection(df, readable, writable):\n        fd = df.detach()\n        return Connection(fd, readable, writable)\n    reduction.register(Connection, reduce_connection)\n", 973], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py": ["#\n# Module which deals with pickling of objects.\n#\n# multiprocessing/reduction.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\nfrom abc import ABCMeta\nimport copyreg\nimport functools\nimport io\nimport os\nimport pickle\nimport socket\nimport sys\n\nfrom . import context\n\n__all__ = ['send_handle', 'recv_handle', 'ForkingPickler', 'register', 'dump']\n\n\nHAVE_SEND_HANDLE = (sys.platform == 'win32' or\n                    (hasattr(socket, 'CMSG_LEN') and\n                     hasattr(socket, 'SCM_RIGHTS') and\n                     hasattr(socket.socket, 'sendmsg')))\n\n#\n# Pickler subclass\n#\n\nclass ForkingPickler(pickle.Pickler):\n    '''Pickler subclass used by multiprocessing.'''\n    _extra_reducers = {}\n    _copyreg_dispatch_table = copyreg.dispatch_table\n\n    def __init__(self, *args):\n        super().__init__(*args)\n        self.dispatch_table = self._copyreg_dispatch_table.copy()\n        self.dispatch_table.update(self._extra_reducers)\n\n    @classmethod\n    def register(cls, type, reduce):\n        '''Register a reduce function for a type.'''\n        cls._extra_reducers[type] = reduce\n\n    @classmethod\n    def dumps(cls, obj, protocol=None):\n        buf = io.BytesIO()\n        cls(buf, protocol).dump(obj)\n        return buf.getbuffer()\n\n    loads = pickle.loads\n\nregister = ForkingPickler.register\n\ndef dump(obj, file, protocol=None):\n    '''Replacement for pickle.dump() using ForkingPickler.'''\n    ForkingPickler(file, protocol).dump(obj)\n\n#\n# Platform specific definitions\n#\n\nif sys.platform == 'win32':\n    # Windows\n    __all__ += ['DupHandle', 'duplicate', 'steal_handle']\n    import _winapi\n\n    def duplicate(handle, target_process=None, inheritable=False,\n                  *, source_process=None):\n        '''Duplicate a handle.  (target_process is a handle not a pid!)'''\n        current_process = _winapi.GetCurrentProcess()\n        if source_process is None:\n            source_process = current_process\n        if target_process is None:\n            target_process = current_process\n        return _winapi.DuplicateHandle(\n            source_process, handle, target_process,\n            0, inheritable, _winapi.DUPLICATE_SAME_ACCESS)\n\n    def steal_handle(source_pid, handle):\n        '''Steal a handle from process identified by source_pid.'''\n        source_process_handle = _winapi.OpenProcess(\n            _winapi.PROCESS_DUP_HANDLE, False, source_pid)\n        try:\n            return _winapi.DuplicateHandle(\n                source_process_handle, handle,\n                _winapi.GetCurrentProcess(), 0, False,\n                _winapi.DUPLICATE_SAME_ACCESS | _winapi.DUPLICATE_CLOSE_SOURCE)\n        finally:\n            _winapi.CloseHandle(source_process_handle)\n\n    def send_handle(conn, handle, destination_pid):\n        '''Send a handle over a local connection.'''\n        dh = DupHandle(handle, _winapi.DUPLICATE_SAME_ACCESS, destination_pid)\n        conn.send(dh)\n\n    def recv_handle(conn):\n        '''Receive a handle over a local connection.'''\n        return conn.recv().detach()\n\n    class DupHandle(object):\n        '''Picklable wrapper for a handle.'''\n        def __init__(self, handle, access, pid=None):\n            if pid is None:\n                # We just duplicate the handle in the current process and\n                # let the receiving process steal the handle.\n                pid = os.getpid()\n            proc = _winapi.OpenProcess(_winapi.PROCESS_DUP_HANDLE, False, pid)\n            try:\n                self._handle = _winapi.DuplicateHandle(\n                    _winapi.GetCurrentProcess(),\n                    handle, proc, access, False, 0)\n            finally:\n                _winapi.CloseHandle(proc)\n            self._access = access\n            self._pid = pid\n\n        def detach(self):\n            '''Get the handle.  This should only be called once.'''\n            # retrieve handle from process which currently owns it\n            if self._pid == os.getpid():\n                # The handle has already been duplicated for this process.\n                return self._handle\n            # We must steal the handle from the process whose pid is self._pid.\n            proc = _winapi.OpenProcess(_winapi.PROCESS_DUP_HANDLE, False,\n                                       self._pid)\n            try:\n                return _winapi.DuplicateHandle(\n                    proc, self._handle, _winapi.GetCurrentProcess(),\n                    self._access, False, _winapi.DUPLICATE_CLOSE_SOURCE)\n            finally:\n                _winapi.CloseHandle(proc)\n\nelse:\n    # Unix\n    __all__ += ['DupFd', 'sendfds', 'recvfds']\n    import array\n\n    # On MacOSX we should acknowledge receipt of fds -- see Issue14669\n    ACKNOWLEDGE = sys.platform == 'darwin'\n\n    def sendfds(sock, fds):\n        '''Send an array of fds over an AF_UNIX socket.'''\n        fds = array.array('i', fds)\n        msg = bytes([len(fds) % 256])\n        sock.sendmsg([msg], [(socket.SOL_SOCKET, socket.SCM_RIGHTS, fds)])\n        if ACKNOWLEDGE and sock.recv(1) != b'A':\n            raise RuntimeError('did not receive acknowledgement of fd')\n\n    def recvfds(sock, size):\n        '''Receive an array of fds over an AF_UNIX socket.'''\n        a = array.array('i')\n        bytes_size = a.itemsize * size\n        msg, ancdata, flags, addr = sock.recvmsg(1, socket.CMSG_SPACE(bytes_size))\n        if not msg and not ancdata:\n            raise EOFError\n        try:\n            if ACKNOWLEDGE:\n                sock.send(b'A')\n            if len(ancdata) != 1:\n                raise RuntimeError('received %d items of ancdata' %\n                                   len(ancdata))\n            cmsg_level, cmsg_type, cmsg_data = ancdata[0]\n            if (cmsg_level == socket.SOL_SOCKET and\n                cmsg_type == socket.SCM_RIGHTS):\n                if len(cmsg_data) % a.itemsize != 0:\n                    raise ValueError\n                a.frombytes(cmsg_data)\n                if len(a) % 256 != msg[0]:\n                    raise AssertionError(\n                        \"Len is {0:n} but msg[0] is {1!r}\".format(\n                            len(a), msg[0]))\n                return list(a)\n        except (ValueError, IndexError):\n            pass\n        raise RuntimeError('Invalid data received')\n\n    def send_handle(conn, handle, destination_pid):\n        '''Send a handle over a local connection.'''\n        with socket.fromfd(conn.fileno(), socket.AF_UNIX, socket.SOCK_STREAM) as s:\n            sendfds(s, [handle])\n\n    def recv_handle(conn):\n        '''Receive a handle over a local connection.'''\n        with socket.fromfd(conn.fileno(), socket.AF_UNIX, socket.SOCK_STREAM) as s:\n            return recvfds(s, 1)[0]\n\n    def DupFd(fd):\n        '''Return a wrapper for an fd.'''\n        popen_obj = context.get_spawning_popen()\n        if popen_obj is not None:\n            return popen_obj.DupFd(popen_obj.duplicate_for_child(fd))\n        elif HAVE_SEND_HANDLE:\n            from . import resource_sharer\n            return resource_sharer.DupFd(fd)\n        else:\n            raise ValueError('SCM_RIGHTS appears not to be available')\n\n#\n# Try making some callable types picklable\n#\n\ndef _reduce_method(m):\n    if m.__self__ is None:\n        return getattr, (m.__class__, m.__func__.__name__)\n    else:\n        return getattr, (m.__self__, m.__func__.__name__)\nclass _C:\n    def f(self):\n        pass\nregister(type(_C().f), _reduce_method)\n\n\ndef _reduce_method_descriptor(m):\n    return getattr, (m.__objclass__, m.__name__)\nregister(type(list.append), _reduce_method_descriptor)\nregister(type(int.__add__), _reduce_method_descriptor)\n\n\ndef _reduce_partial(p):\n    return _rebuild_partial, (p.func, p.args, p.keywords or {})\ndef _rebuild_partial(func, args, keywords):\n    return functools.partial(func, *args, **keywords)\nregister(functools.partial, _reduce_partial)\n\n#\n# Make sockets picklable\n#\n\nif sys.platform == 'win32':\n    def _reduce_socket(s):\n        from .resource_sharer import DupSocket\n        return _rebuild_socket, (DupSocket(s),)\n    def _rebuild_socket(ds):\n        return ds.detach()\n    register(socket.socket, _reduce_socket)\n\nelse:\n    def _reduce_socket(s):\n        df = DupFd(s.fileno())\n        return _rebuild_socket, (df, s.family, s.type, s.proto)\n    def _rebuild_socket(df, family, type, proto):\n        fd = df.detach()\n        return socket.socket(family, type, proto, fileno=fd)\n    register(socket.socket, _reduce_socket)\n\n\nclass AbstractReducer(metaclass=ABCMeta):\n    '''Abstract base class for use in implementing a Reduction class\n    suitable for use in replacing the standard reduction mechanism\n    used in multiprocessing.'''\n    ForkingPickler = ForkingPickler\n    register = register\n    dump = dump\n    send_handle = send_handle\n    recv_handle = recv_handle\n\n    if sys.platform == 'win32':\n        steal_handle = steal_handle\n        duplicate = duplicate\n        DupHandle = DupHandle\n    else:\n        sendfds = sendfds\n        recvfds = recvfds\n        DupFd = DupFd\n\n    _reduce_method = _reduce_method\n    _reduce_method_descriptor = _reduce_method_descriptor\n    _rebuild_partial = _rebuild_partial\n    _reduce_socket = _reduce_socket\n    _rebuild_socket = _rebuild_socket\n\n    def __init__(self, *args):\n        register(type(_C().f), _reduce_method)\n        register(type(list.append), _reduce_method_descriptor)\n        register(type(int.__add__), _reduce_method_descriptor)\n        register(functools.partial, _reduce_partial)\n        register(socket.socket, _reduce_socket)\n", 281], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py": ["#\n# Module implementing queues\n#\n# multiprocessing/queues.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\n__all__ = ['Queue', 'SimpleQueue', 'JoinableQueue']\n\nimport sys\nimport os\nimport threading\nimport collections\nimport time\nimport weakref\nimport errno\n\nfrom queue import Empty, Full\n\nimport _multiprocessing\n\nfrom . import connection\nfrom . import context\n_ForkingPickler = context.reduction.ForkingPickler\n\nfrom .util import debug, info, Finalize, register_after_fork, is_exiting\n\n#\n# Queue type using a pipe, buffer and thread\n#\n\nclass Queue(object):\n\n    def __init__(self, maxsize=0, *, ctx):\n        if maxsize <= 0:\n            # Can raise ImportError (see issues #3770 and #23400)\n            from .synchronize import SEM_VALUE_MAX as maxsize\n        self._maxsize = maxsize\n        self._reader, self._writer = connection.Pipe(duplex=False)\n        self._rlock = ctx.Lock()\n        self._opid = os.getpid()\n        if sys.platform == 'win32':\n            self._wlock = None\n        else:\n            self._wlock = ctx.Lock()\n        self._sem = ctx.BoundedSemaphore(maxsize)\n        # For use by concurrent.futures\n        self._ignore_epipe = False\n\n        self._after_fork()\n\n        if sys.platform != 'win32':\n            register_after_fork(self, Queue._after_fork)\n\n    def __getstate__(self):\n        context.assert_spawning(self)\n        return (self._ignore_epipe, self._maxsize, self._reader, self._writer,\n                self._rlock, self._wlock, self._sem, self._opid)\n\n    def __setstate__(self, state):\n        (self._ignore_epipe, self._maxsize, self._reader, self._writer,\n         self._rlock, self._wlock, self._sem, self._opid) = state\n        self._after_fork()\n\n    def _after_fork(self):\n        debug('Queue._after_fork()')\n        self._notempty = threading.Condition(threading.Lock())\n        self._buffer = collections.deque()\n        self._thread = None\n        self._jointhread = None\n        self._joincancelled = False\n        self._closed = False\n        self._close = None\n        self._send_bytes = self._writer.send_bytes\n        self._recv_bytes = self._reader.recv_bytes\n        self._poll = self._reader.poll\n\n    def put(self, obj, block=True, timeout=None):\n        if self._closed:\n            raise ValueError(f\"Queue {self!r} is closed\")\n        if not self._sem.acquire(block, timeout):\n            raise Full\n\n        with self._notempty:\n            if self._thread is None:\n                self._start_thread()\n            self._buffer.append(obj)\n            self._notempty.notify()\n\n    def get(self, block=True, timeout=None):\n        if self._closed:\n            raise ValueError(f\"Queue {self!r} is closed\")\n        if block and timeout is None:\n            with self._rlock:\n                res = self._recv_bytes()\n            self._sem.release()\n        else:\n            if block:\n                deadline = time.monotonic() + timeout\n            if not self._rlock.acquire(block, timeout):\n                raise Empty\n            try:\n                if block:\n                    timeout = deadline - time.monotonic()\n                    if not self._poll(timeout):\n                        raise Empty\n                elif not self._poll():\n                    raise Empty\n                res = self._recv_bytes()\n                self._sem.release()\n            finally:\n                self._rlock.release()\n        # unserialize the data after having released the lock\n        return _ForkingPickler.loads(res)\n\n    def qsize(self):\n        # Raises NotImplementedError on Mac OSX because of broken sem_getvalue()\n        return self._maxsize - self._sem._semlock._get_value()\n\n    def empty(self):\n        return not self._poll()\n\n    def full(self):\n        return self._sem._semlock._is_zero()\n\n    def get_nowait(self):\n        return self.get(False)\n\n    def put_nowait(self, obj):\n        return self.put(obj, False)\n\n    def close(self):\n        self._closed = True\n        try:\n            self._reader.close()\n        finally:\n            close = self._close\n            if close:\n                self._close = None\n                close()\n\n    def join_thread(self):\n        debug('Queue.join_thread()')\n        assert self._closed, \"Queue {0!r} not closed\".format(self)\n        if self._jointhread:\n            self._jointhread()\n\n    def cancel_join_thread(self):\n        debug('Queue.cancel_join_thread()')\n        self._joincancelled = True\n        try:\n            self._jointhread.cancel()\n        except AttributeError:\n            pass\n\n    def _start_thread(self):\n        debug('Queue._start_thread()')\n\n        # Start thread which transfers data from buffer to pipe\n        self._buffer.clear()\n        self._thread = threading.Thread(\n            target=Queue._feed,\n            args=(self._buffer, self._notempty, self._send_bytes,\n                  self._wlock, self._writer.close, self._ignore_epipe,\n                  self._on_queue_feeder_error, self._sem),\n            name='QueueFeederThread'\n        )\n        self._thread.daemon = True\n\n        debug('doing self._thread.start()')\n        self._thread.start()\n        debug('... done self._thread.start()')\n\n        if not self._joincancelled:\n            self._jointhread = Finalize(\n                self._thread, Queue._finalize_join,\n                [weakref.ref(self._thread)],\n                exitpriority=-5\n                )\n\n        # Send sentinel to the thread queue object when garbage collected\n        self._close = Finalize(\n            self, Queue._finalize_close,\n            [self._buffer, self._notempty],\n            exitpriority=10\n            )\n\n    @staticmethod\n    def _finalize_join(twr):\n        debug('joining queue thread')\n        thread = twr()\n        if thread is not None:\n            thread.join()\n            debug('... queue thread joined')\n        else:\n            debug('... queue thread already dead')\n\n    @staticmethod\n    def _finalize_close(buffer, notempty):\n        debug('telling queue thread to quit')\n        with notempty:\n            buffer.append(_sentinel)\n            notempty.notify()\n\n    @staticmethod\n    def _feed(buffer, notempty, send_bytes, writelock, close, ignore_epipe,\n              onerror, queue_sem):\n        debug('starting thread to feed data to pipe')\n        nacquire = notempty.acquire\n        nrelease = notempty.release\n        nwait = notempty.wait\n        bpopleft = buffer.popleft\n        sentinel = _sentinel\n        if sys.platform != 'win32':\n            wacquire = writelock.acquire\n            wrelease = writelock.release\n        else:\n            wacquire = None\n\n        while 1:\n            try:\n                nacquire()\n                try:\n                    if not buffer:\n                        nwait()\n                finally:\n                    nrelease()\n                try:\n                    while 1:\n                        obj = bpopleft()\n                        if obj is sentinel:\n                            debug('feeder thread got sentinel -- exiting')\n                            close()\n                            return\n\n                        # serialize the data before acquiring the lock\n                        obj = _ForkingPickler.dumps(obj)\n                        if wacquire is None:\n                            send_bytes(obj)\n                        else:\n                            wacquire()\n                            try:\n                                send_bytes(obj)\n                            finally:\n                                wrelease()\n                except IndexError:\n                    pass\n            except Exception as e:\n                if ignore_epipe and getattr(e, 'errno', 0) == errno.EPIPE:\n                    return\n                # Since this runs in a daemon thread the resources it uses\n                # may be become unusable while the process is cleaning up.\n                # We ignore errors which happen after the process has\n                # started to cleanup.\n                if is_exiting():\n                    info('error in queue thread: %s', e)\n                    return\n                else:\n                    # Since the object has not been sent in the queue, we need\n                    # to decrease the size of the queue. The error acts as\n                    # if the object had been silently removed from the queue\n                    # and this step is necessary to have a properly working\n                    # queue.\n                    queue_sem.release()\n                    onerror(e, obj)\n\n    @staticmethod\n    def _on_queue_feeder_error(e, obj):\n        \"\"\"\n        Private API hook called when feeding data in the background thread\n        raises an exception.  For overriding by concurrent.futures.\n        \"\"\"\n        import traceback\n        traceback.print_exc()\n\n\n_sentinel = object()\n\n#\n# A queue type which also supports join() and task_done() methods\n#\n# Note that if you do not call task_done() for each finished task then\n# eventually the counter's semaphore may overflow causing Bad Things\n# to happen.\n#\n\nclass JoinableQueue(Queue):\n\n    def __init__(self, maxsize=0, *, ctx):\n        Queue.__init__(self, maxsize, ctx=ctx)\n        self._unfinished_tasks = ctx.Semaphore(0)\n        self._cond = ctx.Condition()\n\n    def __getstate__(self):\n        return Queue.__getstate__(self) + (self._cond, self._unfinished_tasks)\n\n    def __setstate__(self, state):\n        Queue.__setstate__(self, state[:-2])\n        self._cond, self._unfinished_tasks = state[-2:]\n\n    def put(self, obj, block=True, timeout=None):\n        if self._closed:\n            raise ValueError(f\"Queue {self!r} is closed\")\n        if not self._sem.acquire(block, timeout):\n            raise Full\n\n        with self._notempty, self._cond:\n            if self._thread is None:\n                self._start_thread()\n            self._buffer.append(obj)\n            self._unfinished_tasks.release()\n            self._notempty.notify()\n\n    def task_done(self):\n        with self._cond:\n            if not self._unfinished_tasks.acquire(False):\n                raise ValueError('task_done() called too many times')\n            if self._unfinished_tasks._semlock._is_zero():\n                self._cond.notify_all()\n\n    def join(self):\n        with self._cond:\n            if not self._unfinished_tasks._semlock._is_zero():\n                self._cond.wait()\n\n#\n# Simplified Queue type -- really just a locked pipe\n#\n\nclass SimpleQueue(object):\n\n    def __init__(self, *, ctx):\n        self._reader, self._writer = connection.Pipe(duplex=False)\n        self._rlock = ctx.Lock()\n        self._poll = self._reader.poll\n        if sys.platform == 'win32':\n            self._wlock = None\n        else:\n            self._wlock = ctx.Lock()\n\n    def empty(self):\n        return not self._poll()\n\n    def __getstate__(self):\n        context.assert_spawning(self)\n        return (self._reader, self._writer, self._rlock, self._wlock)\n\n    def __setstate__(self, state):\n        (self._reader, self._writer, self._rlock, self._wlock) = state\n        self._poll = self._reader.poll\n\n    def get(self):\n        with self._rlock:\n            res = self._reader.recv_bytes()\n        # unserialize the data after having released the lock\n        return _ForkingPickler.loads(res)\n\n    def put(self, obj):\n        # serialize the data before acquiring the lock\n        obj = _ForkingPickler.dumps(obj)\n        if self._wlock is None:\n            # writes to a message oriented win32 pipe are atomic\n            self._writer.send_bytes(obj)\n        else:\n            with self._wlock:\n                self._writer.send_bytes(obj)\n", 368], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py": ["import os\nimport sys\nimport threading\n\nfrom . import process\nfrom . import reduction\n\n__all__ = ()\n\n#\n# Exceptions\n#\n\nclass ProcessError(Exception):\n    pass\n\nclass BufferTooShort(ProcessError):\n    pass\n\nclass TimeoutError(ProcessError):\n    pass\n\nclass AuthenticationError(ProcessError):\n    pass\n\n#\n# Base type for contexts. Bound methods of an instance of this type are included in __all__ of __init__.py\n#\n\nclass BaseContext(object):\n\n    ProcessError = ProcessError\n    BufferTooShort = BufferTooShort\n    TimeoutError = TimeoutError\n    AuthenticationError = AuthenticationError\n\n    current_process = staticmethod(process.current_process)\n    parent_process = staticmethod(process.parent_process)\n    active_children = staticmethod(process.active_children)\n\n    def cpu_count(self):\n        '''Returns the number of CPUs in the system'''\n        num = os.cpu_count()\n        if num is None:\n            raise NotImplementedError('cannot determine number of cpus')\n        else:\n            return num\n\n    def Manager(self):\n        '''Returns a manager associated with a running server process\n\n        The managers methods such as `Lock()`, `Condition()` and `Queue()`\n        can be used to create shared objects.\n        '''\n        from .managers import SyncManager\n        m = SyncManager(ctx=self.get_context())\n        m.start()\n        return m\n\n    def Pipe(self, duplex=True):\n        '''Returns two connection object connected by a pipe'''\n        from .connection import Pipe\n        return Pipe(duplex)\n\n    def Lock(self):\n        '''Returns a non-recursive lock object'''\n        from .synchronize import Lock\n        return Lock(ctx=self.get_context())\n\n    def RLock(self):\n        '''Returns a recursive lock object'''\n        from .synchronize import RLock\n        return RLock(ctx=self.get_context())\n\n    def Condition(self, lock=None):\n        '''Returns a condition object'''\n        from .synchronize import Condition\n        return Condition(lock, ctx=self.get_context())\n\n    def Semaphore(self, value=1):\n        '''Returns a semaphore object'''\n        from .synchronize import Semaphore\n        return Semaphore(value, ctx=self.get_context())\n\n    def BoundedSemaphore(self, value=1):\n        '''Returns a bounded semaphore object'''\n        from .synchronize import BoundedSemaphore\n        return BoundedSemaphore(value, ctx=self.get_context())\n\n    def Event(self):\n        '''Returns an event object'''\n        from .synchronize import Event\n        return Event(ctx=self.get_context())\n\n    def Barrier(self, parties, action=None, timeout=None):\n        '''Returns a barrier object'''\n        from .synchronize import Barrier\n        return Barrier(parties, action, timeout, ctx=self.get_context())\n\n    def Queue(self, maxsize=0):\n        '''Returns a queue object'''\n        from .queues import Queue\n        return Queue(maxsize, ctx=self.get_context())\n\n    def JoinableQueue(self, maxsize=0):\n        '''Returns a queue object'''\n        from .queues import JoinableQueue\n        return JoinableQueue(maxsize, ctx=self.get_context())\n\n    def SimpleQueue(self):\n        '''Returns a queue object'''\n        from .queues import SimpleQueue\n        return SimpleQueue(ctx=self.get_context())\n\n    def Pool(self, processes=None, initializer=None, initargs=(),\n             maxtasksperchild=None):\n        '''Returns a process pool object'''\n        from .pool import Pool\n        return Pool(processes, initializer, initargs, maxtasksperchild,\n                    context=self.get_context())\n\n    def RawValue(self, typecode_or_type, *args):\n        '''Returns a shared object'''\n        from .sharedctypes import RawValue\n        return RawValue(typecode_or_type, *args)\n\n    def RawArray(self, typecode_or_type, size_or_initializer):\n        '''Returns a shared array'''\n        from .sharedctypes import RawArray\n        return RawArray(typecode_or_type, size_or_initializer)\n\n    def Value(self, typecode_or_type, *args, lock=True):\n        '''Returns a synchronized shared object'''\n        from .sharedctypes import Value\n        return Value(typecode_or_type, *args, lock=lock,\n                     ctx=self.get_context())\n\n    def Array(self, typecode_or_type, size_or_initializer, *, lock=True):\n        '''Returns a synchronized shared array'''\n        from .sharedctypes import Array\n        return Array(typecode_or_type, size_or_initializer, lock=lock,\n                     ctx=self.get_context())\n\n    def freeze_support(self):\n        '''Check whether this is a fake forked process in a frozen executable.\n        If so then run code specified by commandline and exit.\n        '''\n        if sys.platform == 'win32' and getattr(sys, 'frozen', False):\n            from .spawn import freeze_support\n            freeze_support()\n\n    def get_logger(self):\n        '''Return package logger -- if it does not already exist then\n        it is created.\n        '''\n        from .util import get_logger\n        return get_logger()\n\n    def log_to_stderr(self, level=None):\n        '''Turn on logging and add a handler which prints to stderr'''\n        from .util import log_to_stderr\n        return log_to_stderr(level)\n\n    def allow_connection_pickling(self):\n        '''Install support for sending connections and sockets\n        between processes\n        '''\n        # This is undocumented.  In previous versions of multiprocessing\n        # its only effect was to make socket objects inheritable on Windows.\n        from . import connection\n\n    def set_executable(self, executable):\n        '''Sets the path to a python.exe or pythonw.exe binary used to run\n        child processes instead of sys.executable when using the 'spawn'\n        start method.  Useful for people embedding Python.\n        '''\n        from .spawn import set_executable\n        set_executable(executable)\n\n    def set_forkserver_preload(self, module_names):\n        '''Set list of module names to try to load in forkserver process.\n        This is really just a hint.\n        '''\n        from .forkserver import set_forkserver_preload\n        set_forkserver_preload(module_names)\n\n    def get_context(self, method=None):\n        if method is None:\n            return self\n        try:\n            ctx = _concrete_contexts[method]\n        except KeyError:\n            raise ValueError('cannot find context for %r' % method) from None\n        ctx._check_available()\n        return ctx\n\n    def get_start_method(self, allow_none=False):\n        return self._name\n\n    def set_start_method(self, method, force=False):\n        raise ValueError('cannot set start method of concrete context')\n\n    @property\n    def reducer(self):\n        '''Controls how objects will be reduced to a form that can be\n        shared with other processes.'''\n        return globals().get('reduction')\n\n    @reducer.setter\n    def reducer(self, reduction):\n        globals()['reduction'] = reduction\n\n    def _check_available(self):\n        pass\n\n#\n# Type of default context -- underlying context can be set at most once\n#\n\nclass Process(process.BaseProcess):\n    _start_method = None\n    @staticmethod\n    def _Popen(process_obj):\n        return _default_context.get_context().Process._Popen(process_obj)\n\nclass DefaultContext(BaseContext):\n    Process = Process\n\n    def __init__(self, context):\n        self._default_context = context\n        self._actual_context = None\n\n    def get_context(self, method=None):\n        if method is None:\n            if self._actual_context is None:\n                self._actual_context = self._default_context\n            return self._actual_context\n        else:\n            return super().get_context(method)\n\n    def set_start_method(self, method, force=False):\n        if self._actual_context is not None and not force:\n            raise RuntimeError('context has already been set')\n        if method is None and force:\n            self._actual_context = None\n            return\n        self._actual_context = self.get_context(method)\n\n    def get_start_method(self, allow_none=False):\n        if self._actual_context is None:\n            if allow_none:\n                return None\n            self._actual_context = self._default_context\n        return self._actual_context._name\n\n    def get_all_start_methods(self):\n        if sys.platform == 'win32':\n            return ['spawn']\n        else:\n            methods = ['spawn', 'fork'] if sys.platform == 'darwin' else ['fork', 'spawn']\n            if reduction.HAVE_SEND_HANDLE:\n                methods.append('forkserver')\n            return methods\n\n\n#\n# Context types for fixed start method\n#\n\nif sys.platform != 'win32':\n\n    class ForkProcess(process.BaseProcess):\n        _start_method = 'fork'\n        @staticmethod\n        def _Popen(process_obj):\n            from .popen_fork import Popen\n            return Popen(process_obj)\n\n    class SpawnProcess(process.BaseProcess):\n        _start_method = 'spawn'\n        @staticmethod\n        def _Popen(process_obj):\n            from .popen_spawn_posix import Popen\n            return Popen(process_obj)\n\n    class ForkServerProcess(process.BaseProcess):\n        _start_method = 'forkserver'\n        @staticmethod\n        def _Popen(process_obj):\n            from .popen_forkserver import Popen\n            return Popen(process_obj)\n\n    class ForkContext(BaseContext):\n        _name = 'fork'\n        Process = ForkProcess\n\n    class SpawnContext(BaseContext):\n        _name = 'spawn'\n        Process = SpawnProcess\n\n    class ForkServerContext(BaseContext):\n        _name = 'forkserver'\n        Process = ForkServerProcess\n        def _check_available(self):\n            if not reduction.HAVE_SEND_HANDLE:\n                raise ValueError('forkserver start method not available')\n\n    _concrete_contexts = {\n        'fork': ForkContext(),\n        'spawn': SpawnContext(),\n        'forkserver': ForkServerContext(),\n    }\n    if sys.platform == 'darwin':\n        # bpo-33725: running arbitrary code after fork() is no longer reliable\n        # on macOS since macOS 10.14 (Mojave). Use spawn by default instead.\n        _default_context = DefaultContext(_concrete_contexts['spawn'])\n    else:\n        _default_context = DefaultContext(_concrete_contexts['fork'])\n\nelse:\n\n    class SpawnProcess(process.BaseProcess):\n        _start_method = 'spawn'\n        @staticmethod\n        def _Popen(process_obj):\n            from .popen_spawn_win32 import Popen\n            return Popen(process_obj)\n\n    class SpawnContext(BaseContext):\n        _name = 'spawn'\n        Process = SpawnProcess\n\n    _concrete_contexts = {\n        'spawn': SpawnContext(),\n    }\n    _default_context = DefaultContext(_concrete_contexts['spawn'])\n\n#\n# Force the start method\n#\n\ndef _force_start_method(method):\n    _default_context._actual_context = _concrete_contexts[method]\n\n#\n# Check that the current thread is spawning a child process\n#\n\n_tls = threading.local()\n\ndef get_spawning_popen():\n    return getattr(_tls, 'spawning_popen', None)\n\ndef set_spawning_popen(popen):\n    _tls.spawning_popen = popen\n\ndef assert_spawning(obj):\n    if get_spawning_popen() is None:\n        raise RuntimeError(\n            '%s objects should only be shared between processes'\n            ' through inheritance' % type(obj).__name__\n            )\n", 362], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py": ["#\n# Module implementing synchronization primitives\n#\n# multiprocessing/synchronize.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\n__all__ = [\n    'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Condition', 'Event'\n    ]\n\nimport threading\nimport sys\nimport tempfile\nimport _multiprocessing\nimport time\n\nfrom . import context\nfrom . import process\nfrom . import util\n\n# Try to import the mp.synchronize module cleanly, if it fails\n# raise ImportError for platforms lacking a working sem_open implementation.\n# See issue 3770\ntry:\n    from _multiprocessing import SemLock, sem_unlink\nexcept (ImportError):\n    raise ImportError(\"This platform lacks a functioning sem_open\" +\n                      \" implementation, therefore, the required\" +\n                      \" synchronization primitives needed will not\" +\n                      \" function, see issue 3770.\")\n\n#\n# Constants\n#\n\nRECURSIVE_MUTEX, SEMAPHORE = list(range(2))\nSEM_VALUE_MAX = _multiprocessing.SemLock.SEM_VALUE_MAX\n\n#\n# Base class for semaphores and mutexes; wraps `_multiprocessing.SemLock`\n#\n\nclass SemLock(object):\n\n    _rand = tempfile._RandomNameSequence()\n\n    def __init__(self, kind, value, maxvalue, *, ctx):\n        if ctx is None:\n            ctx = context._default_context.get_context()\n        name = ctx.get_start_method()\n        unlink_now = sys.platform == 'win32' or name == 'fork'\n        for i in range(100):\n            try:\n                sl = self._semlock = _multiprocessing.SemLock(\n                    kind, value, maxvalue, self._make_name(),\n                    unlink_now)\n            except FileExistsError:\n                pass\n            else:\n                break\n        else:\n            raise FileExistsError('cannot find name for semaphore')\n\n        util.debug('created semlock with handle %s' % sl.handle)\n        self._make_methods()\n\n        if sys.platform != 'win32':\n            def _after_fork(obj):\n                obj._semlock._after_fork()\n            util.register_after_fork(self, _after_fork)\n\n        if self._semlock.name is not None:\n            # We only get here if we are on Unix with forking\n            # disabled.  When the object is garbage collected or the\n            # process shuts down we unlink the semaphore name\n            from .resource_tracker import register\n            register(self._semlock.name, \"semaphore\")\n            util.Finalize(self, SemLock._cleanup, (self._semlock.name,),\n                          exitpriority=0)\n\n    @staticmethod\n    def _cleanup(name):\n        from .resource_tracker import unregister\n        sem_unlink(name)\n        unregister(name, \"semaphore\")\n\n    def _make_methods(self):\n        self.acquire = self._semlock.acquire\n        self.release = self._semlock.release\n\n    def __enter__(self):\n        return self._semlock.__enter__()\n\n    def __exit__(self, *args):\n        return self._semlock.__exit__(*args)\n\n    def __getstate__(self):\n        context.assert_spawning(self)\n        sl = self._semlock\n        if sys.platform == 'win32':\n            h = context.get_spawning_popen().duplicate_for_child(sl.handle)\n        else:\n            h = sl.handle\n        return (h, sl.kind, sl.maxvalue, sl.name)\n\n    def __setstate__(self, state):\n        self._semlock = _multiprocessing.SemLock._rebuild(*state)\n        util.debug('recreated blocker with handle %r' % state[0])\n        self._make_methods()\n\n    @staticmethod\n    def _make_name():\n        return '%s-%s' % (process.current_process()._config['semprefix'],\n                          next(SemLock._rand))\n\n#\n# Semaphore\n#\n\nclass Semaphore(SemLock):\n\n    def __init__(self, value=1, *, ctx):\n        SemLock.__init__(self, SEMAPHORE, value, SEM_VALUE_MAX, ctx=ctx)\n\n    def get_value(self):\n        return self._semlock._get_value()\n\n    def __repr__(self):\n        try:\n            value = self._semlock._get_value()\n        except Exception:\n            value = 'unknown'\n        return '<%s(value=%s)>' % (self.__class__.__name__, value)\n\n#\n# Bounded semaphore\n#\n\nclass BoundedSemaphore(Semaphore):\n\n    def __init__(self, value=1, *, ctx):\n        SemLock.__init__(self, SEMAPHORE, value, value, ctx=ctx)\n\n    def __repr__(self):\n        try:\n            value = self._semlock._get_value()\n        except Exception:\n            value = 'unknown'\n        return '<%s(value=%s, maxvalue=%s)>' % \\\n               (self.__class__.__name__, value, self._semlock.maxvalue)\n\n#\n# Non-recursive lock\n#\n\nclass Lock(SemLock):\n\n    def __init__(self, *, ctx):\n        SemLock.__init__(self, SEMAPHORE, 1, 1, ctx=ctx)\n\n    def __repr__(self):\n        try:\n            if self._semlock._is_mine():\n                name = process.current_process().name\n                if threading.current_thread().name != 'MainThread':\n                    name += '|' + threading.current_thread().name\n            elif self._semlock._get_value() == 1:\n                name = 'None'\n            elif self._semlock._count() > 0:\n                name = 'SomeOtherThread'\n            else:\n                name = 'SomeOtherProcess'\n        except Exception:\n            name = 'unknown'\n        return '<%s(owner=%s)>' % (self.__class__.__name__, name)\n\n#\n# Recursive lock\n#\n\nclass RLock(SemLock):\n\n    def __init__(self, *, ctx):\n        SemLock.__init__(self, RECURSIVE_MUTEX, 1, 1, ctx=ctx)\n\n    def __repr__(self):\n        try:\n            if self._semlock._is_mine():\n                name = process.current_process().name\n                if threading.current_thread().name != 'MainThread':\n                    name += '|' + threading.current_thread().name\n                count = self._semlock._count()\n            elif self._semlock._get_value() == 1:\n                name, count = 'None', 0\n            elif self._semlock._count() > 0:\n                name, count = 'SomeOtherThread', 'nonzero'\n            else:\n                name, count = 'SomeOtherProcess', 'nonzero'\n        except Exception:\n            name, count = 'unknown', 'unknown'\n        return '<%s(%s, %s)>' % (self.__class__.__name__, name, count)\n\n#\n# Condition variable\n#\n\nclass Condition(object):\n\n    def __init__(self, lock=None, *, ctx):\n        self._lock = lock or ctx.RLock()\n        self._sleeping_count = ctx.Semaphore(0)\n        self._woken_count = ctx.Semaphore(0)\n        self._wait_semaphore = ctx.Semaphore(0)\n        self._make_methods()\n\n    def __getstate__(self):\n        context.assert_spawning(self)\n        return (self._lock, self._sleeping_count,\n                self._woken_count, self._wait_semaphore)\n\n    def __setstate__(self, state):\n        (self._lock, self._sleeping_count,\n         self._woken_count, self._wait_semaphore) = state\n        self._make_methods()\n\n    def __enter__(self):\n        return self._lock.__enter__()\n\n    def __exit__(self, *args):\n        return self._lock.__exit__(*args)\n\n    def _make_methods(self):\n        self.acquire = self._lock.acquire\n        self.release = self._lock.release\n\n    def __repr__(self):\n        try:\n            num_waiters = (self._sleeping_count._semlock._get_value() -\n                           self._woken_count._semlock._get_value())\n        except Exception:\n            num_waiters = 'unknown'\n        return '<%s(%s, %s)>' % (self.__class__.__name__, self._lock, num_waiters)\n\n    def wait(self, timeout=None):\n        assert self._lock._semlock._is_mine(), \\\n               'must acquire() condition before using wait()'\n\n        # indicate that this thread is going to sleep\n        self._sleeping_count.release()\n\n        # release lock\n        count = self._lock._semlock._count()\n        for i in range(count):\n            self._lock.release()\n\n        try:\n            # wait for notification or timeout\n            return self._wait_semaphore.acquire(True, timeout)\n        finally:\n            # indicate that this thread has woken\n            self._woken_count.release()\n\n            # reacquire lock\n            for i in range(count):\n                self._lock.acquire()\n\n    def notify(self, n=1):\n        assert self._lock._semlock._is_mine(), 'lock is not owned'\n        assert not self._wait_semaphore.acquire(\n            False), ('notify: Should not have been able to acquire '\n                     + '_wait_semaphore')\n\n        # to take account of timeouts since last notify*() we subtract\n        # woken_count from sleeping_count and rezero woken_count\n        while self._woken_count.acquire(False):\n            res = self._sleeping_count.acquire(False)\n            assert res, ('notify: Bug in sleeping_count.acquire'\n                         + '- res should not be False')\n\n        sleepers = 0\n        while sleepers < n and self._sleeping_count.acquire(False):\n            self._wait_semaphore.release()        # wake up one sleeper\n            sleepers += 1\n\n        if sleepers:\n            for i in range(sleepers):\n                self._woken_count.acquire()       # wait for a sleeper to wake\n\n            # rezero wait_semaphore in case some timeouts just happened\n            while self._wait_semaphore.acquire(False):\n                pass\n\n    def notify_all(self):\n        self.notify(n=sys.maxsize)\n\n    def wait_for(self, predicate, timeout=None):\n        result = predicate()\n        if result:\n            return result\n        if timeout is not None:\n            endtime = time.monotonic() + timeout\n        else:\n            endtime = None\n            waittime = None\n        while not result:\n            if endtime is not None:\n                waittime = endtime - time.monotonic()\n                if waittime <= 0:\n                    break\n            self.wait(waittime)\n            result = predicate()\n        return result\n\n#\n# Event\n#\n\nclass Event(object):\n\n    def __init__(self, *, ctx):\n        self._cond = ctx.Condition(ctx.Lock())\n        self._flag = ctx.Semaphore(0)\n\n    def is_set(self):\n        with self._cond:\n            if self._flag.acquire(False):\n                self._flag.release()\n                return True\n            return False\n\n    def set(self):\n        with self._cond:\n            self._flag.acquire(False)\n            self._flag.release()\n            self._cond.notify_all()\n\n    def clear(self):\n        with self._cond:\n            self._flag.acquire(False)\n\n    def wait(self, timeout=None):\n        with self._cond:\n            if self._flag.acquire(False):\n                self._flag.release()\n            else:\n                self._cond.wait(timeout)\n\n            if self._flag.acquire(False):\n                self._flag.release()\n                return True\n            return False\n\n#\n# Barrier\n#\n\nclass Barrier(threading.Barrier):\n\n    def __init__(self, parties, action=None, timeout=None, *, ctx):\n        import struct\n        from .heap import BufferWrapper\n        wrapper = BufferWrapper(struct.calcsize('i') * 2)\n        cond = ctx.Condition()\n        self.__setstate__((parties, action, timeout, cond, wrapper))\n        self._state = 0\n        self._count = 0\n\n    def __setstate__(self, state):\n        (self._parties, self._action, self._timeout,\n         self._cond, self._wrapper) = state\n        self._array = self._wrapper.create_memoryview().cast('i')\n\n    def __getstate__(self):\n        return (self._parties, self._action, self._timeout,\n                self._cond, self._wrapper)\n\n    @property\n    def _state(self):\n        return self._array[0]\n\n    @_state.setter\n    def _state(self, value):\n        self._array[0] = value\n\n    @property\n    def _count(self):\n        return self._array[1]\n\n    @_count.setter\n    def _count(self, value):\n        self._array[1] = value\n", 394], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py": ["\"\"\"Temporary files.\n\nThis module provides generic, low- and high-level interfaces for\ncreating temporary files and directories.  All of the interfaces\nprovided by this module can be used without fear of race conditions\nexcept for 'mktemp'.  'mktemp' is subject to race conditions and\nshould not be used; it is provided for backward compatibility only.\n\nThe default path names are returned as str.  If you supply bytes as\ninput, all return values will be in bytes.  Ex:\n\n    >>> tempfile.mkstemp()\n    (4, '/tmp/tmptpu9nin8')\n    >>> tempfile.mkdtemp(suffix=b'')\n    b'/tmp/tmppbi8f0hy'\n\nThis module also provides some data items to the user:\n\n  TMP_MAX  - maximum number of names that will be tried before\n             giving up.\n  tempdir  - If this is set to a string before the first use of\n             any routine from this module, it will be considered as\n             another candidate location to store temporary files.\n\"\"\"\n\n__all__ = [\n    \"NamedTemporaryFile\", \"TemporaryFile\", # high level safe interfaces\n    \"SpooledTemporaryFile\", \"TemporaryDirectory\",\n    \"mkstemp\", \"mkdtemp\",                  # low level safe interfaces\n    \"mktemp\",                              # deprecated unsafe interface\n    \"TMP_MAX\", \"gettempprefix\",            # constants\n    \"tempdir\", \"gettempdir\",\n    \"gettempprefixb\", \"gettempdirb\",\n   ]\n\n\n# Imports.\n\nimport functools as _functools\nimport warnings as _warnings\nimport io as _io\nimport os as _os\nimport shutil as _shutil\nimport errno as _errno\nfrom random import Random as _Random\nimport sys as _sys\nimport weakref as _weakref\nimport _thread\n_allocate_lock = _thread.allocate_lock\n\n_text_openflags = _os.O_RDWR | _os.O_CREAT | _os.O_EXCL\nif hasattr(_os, 'O_NOFOLLOW'):\n    _text_openflags |= _os.O_NOFOLLOW\n\n_bin_openflags = _text_openflags\nif hasattr(_os, 'O_BINARY'):\n    _bin_openflags |= _os.O_BINARY\n\nif hasattr(_os, 'TMP_MAX'):\n    TMP_MAX = _os.TMP_MAX\nelse:\n    TMP_MAX = 10000\n\n# This variable _was_ unused for legacy reasons, see issue 10354.\n# But as of 3.5 we actually use it at runtime so changing it would\n# have a possibly desirable side effect...  But we do not want to support\n# that as an API.  It is undocumented on purpose.  Do not depend on this.\ntemplate = \"tmp\"\n\n# Internal routines.\n\n_once_lock = _allocate_lock()\n\n\ndef _exists(fn):\n    try:\n        _os.lstat(fn)\n    except OSError:\n        return False\n    else:\n        return True\n\n\ndef _infer_return_type(*args):\n    \"\"\"Look at the type of all args and divine their implied return type.\"\"\"\n    return_type = None\n    for arg in args:\n        if arg is None:\n            continue\n        if isinstance(arg, bytes):\n            if return_type is str:\n                raise TypeError(\"Can't mix bytes and non-bytes in \"\n                                \"path components.\")\n            return_type = bytes\n        else:\n            if return_type is bytes:\n                raise TypeError(\"Can't mix bytes and non-bytes in \"\n                                \"path components.\")\n            return_type = str\n    if return_type is None:\n        return str  # tempfile APIs return a str by default.\n    return return_type\n\n\ndef _sanitize_params(prefix, suffix, dir):\n    \"\"\"Common parameter processing for most APIs in this module.\"\"\"\n    output_type = _infer_return_type(prefix, suffix, dir)\n    if suffix is None:\n        suffix = output_type()\n    if prefix is None:\n        if output_type is str:\n            prefix = template\n        else:\n            prefix = _os.fsencode(template)\n    if dir is None:\n        if output_type is str:\n            dir = gettempdir()\n        else:\n            dir = gettempdirb()\n    return prefix, suffix, dir, output_type\n\n\nclass _RandomNameSequence:\n    \"\"\"An instance of _RandomNameSequence generates an endless\n    sequence of unpredictable strings which can safely be incorporated\n    into file names.  Each string is eight characters long.  Multiple\n    threads can safely use the same instance at the same time.\n\n    _RandomNameSequence is an iterator.\"\"\"\n\n    characters = \"abcdefghijklmnopqrstuvwxyz0123456789_\"\n\n    @property\n    def rng(self):\n        cur_pid = _os.getpid()\n        if cur_pid != getattr(self, '_rng_pid', None):\n            self._rng = _Random()\n            self._rng_pid = cur_pid\n        return self._rng\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        c = self.characters\n        choose = self.rng.choice\n        letters = [choose(c) for dummy in range(8)]\n        return ''.join(letters)\n\ndef _candidate_tempdir_list():\n    \"\"\"Generate a list of candidate temporary directories which\n    _get_default_tempdir will try.\"\"\"\n\n    dirlist = []\n\n    # First, try the environment.\n    for envname in 'TMPDIR', 'TEMP', 'TMP':\n        dirname = _os.getenv(envname)\n        if dirname: dirlist.append(dirname)\n\n    # Failing that, try OS-specific locations.\n    if _os.name == 'nt':\n        dirlist.extend([ _os.path.expanduser(r'~\\AppData\\Local\\Temp'),\n                         _os.path.expandvars(r'%SYSTEMROOT%\\Temp'),\n                         r'c:\\temp', r'c:\\tmp', r'\\temp', r'\\tmp' ])\n    else:\n        dirlist.extend([ '/tmp', '/var/tmp', '/usr/tmp' ])\n\n    # As a last resort, the current directory.\n    try:\n        dirlist.append(_os.getcwd())\n    except (AttributeError, OSError):\n        dirlist.append(_os.curdir)\n\n    return dirlist\n\ndef _get_default_tempdir():\n    \"\"\"Calculate the default directory to use for temporary files.\n    This routine should be called exactly once.\n\n    We determine whether or not a candidate temp dir is usable by\n    trying to create and write to a file in that directory.  If this\n    is successful, the test file is deleted.  To prevent denial of\n    service, the name of the test file must be randomized.\"\"\"\n\n    namer = _RandomNameSequence()\n    dirlist = _candidate_tempdir_list()\n\n    for dir in dirlist:\n        if dir != _os.curdir:\n            dir = _os.path.abspath(dir)\n        # Try only a few names per directory.\n        for seq in range(100):\n            name = next(namer)\n            filename = _os.path.join(dir, name)\n            try:\n                fd = _os.open(filename, _bin_openflags, 0o600)\n                try:\n                    try:\n                        with _io.open(fd, 'wb', closefd=False) as fp:\n                            fp.write(b'blat')\n                    finally:\n                        _os.close(fd)\n                finally:\n                    _os.unlink(filename)\n                return dir\n            except FileExistsError:\n                pass\n            except PermissionError:\n                # This exception is thrown when a directory with the chosen name\n                # already exists on windows.\n                if (_os.name == 'nt' and _os.path.isdir(dir) and\n                    _os.access(dir, _os.W_OK)):\n                    continue\n                break   # no point trying more names in this directory\n            except OSError:\n                break   # no point trying more names in this directory\n    raise FileNotFoundError(_errno.ENOENT,\n                            \"No usable temporary directory found in %s\" %\n                            dirlist)\n\n_name_sequence = None\n\ndef _get_candidate_names():\n    \"\"\"Common setup sequence for all user-callable interfaces.\"\"\"\n\n    global _name_sequence\n    if _name_sequence is None:\n        _once_lock.acquire()\n        try:\n            if _name_sequence is None:\n                _name_sequence = _RandomNameSequence()\n        finally:\n            _once_lock.release()\n    return _name_sequence\n\n\ndef _mkstemp_inner(dir, pre, suf, flags, output_type):\n    \"\"\"Code common to mkstemp, TemporaryFile, and NamedTemporaryFile.\"\"\"\n\n    names = _get_candidate_names()\n    if output_type is bytes:\n        names = map(_os.fsencode, names)\n\n    for seq in range(TMP_MAX):\n        name = next(names)\n        file = _os.path.join(dir, pre + name + suf)\n        _sys.audit(\"tempfile.mkstemp\", file)\n        try:\n            fd = _os.open(file, flags, 0o600)\n        except FileExistsError:\n            continue    # try again\n        except PermissionError:\n            # This exception is thrown when a directory with the chosen name\n            # already exists on windows.\n            if (_os.name == 'nt' and _os.path.isdir(dir) and\n                _os.access(dir, _os.W_OK)):\n                continue\n            else:\n                raise\n        return (fd, _os.path.abspath(file))\n\n    raise FileExistsError(_errno.EEXIST,\n                          \"No usable temporary file name found\")\n\ndef _dont_follow_symlinks(func, path, *args):\n    # Pass follow_symlinks=False, unless not supported on this platform.\n    if func in _os.supports_follow_symlinks:\n        func(path, *args, follow_symlinks=False)\n    elif _os.name == 'nt' or not _os.path.islink(path):\n        func(path, *args)\n\ndef _resetperms(path):\n    try:\n        chflags = _os.chflags\n    except AttributeError:\n        pass\n    else:\n        _dont_follow_symlinks(chflags, path, 0)\n    _dont_follow_symlinks(_os.chmod, path, 0o700)\n\n\n# User visible interfaces.\n\ndef gettempprefix():\n    \"\"\"The default prefix for temporary directories.\"\"\"\n    return template\n\ndef gettempprefixb():\n    \"\"\"The default prefix for temporary directories as bytes.\"\"\"\n    return _os.fsencode(gettempprefix())\n\ntempdir = None\n\ndef gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir\n    if tempdir is None:\n        _once_lock.acquire()\n        try:\n            if tempdir is None:\n                tempdir = _get_default_tempdir()\n        finally:\n            _once_lock.release()\n    return tempdir\n\ndef gettempdirb():\n    \"\"\"A bytes version of tempfile.gettempdir().\"\"\"\n    return _os.fsencode(gettempdir())\n\ndef mkstemp(suffix=None, prefix=None, dir=None, text=False):\n    \"\"\"User-callable function to create and return a unique temporary\n    file.  The return value is a pair (fd, name) where fd is the\n    file descriptor returned by os.open, and name is the filename.\n\n    If 'suffix' is not None, the file name will end with that suffix,\n    otherwise there will be no suffix.\n\n    If 'prefix' is not None, the file name will begin with that prefix,\n    otherwise a default prefix is used.\n\n    If 'dir' is not None, the file will be created in that directory,\n    otherwise a default directory is used.\n\n    If 'text' is specified and true, the file is opened in text\n    mode.  Else (the default) the file is opened in binary mode.\n\n    If any of 'suffix', 'prefix' and 'dir' are not None, they must be the\n    same type.  If they are bytes, the returned name will be bytes; str\n    otherwise.\n\n    The file is readable and writable only by the creating user ID.\n    If the operating system uses permission bits to indicate whether a\n    file is executable, the file is executable by no one. The file\n    descriptor is not inherited by children of this process.\n\n    Caller is responsible for deleting the file when done with it.\n    \"\"\"\n\n    prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)\n\n    if text:\n        flags = _text_openflags\n    else:\n        flags = _bin_openflags\n\n    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)\n\n\ndef mkdtemp(suffix=None, prefix=None, dir=None):\n    \"\"\"User-callable function to create and return a unique temporary\n    directory.  The return value is the pathname of the directory.\n\n    Arguments are as for mkstemp, except that the 'text' argument is\n    not accepted.\n\n    The directory is readable, writable, and searchable only by the\n    creating user.\n\n    Caller is responsible for deleting the directory when done with it.\n    \"\"\"\n\n    prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)\n\n    names = _get_candidate_names()\n    if output_type is bytes:\n        names = map(_os.fsencode, names)\n\n    for seq in range(TMP_MAX):\n        name = next(names)\n        file = _os.path.join(dir, prefix + name + suffix)\n        _sys.audit(\"tempfile.mkdtemp\", file)\n        try:\n            _os.mkdir(file, 0o700)\n        except FileExistsError:\n            continue    # try again\n        except PermissionError:\n            # This exception is thrown when a directory with the chosen name\n            # already exists on windows.\n            if (_os.name == 'nt' and _os.path.isdir(dir) and\n                _os.access(dir, _os.W_OK)):\n                continue\n            else:\n                raise\n        return file\n\n    raise FileExistsError(_errno.EEXIST,\n                          \"No usable temporary directory name found\")\n\ndef mktemp(suffix=\"\", prefix=template, dir=None):\n    \"\"\"User-callable function to return a unique temporary file name.  The\n    file is not created.\n\n    Arguments are similar to mkstemp, except that the 'text' argument is\n    not accepted, and suffix=None, prefix=None and bytes file names are not\n    supported.\n\n    THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED.  The file name may\n    refer to a file that did not exist at some point, but by the time\n    you get around to creating it, someone else may have beaten you to\n    the punch.\n    \"\"\"\n\n##    from warnings import warn as _warn\n##    _warn(\"mktemp is a potential security risk to your program\",\n##          RuntimeWarning, stacklevel=2)\n\n    if dir is None:\n        dir = gettempdir()\n\n    names = _get_candidate_names()\n    for seq in range(TMP_MAX):\n        name = next(names)\n        file = _os.path.join(dir, prefix + name + suffix)\n        if not _exists(file):\n            return file\n\n    raise FileExistsError(_errno.EEXIST,\n                          \"No usable temporary filename found\")\n\n\nclass _TemporaryFileCloser:\n    \"\"\"A separate object allowing proper closing of a temporary file's\n    underlying file object, without adding a __del__ method to the\n    temporary file.\"\"\"\n\n    file = None  # Set here since __del__ checks it\n    close_called = False\n\n    def __init__(self, file, name, delete=True):\n        self.file = file\n        self.name = name\n        self.delete = delete\n\n    # NT provides delete-on-close as a primitive, so we don't need\n    # the wrapper to do anything special.  We still use it so that\n    # file.name is useful (i.e. not \"(fdopen)\") with NamedTemporaryFile.\n    if _os.name != 'nt':\n        # Cache the unlinker so we don't get spurious errors at\n        # shutdown when the module-level \"os\" is None'd out.  Note\n        # that this must be referenced as self.unlink, because the\n        # name TemporaryFileWrapper may also get None'd out before\n        # __del__ is called.\n\n        def close(self, unlink=_os.unlink):\n            if not self.close_called and self.file is not None:\n                self.close_called = True\n                try:\n                    self.file.close()\n                finally:\n                    if self.delete:\n                        unlink(self.name)\n\n        # Need to ensure the file is deleted on __del__\n        def __del__(self):\n            self.close()\n\n    else:\n        def close(self):\n            if not self.close_called:\n                self.close_called = True\n                self.file.close()\n\n\nclass _TemporaryFileWrapper:\n    \"\"\"Temporary file wrapper\n\n    This class provides a wrapper around files opened for\n    temporary use.  In particular, it seeks to automatically\n    remove the file when it is no longer needed.\n    \"\"\"\n\n    def __init__(self, file, name, delete=True):\n        self.file = file\n        self.name = name\n        self.delete = delete\n        self._closer = _TemporaryFileCloser(file, name, delete)\n\n    def __getattr__(self, name):\n        # Attribute lookups are delegated to the underlying file\n        # and cached for non-numeric results\n        # (i.e. methods are cached, closed and friends are not)\n        file = self.__dict__['file']\n        a = getattr(file, name)\n        if hasattr(a, '__call__'):\n            func = a\n            @_functools.wraps(func)\n            def func_wrapper(*args, **kwargs):\n                return func(*args, **kwargs)\n            # Avoid closing the file as long as the wrapper is alive,\n            # see issue #18879.\n            func_wrapper._closer = self._closer\n            a = func_wrapper\n        if not isinstance(a, int):\n            setattr(self, name, a)\n        return a\n\n    # The underlying __enter__ method returns the wrong object\n    # (self.file) so override it to return the wrapper\n    def __enter__(self):\n        self.file.__enter__()\n        return self\n\n    # Need to trap __exit__ as well to ensure the file gets\n    # deleted when used in a with statement\n    def __exit__(self, exc, value, tb):\n        result = self.file.__exit__(exc, value, tb)\n        self.close()\n        return result\n\n    def close(self):\n        \"\"\"\n        Close the temporary file, possibly deleting it.\n        \"\"\"\n        self._closer.close()\n\n    # iter() doesn't use __getattr__ to find the __iter__ method\n    def __iter__(self):\n        # Don't return iter(self.file), but yield from it to avoid closing\n        # file as long as it's being used as iterator (see issue #23700).  We\n        # can't use 'yield from' here because iter(file) returns the file\n        # object itself, which has a close method, and thus the file would get\n        # closed when the generator is finalized, due to PEP380 semantics.\n        for line in self.file:\n            yield line\n\n\ndef NamedTemporaryFile(mode='w+b', buffering=-1, encoding=None,\n                       newline=None, suffix=None, prefix=None,\n                       dir=None, delete=True, *, errors=None):\n    \"\"\"Create and return a temporary file.\n    Arguments:\n    'prefix', 'suffix', 'dir' -- as for mkstemp.\n    'mode' -- the mode argument to io.open (default \"w+b\").\n    'buffering' -- the buffer size argument to io.open (default -1).\n    'encoding' -- the encoding argument to io.open (default None)\n    'newline' -- the newline argument to io.open (default None)\n    'delete' -- whether the file is deleted on close (default True).\n    'errors' -- the errors argument to io.open (default None)\n    The file is created as mkstemp() would do it.\n\n    Returns an object with a file-like interface; the name of the file\n    is accessible as its 'name' attribute.  The file will be automatically\n    deleted when it is closed unless the 'delete' argument is set to False.\n    \"\"\"\n\n    prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)\n\n    flags = _bin_openflags\n\n    # Setting O_TEMPORARY in the flags causes the OS to delete\n    # the file when it is closed.  This is only supported by Windows.\n    if _os.name == 'nt' and delete:\n        flags |= _os.O_TEMPORARY\n\n    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)\n    try:\n        file = _io.open(fd, mode, buffering=buffering,\n                        newline=newline, encoding=encoding, errors=errors)\n\n        return _TemporaryFileWrapper(file, name, delete)\n    except BaseException:\n        _os.unlink(name)\n        _os.close(fd)\n        raise\n\nif _os.name != 'posix' or _sys.platform == 'cygwin':\n    # On non-POSIX and Cygwin systems, assume that we cannot unlink a file\n    # while it is open.\n    TemporaryFile = NamedTemporaryFile\n\nelse:\n    # Is the O_TMPFILE flag available and does it work?\n    # The flag is set to False if os.open(dir, os.O_TMPFILE) raises an\n    # IsADirectoryError exception\n    _O_TMPFILE_WORKS = hasattr(_os, 'O_TMPFILE')\n\n    def TemporaryFile(mode='w+b', buffering=-1, encoding=None,\n                      newline=None, suffix=None, prefix=None,\n                      dir=None, *, errors=None):\n        \"\"\"Create and return a temporary file.\n        Arguments:\n        'prefix', 'suffix', 'dir' -- as for mkstemp.\n        'mode' -- the mode argument to io.open (default \"w+b\").\n        'buffering' -- the buffer size argument to io.open (default -1).\n        'encoding' -- the encoding argument to io.open (default None)\n        'newline' -- the newline argument to io.open (default None)\n        'errors' -- the errors argument to io.open (default None)\n        The file is created as mkstemp() would do it.\n\n        Returns an object with a file-like interface.  The file has no\n        name, and will cease to exist when it is closed.\n        \"\"\"\n        global _O_TMPFILE_WORKS\n\n        prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)\n\n        flags = _bin_openflags\n        if _O_TMPFILE_WORKS:\n            try:\n                flags2 = (flags | _os.O_TMPFILE) & ~_os.O_CREAT\n                fd = _os.open(dir, flags2, 0o600)\n            except IsADirectoryError:\n                # Linux kernel older than 3.11 ignores the O_TMPFILE flag:\n                # O_TMPFILE is read as O_DIRECTORY. Trying to open a directory\n                # with O_RDWR|O_DIRECTORY fails with IsADirectoryError, a\n                # directory cannot be open to write. Set flag to False to not\n                # try again.\n                _O_TMPFILE_WORKS = False\n            except OSError:\n                # The filesystem of the directory does not support O_TMPFILE.\n                # For example, OSError(95, 'Operation not supported').\n                #\n                # On Linux kernel older than 3.11, trying to open a regular\n                # file (or a symbolic link to a regular file) with O_TMPFILE\n                # fails with NotADirectoryError, because O_TMPFILE is read as\n                # O_DIRECTORY.\n                pass\n            else:\n                try:\n                    return _io.open(fd, mode, buffering=buffering,\n                                    newline=newline, encoding=encoding,\n                                    errors=errors)\n                except:\n                    _os.close(fd)\n                    raise\n            # Fallback to _mkstemp_inner().\n\n        (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)\n        try:\n            _os.unlink(name)\n            return _io.open(fd, mode, buffering=buffering,\n                            newline=newline, encoding=encoding, errors=errors)\n        except:\n            _os.close(fd)\n            raise\n\nclass SpooledTemporaryFile:\n    \"\"\"Temporary file wrapper, specialized to switch from BytesIO\n    or StringIO to a real file when it exceeds a certain size or\n    when a fileno is needed.\n    \"\"\"\n    _rolled = False\n\n    def __init__(self, max_size=0, mode='w+b', buffering=-1,\n                 encoding=None, newline=None,\n                 suffix=None, prefix=None, dir=None, *, errors=None):\n        if 'b' in mode:\n            self._file = _io.BytesIO()\n        else:\n            self._file = _io.TextIOWrapper(_io.BytesIO(),\n                            encoding=encoding, errors=errors,\n                            newline=newline)\n        self._max_size = max_size\n        self._rolled = False\n        self._TemporaryFileArgs = {'mode': mode, 'buffering': buffering,\n                                   'suffix': suffix, 'prefix': prefix,\n                                   'encoding': encoding, 'newline': newline,\n                                   'dir': dir, 'errors': errors}\n\n    def _check(self, file):\n        if self._rolled: return\n        max_size = self._max_size\n        if max_size and file.tell() > max_size:\n            self.rollover()\n\n    def rollover(self):\n        if self._rolled: return\n        file = self._file\n        newfile = self._file = TemporaryFile(**self._TemporaryFileArgs)\n        del self._TemporaryFileArgs\n\n        pos = file.tell()\n        if hasattr(newfile, 'buffer'):\n            newfile.buffer.write(file.detach().getvalue())\n        else:\n            newfile.write(file.getvalue())\n        newfile.seek(pos, 0)\n\n        self._rolled = True\n\n    # The method caching trick from NamedTemporaryFile\n    # won't work here, because _file may change from a\n    # BytesIO/StringIO instance to a real file. So we list\n    # all the methods directly.\n\n    # Context management protocol\n    def __enter__(self):\n        if self._file.closed:\n            raise ValueError(\"Cannot enter context with closed file\")\n        return self\n\n    def __exit__(self, exc, value, tb):\n        self._file.close()\n\n    # file protocol\n    def __iter__(self):\n        return self._file.__iter__()\n\n    def close(self):\n        self._file.close()\n\n    @property\n    def closed(self):\n        return self._file.closed\n\n    @property\n    def encoding(self):\n        return self._file.encoding\n\n    @property\n    def errors(self):\n        return self._file.errors\n\n    def fileno(self):\n        self.rollover()\n        return self._file.fileno()\n\n    def flush(self):\n        self._file.flush()\n\n    def isatty(self):\n        return self._file.isatty()\n\n    @property\n    def mode(self):\n        try:\n            return self._file.mode\n        except AttributeError:\n            return self._TemporaryFileArgs['mode']\n\n    @property\n    def name(self):\n        try:\n            return self._file.name\n        except AttributeError:\n            return None\n\n    @property\n    def newlines(self):\n        return self._file.newlines\n\n    def read(self, *args):\n        return self._file.read(*args)\n\n    def readline(self, *args):\n        return self._file.readline(*args)\n\n    def readlines(self, *args):\n        return self._file.readlines(*args)\n\n    def seek(self, *args):\n        return self._file.seek(*args)\n\n    @property\n    def softspace(self):\n        return self._file.softspace\n\n    def tell(self):\n        return self._file.tell()\n\n    def truncate(self, size=None):\n        if size is None:\n            self._file.truncate()\n        else:\n            if size > self._max_size:\n                self.rollover()\n            self._file.truncate(size)\n\n    def write(self, s):\n        file = self._file\n        rv = file.write(s)\n        self._check(file)\n        return rv\n\n    def writelines(self, iterable):\n        file = self._file\n        rv = file.writelines(iterable)\n        self._check(file)\n        return rv\n\n\nclass TemporaryDirectory(object):\n    \"\"\"Create and return a temporary directory.  This has the same\n    behavior as mkdtemp but can be used as a context manager.  For\n    example:\n\n        with TemporaryDirectory() as tmpdir:\n            ...\n\n    Upon exiting the context, the directory and everything contained\n    in it are removed.\n    \"\"\"\n\n    def __init__(self, suffix=None, prefix=None, dir=None):\n        self.name = mkdtemp(suffix, prefix, dir)\n        self._finalizer = _weakref.finalize(\n            self, self._cleanup, self.name,\n            warn_message=\"Implicitly cleaning up {!r}\".format(self))\n\n    @classmethod\n    def _rmtree(cls, name):\n        def onerror(func, path, exc_info):\n            if issubclass(exc_info[0], PermissionError):\n                try:\n                    if path != name:\n                        _resetperms(_os.path.dirname(path))\n                    _resetperms(path)\n\n                    try:\n                        _os.unlink(path)\n                    # PermissionError is raised on FreeBSD for directories\n                    except (IsADirectoryError, PermissionError):\n                        cls._rmtree(path)\n                except FileNotFoundError:\n                    pass\n            elif issubclass(exc_info[0], FileNotFoundError):\n                pass\n            else:\n                raise\n\n        _shutil.rmtree(name, onerror=onerror)\n\n    @classmethod\n    def _cleanup(cls, name, warn_message):\n        cls._rmtree(name)\n        _warnings.warn(warn_message, ResourceWarning)\n\n    def __repr__(self):\n        return \"<{} {!r}>\".format(self.__class__.__name__, self.name)\n\n    def __enter__(self):\n        return self.name\n\n    def __exit__(self, exc, value, tb):\n        self.cleanup()\n\n    def cleanup(self):\n        if self._finalizer.detach():\n            self._rmtree(self.name)\n", 840], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py": ["\"\"\"Random variable generators.\n\n    integers\n    --------\n           uniform within range\n\n    sequences\n    ---------\n           pick random element\n           pick random sample\n           pick weighted random sample\n           generate random permutation\n\n    distributions on the real line:\n    ------------------------------\n           uniform\n           triangular\n           normal (Gaussian)\n           lognormal\n           negative exponential\n           gamma\n           beta\n           pareto\n           Weibull\n\n    distributions on the circle (angles 0 to 2pi)\n    ---------------------------------------------\n           circular uniform\n           von Mises\n\nGeneral notes on the underlying Mersenne Twister core generator:\n\n* The period is 2**19937-1.\n* It is one of the most extensively tested generators in existence.\n* The random() method is implemented in C, executes in a single Python step,\n  and is, therefore, threadsafe.\n\n\"\"\"\n\nfrom warnings import warn as _warn\nfrom math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil\nfrom math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin\nfrom os import urandom as _urandom\nfrom _collections_abc import Set as _Set, Sequence as _Sequence\nfrom itertools import accumulate as _accumulate, repeat as _repeat\nfrom bisect import bisect as _bisect\nimport os as _os\n\ntry:\n    # hashlib is pretty heavy to load, try lean internal module first\n    from _sha512 import sha512 as _sha512\nexcept ImportError:\n    # fallback to official implementation\n    from hashlib import sha512 as _sha512\n\n\n__all__ = [\"Random\",\"seed\",\"random\",\"uniform\",\"randint\",\"choice\",\"sample\",\n           \"randrange\",\"shuffle\",\"normalvariate\",\"lognormvariate\",\n           \"expovariate\",\"vonmisesvariate\",\"gammavariate\",\"triangular\",\n           \"gauss\",\"betavariate\",\"paretovariate\",\"weibullvariate\",\n           \"getstate\",\"setstate\", \"getrandbits\", \"choices\",\n           \"SystemRandom\"]\n\nNV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)\nTWOPI = 2.0*_pi\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n\n\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\n\nimport _random\n\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods:  random(), seed(), getstate(), and setstate().\n    Optionally, implement a getrandbits() method so that randrange()\n    can cover arbitrarily large ranges.\n\n    \"\"\"\n\n    VERSION = 3     # used by getstate/setstate\n\n    def __init__(self, x=None):\n        \"\"\"Initialize an instance.\n\n        Optional argument x controls seeding, as for Random.seed().\n        \"\"\"\n\n        self.seed(x)\n        self.gauss_next = None\n\n    def __init_subclass__(cls, /, **kwargs):\n        \"\"\"Control how subclasses generate random integers.\n\n        The algorithm a subclass can use depends on the random() and/or\n        getrandbits() implementation available to it and determines\n        whether it can generate random integers from arbitrarily large\n        ranges.\n        \"\"\"\n\n        for c in cls.__mro__:\n            if '_randbelow' in c.__dict__:\n                # just inherit it\n                break\n            if 'getrandbits' in c.__dict__:\n                cls._randbelow = cls._randbelow_with_getrandbits\n                break\n            if 'random' in c.__dict__:\n                cls._randbelow = cls._randbelow_without_getrandbits\n                break\n\n    def seed(self, a=None, version=2):\n        \"\"\"Initialize internal state from hashable object.\n\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n\n        If *a* is an int, all bits are used.\n\n        For version 2 (the default), all of the bits are used if *a* is a str,\n        bytes, or bytearray.  For version 1 (provided for reproducing random\n        sequences from older versions of Python), the algorithm for str and\n        bytes generates a narrower range of seeds.\n\n        \"\"\"\n\n        if version == 1 and isinstance(a, (str, bytes)):\n            a = a.decode('latin-1') if isinstance(a, bytes) else a\n            x = ord(a[0]) << 7 if a else 0\n            for c in map(ord, a):\n                x = ((1000003 * x) ^ c) & 0xFFFFFFFFFFFFFFFF\n            x ^= len(a)\n            a = -2 if x == -1 else x\n\n        if version == 2 and isinstance(a, (str, bytes, bytearray)):\n            if isinstance(a, str):\n                a = a.encode()\n            a += _sha512(a).digest()\n            a = int.from_bytes(a, 'big')\n\n        super().seed(a)\n        self.gauss_next = None\n\n    def getstate(self):\n        \"\"\"Return internal state; can be passed to setstate() later.\"\"\"\n        return self.VERSION, super().getstate(), self.gauss_next\n\n    def setstate(self, state):\n        \"\"\"Restore internal state from object returned by getstate().\"\"\"\n        version = state[0]\n        if version == 3:\n            version, internalstate, self.gauss_next = state\n            super().setstate(internalstate)\n        elif version == 2:\n            version, internalstate, self.gauss_next = state\n            # In version 2, the state was saved as signed ints, which causes\n            #   inconsistencies between 32/64-bit systems. The state is\n            #   really unsigned 32-bit ints, so we convert negative ints from\n            #   version 2 to positive longs for version 3.\n            try:\n                internalstate = tuple(x % (2**32) for x in internalstate)\n            except ValueError as e:\n                raise TypeError from e\n            super().setstate(internalstate)\n        else:\n            raise ValueError(\"state with version %s passed to \"\n                             \"Random.setstate() of version %s\" %\n                             (version, self.VERSION))\n\n## ---- Methods below this point do not need to be overridden when\n## ---- subclassing for the purpose of using a different core generator.\n\n## -------------------- pickle support  -------------------\n\n    # Issue 17489: Since __reduce__ was defined to fix #759889 this is no\n    # longer called; we leave it here because it has been here since random was\n    # rewritten back in 2001 and why risk breaking something.\n    def __getstate__(self): # for pickle\n        return self.getstate()\n\n    def __setstate__(self, state):  # for pickle\n        self.setstate(state)\n\n    def __reduce__(self):\n        return self.__class__, (), self.getstate()\n\n## -------------------- integer methods  -------------------\n\n    def randrange(self, start, stop=None, step=1, _int=int):\n        \"\"\"Choose a random item from range(start, stop[, step]).\n\n        This fixes the problem with randint() which includes the\n        endpoint; in Python this is usually not what you want.\n\n        \"\"\"\n\n        # This code is a bit messy to make it fast for the\n        # common case while still doing adequate error checking.\n        istart = _int(start)\n        if istart != start:\n            raise ValueError(\"non-integer arg 1 for randrange()\")\n        if stop is None:\n            if istart > 0:\n                return self._randbelow(istart)\n            raise ValueError(\"empty range for randrange()\")\n\n        # stop argument supplied.\n        istop = _int(stop)\n        if istop != stop:\n            raise ValueError(\"non-integer stop for randrange()\")\n        width = istop - istart\n        if step == 1 and width > 0:\n            return istart + self._randbelow(width)\n        if step == 1:\n            raise ValueError(\"empty range for randrange() (%d, %d, %d)\" % (istart, istop, width))\n\n        # Non-unit step argument supplied.\n        istep = _int(step)\n        if istep != step:\n            raise ValueError(\"non-integer step for randrange()\")\n        if istep > 0:\n            n = (width + istep - 1) // istep\n        elif istep < 0:\n            n = (width + istep + 1) // istep\n        else:\n            raise ValueError(\"zero step for randrange()\")\n\n        if n <= 0:\n            raise ValueError(\"empty range for randrange()\")\n\n        return istart + istep*self._randbelow(n)\n\n    def randint(self, a, b):\n        \"\"\"Return random integer in range [a, b], including both end points.\n        \"\"\"\n\n        return self.randrange(a, b+1)\n\n    def _randbelow_with_getrandbits(self, n):\n        \"Return a random int in the range [0,n).  Raises ValueError if n==0.\"\n\n        getrandbits = self.getrandbits\n        k = n.bit_length()  # don't use (n-1) here because n can be 1\n        r = getrandbits(k)          # 0 <= r < 2**k\n        while r >= n:\n            r = getrandbits(k)\n        return r\n\n    def _randbelow_without_getrandbits(self, n, int=int, maxsize=1<<BPF):\n        \"\"\"Return a random int in the range [0,n).  Raises ValueError if n==0.\n\n        The implementation does not use getrandbits, but only random.\n        \"\"\"\n\n        random = self.random\n        if n >= maxsize:\n            _warn(\"Underlying random() generator does not supply \\n\"\n                \"enough bits to choose from a population range this large.\\n\"\n                \"To remove the range limitation, add a getrandbits() method.\")\n            return int(random() * n)\n        if n == 0:\n            raise ValueError(\"Boundary cannot be zero\")\n        rem = maxsize % n\n        limit = (maxsize - rem) / maxsize   # int(limit * maxsize) % n == 0\n        r = random()\n        while r >= limit:\n            r = random()\n        return int(r*maxsize) % n\n\n    _randbelow = _randbelow_with_getrandbits\n\n## -------------------- sequence methods  -------------------\n\n    def choice(self, seq):\n        \"\"\"Choose a random element from a non-empty sequence.\"\"\"\n        try:\n            i = self._randbelow(len(seq))\n        except ValueError:\n            raise IndexError('Cannot choose from an empty sequence') from None\n        return seq[i]\n\n    def shuffle(self, x, random=None):\n        \"\"\"Shuffle list x in place, and return None.\n\n        Optional argument random is a 0-argument function returning a\n        random float in [0.0, 1.0); if it is the default None, the\n        standard random.random will be used.\n\n        \"\"\"\n\n        if random is None:\n            randbelow = self._randbelow\n            for i in reversed(range(1, len(x))):\n                # pick an element in x[:i+1] with which to exchange x[i]\n                j = randbelow(i+1)\n                x[i], x[j] = x[j], x[i]\n        else:\n            _int = int\n            for i in reversed(range(1, len(x))):\n                # pick an element in x[:i+1] with which to exchange x[i]\n                j = _int(random() * (i+1))\n                x[i], x[j] = x[j], x[i]\n\n    def sample(self, population, k):\n        \"\"\"Chooses k unique random elements from a population sequence or set.\n\n        Returns a new list containing elements from the population while\n        leaving the original population unchanged.  The resulting list is\n        in selection order so that all sub-slices will also be valid random\n        samples.  This allows raffle winners (the sample) to be partitioned\n        into grand prize and second place winners (the subslices).\n\n        Members of the population need not be hashable or unique.  If the\n        population contains repeats, then each occurrence is a possible\n        selection in the sample.\n\n        To choose a sample in a range of integers, use range as an argument.\n        This is especially fast and space efficient for sampling from a\n        large population:   sample(range(10000000), 60)\n        \"\"\"\n\n        # Sampling without replacement entails tracking either potential\n        # selections (the pool) in a list or previous selections in a set.\n\n        # When the number of selections is small compared to the\n        # population, then tracking selections is efficient, requiring\n        # only a small set and an occasional reselection.  For\n        # a larger number of selections, the pool tracking method is\n        # preferred since the list takes less space than the\n        # set and it doesn't suffer from frequent reselections.\n\n        # The number of calls to _randbelow() is kept at or near k, the\n        # theoretical minimum.  This is important because running time\n        # is dominated by _randbelow() and because it extracts the\n        # least entropy from the underlying random number generators.\n\n        # Memory requirements are kept to the smaller of a k-length\n        # set or an n-length list.\n\n        # There are other sampling algorithms that do not require\n        # auxiliary memory, but they were rejected because they made\n        # too many calls to _randbelow(), making them slower and\n        # causing them to eat more entropy than necessary.\n\n        if isinstance(population, _Set):\n            population = tuple(population)\n        if not isinstance(population, _Sequence):\n            raise TypeError(\"Population must be a sequence or set.  For dicts, use list(d).\")\n        randbelow = self._randbelow\n        n = len(population)\n        if not 0 <= k <= n:\n            raise ValueError(\"Sample larger than population or is negative\")\n        result = [None] * k\n        setsize = 21        # size of a small set minus size of an empty list\n        if k > 5:\n            setsize += 4 ** _ceil(_log(k * 3, 4)) # table size for big sets\n        if n <= setsize:\n            # An n-length list is smaller than a k-length set\n            pool = list(population)\n            for i in range(k):         # invariant:  non-selected at [0,n-i)\n                j = randbelow(n-i)\n                result[i] = pool[j]\n                pool[j] = pool[n-i-1]   # move non-selected item into vacancy\n        else:\n            selected = set()\n            selected_add = selected.add\n            for i in range(k):\n                j = randbelow(n)\n                while j in selected:\n                    j = randbelow(n)\n                selected_add(j)\n                result[i] = population[j]\n        return result\n\n    def choices(self, population, weights=None, *, cum_weights=None, k=1):\n        \"\"\"Return a k sized list of population elements chosen with replacement.\n\n        If the relative weights or cumulative weights are not specified,\n        the selections are made with equal probability.\n\n        \"\"\"\n        random = self.random\n        n = len(population)\n        if cum_weights is None:\n            if weights is None:\n                _int = int\n                n += 0.0    # convert to float for a small speed improvement\n                return [population[_int(random() * n)] for i in _repeat(None, k)]\n            cum_weights = list(_accumulate(weights))\n        elif weights is not None:\n            raise TypeError('Cannot specify both weights and cumulative weights')\n        if len(cum_weights) != n:\n            raise ValueError('The number of weights does not match the population')\n        bisect = _bisect\n        total = cum_weights[-1] + 0.0   # convert to float\n        hi = n - 1\n        return [population[bisect(cum_weights, random() * total, 0, hi)]\n                for i in _repeat(None, k)]\n\n## -------------------- real-valued distributions  -------------------\n\n## -------------------- uniform distribution -------------------\n\n    def uniform(self, a, b):\n        \"Get a random number in the range [a, b) or [a, b] depending on rounding.\"\n        return a + (b-a) * self.random()\n\n## -------------------- triangular --------------------\n\n    def triangular(self, low=0.0, high=1.0, mode=None):\n        \"\"\"Triangular distribution.\n\n        Continuous distribution bounded by given lower and upper limits,\n        and having a given mode value in-between.\n\n        http://en.wikipedia.org/wiki/Triangular_distribution\n\n        \"\"\"\n        u = self.random()\n        try:\n            c = 0.5 if mode is None else (mode - low) / (high - low)\n        except ZeroDivisionError:\n            return low\n        if u > c:\n            u = 1.0 - u\n            c = 1.0 - c\n            low, high = high, low\n        return low + (high - low) * _sqrt(u * c)\n\n## -------------------- normal distribution --------------------\n\n    def normalvariate(self, mu, sigma):\n        \"\"\"Normal distribution.\n\n        mu is the mean, and sigma is the standard deviation.\n\n        \"\"\"\n        # mu = mean, sigma = standard deviation\n\n        # Uses Kinderman and Monahan method. Reference: Kinderman,\n        # A.J. and Monahan, J.F., \"Computer generation of random\n        # variables using the ratio of uniform deviates\", ACM Trans\n        # Math Software, 3, (1977), pp257-260.\n\n        random = self.random\n        while 1:\n            u1 = random()\n            u2 = 1.0 - random()\n            z = NV_MAGICCONST*(u1-0.5)/u2\n            zz = z*z/4.0\n            if zz <= -_log(u2):\n                break\n        return mu + z*sigma\n\n## -------------------- lognormal distribution --------------------\n\n    def lognormvariate(self, mu, sigma):\n        \"\"\"Log normal distribution.\n\n        If you take the natural logarithm of this distribution, you'll get a\n        normal distribution with mean mu and standard deviation sigma.\n        mu can have any value, and sigma must be greater than zero.\n\n        \"\"\"\n        return _exp(self.normalvariate(mu, sigma))\n\n## -------------------- exponential distribution --------------------\n\n    def expovariate(self, lambd):\n        \"\"\"Exponential distribution.\n\n        lambd is 1.0 divided by the desired mean.  It should be\n        nonzero.  (The parameter would be called \"lambda\", but that is\n        a reserved word in Python.)  Returned values range from 0 to\n        positive infinity if lambd is positive, and from negative\n        infinity to 0 if lambd is negative.\n\n        \"\"\"\n        # lambd: rate lambd = 1/mean\n        # ('lambda' is a Python reserved word)\n\n        # we use 1-random() instead of random() to preclude the\n        # possibility of taking the log of zero.\n        return -_log(1.0 - self.random())/lambd\n\n## -------------------- von Mises distribution --------------------\n\n    def vonmisesvariate(self, mu, kappa):\n        \"\"\"Circular data distribution.\n\n        mu is the mean angle, expressed in radians between 0 and 2*pi, and\n        kappa is the concentration parameter, which must be greater than or\n        equal to zero.  If kappa is equal to zero, this distribution reduces\n        to a uniform random angle over the range 0 to 2*pi.\n\n        \"\"\"\n        # mu:    mean angle (in radians between 0 and 2*pi)\n        # kappa: concentration parameter kappa (>= 0)\n        # if kappa = 0 generate uniform random angle\n\n        # Based upon an algorithm published in: Fisher, N.I.,\n        # \"Statistical Analysis of Circular Data\", Cambridge\n        # University Press, 1993.\n\n        # Thanks to Magnus Kessler for a correction to the\n        # implementation of step 4.\n\n        random = self.random\n        if kappa <= 1e-6:\n            return TWOPI * random()\n\n        s = 0.5 / kappa\n        r = s + _sqrt(1.0 + s * s)\n\n        while 1:\n            u1 = random()\n            z = _cos(_pi * u1)\n\n            d = z / (r + z)\n            u2 = random()\n            if u2 < 1.0 - d * d or u2 <= (1.0 - d) * _exp(d):\n                break\n\n        q = 1.0 / r\n        f = (q + z) / (1.0 + q * z)\n        u3 = random()\n        if u3 > 0.5:\n            theta = (mu + _acos(f)) % TWOPI\n        else:\n            theta = (mu - _acos(f)) % TWOPI\n\n        return theta\n\n## -------------------- gamma distribution --------------------\n\n    def gammavariate(self, alpha, beta):\n        \"\"\"Gamma distribution.  Not the gamma function!\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n\n        The probability distribution function is:\n\n                    x ** (alpha - 1) * math.exp(-x / beta)\n          pdf(x) =  --------------------------------------\n                      math.gamma(alpha) * beta ** alpha\n\n        \"\"\"\n\n        # alpha > 0, beta > 0, mean is alpha*beta, variance is alpha*beta**2\n\n        # Warning: a few older sources define the gamma distribution in terms\n        # of alpha > -1.0\n        if alpha <= 0.0 or beta <= 0.0:\n            raise ValueError('gammavariate: alpha and beta must be > 0.0')\n\n        random = self.random\n        if alpha > 1.0:\n\n            # Uses R.C.H. Cheng, \"The generation of Gamma\n            # variables with non-integral shape parameters\",\n            # Applied Statistics, (1977), 26, No. 1, p71-74\n\n            ainv = _sqrt(2.0 * alpha - 1.0)\n            bbb = alpha - LOG4\n            ccc = alpha + ainv\n\n            while 1:\n                u1 = random()\n                if not 1e-7 < u1 < .9999999:\n                    continue\n                u2 = 1.0 - random()\n                v = _log(u1/(1.0-u1))/ainv\n                x = alpha*_exp(v)\n                z = u1*u1*u2\n                r = bbb+ccc*v-x\n                if r + SG_MAGICCONST - 4.5*z >= 0.0 or r >= _log(z):\n                    return x * beta\n\n        elif alpha == 1.0:\n            # expovariate(1/beta)\n            return -_log(1.0 - random()) * beta\n\n        else:   # alpha is between 0 and 1 (exclusive)\n\n            # Uses ALGORITHM GS of Statistical Computing - Kennedy & Gentle\n\n            while 1:\n                u = random()\n                b = (_e + alpha)/_e\n                p = b*u\n                if p <= 1.0:\n                    x = p ** (1.0/alpha)\n                else:\n                    x = -_log((b-p)/alpha)\n                u1 = random()\n                if p > 1.0:\n                    if u1 <= x ** (alpha - 1.0):\n                        break\n                elif u1 <= _exp(-x):\n                    break\n            return x * beta\n\n## -------------------- Gauss (faster alternative) --------------------\n\n    def gauss(self, mu, sigma):\n        \"\"\"Gaussian distribution.\n\n        mu is the mean, and sigma is the standard deviation.  This is\n        slightly faster than the normalvariate() function.\n\n        Not thread-safe without a lock around calls.\n\n        \"\"\"\n\n        # When x and y are two variables from [0, 1), uniformly\n        # distributed, then\n        #\n        #    cos(2*pi*x)*sqrt(-2*log(1-y))\n        #    sin(2*pi*x)*sqrt(-2*log(1-y))\n        #\n        # are two *independent* variables with normal distribution\n        # (mu = 0, sigma = 1).\n        # (Lambert Meertens)\n        # (corrected version; bug discovered by Mike Miller, fixed by LM)\n\n        # Multithreading note: When two threads call this function\n        # simultaneously, it is possible that they will receive the\n        # same return value.  The window is very small though.  To\n        # avoid this, you have to use a lock around all calls.  (I\n        # didn't want to slow this down in the serial case by using a\n        # lock here.)\n\n        random = self.random\n        z = self.gauss_next\n        self.gauss_next = None\n        if z is None:\n            x2pi = random() * TWOPI\n            g2rad = _sqrt(-2.0 * _log(1.0 - random()))\n            z = _cos(x2pi) * g2rad\n            self.gauss_next = _sin(x2pi) * g2rad\n\n        return mu + z*sigma\n\n## -------------------- beta --------------------\n## See\n## http://mail.python.org/pipermail/python-bugs-list/2001-January/003752.html\n## for Ivan Frohne's insightful analysis of why the original implementation:\n##\n##    def betavariate(self, alpha, beta):\n##        # Discrete Event Simulation in C, pp 87-88.\n##\n##        y = self.expovariate(alpha)\n##        z = self.expovariate(1.0/beta)\n##        return z/(y+z)\n##\n## was dead wrong, and how it probably got that way.\n\n    def betavariate(self, alpha, beta):\n        \"\"\"Beta distribution.\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n        Returned values range between 0 and 1.\n\n        \"\"\"\n\n        # This version due to Janne Sinkkonen, and matches all the std\n        # texts (e.g., Knuth Vol 2 Ed 3 pg 134 \"the beta distribution\").\n        y = self.gammavariate(alpha, 1.0)\n        if y == 0:\n            return 0.0\n        else:\n            return y / (y + self.gammavariate(beta, 1.0))\n\n## -------------------- Pareto --------------------\n\n    def paretovariate(self, alpha):\n        \"\"\"Pareto distribution.  alpha is the shape parameter.\"\"\"\n        # Jain, pg. 495\n\n        u = 1.0 - self.random()\n        return 1.0 / u ** (1.0/alpha)\n\n## -------------------- Weibull --------------------\n\n    def weibullvariate(self, alpha, beta):\n        \"\"\"Weibull distribution.\n\n        alpha is the scale parameter and beta is the shape parameter.\n\n        \"\"\"\n        # Jain, pg. 499; bug fix courtesy Bill Arms\n\n        u = 1.0 - self.random()\n        return alpha * (-_log(u)) ** (1.0/beta)\n\n## --------------- Operating System Random Source  ------------------\n\nclass SystemRandom(Random):\n    \"\"\"Alternate random number generator using sources provided\n    by the operating system (such as /dev/urandom on Unix or\n    CryptGenRandom on Windows).\n\n     Not available on all systems (see os.urandom() for details).\n    \"\"\"\n\n    def random(self):\n        \"\"\"Get the next random number in the range [0.0, 1.0).\"\"\"\n        return (int.from_bytes(_urandom(7), 'big') >> 3) * RECIP_BPF\n\n    def getrandbits(self, k):\n        \"\"\"getrandbits(k) -> x.  Generates an int with k random bits.\"\"\"\n        if k <= 0:\n            raise ValueError('number of bits must be greater than zero')\n        numbytes = (k + 7) // 8                       # bits / 8 and rounded up\n        x = int.from_bytes(_urandom(numbytes), 'big')\n        return x >> (numbytes * 8 - k)                # trim excess bits\n\n    def seed(self, *args, **kwds):\n        \"Stub method.  Not used for a system random number generator.\"\n        return None\n\n    def _notimplemented(self, *args, **kwds):\n        \"Method should not be called for a system random number generator.\"\n        raise NotImplementedError('System entropy source does not have state.')\n    getstate = setstate = _notimplemented\n\n## -------------------- test program --------------------\n\ndef _test_generator(n, func, args):\n    import time\n    print(n, 'times', func.__name__)\n    total = 0.0\n    sqsum = 0.0\n    smallest = 1e10\n    largest = -1e10\n    t0 = time.perf_counter()\n    for i in range(n):\n        x = func(*args)\n        total += x\n        sqsum = sqsum + x*x\n        smallest = min(x, smallest)\n        largest = max(x, largest)\n    t1 = time.perf_counter()\n    print(round(t1-t0, 3), 'sec,', end=' ')\n    avg = total/n\n    stddev = _sqrt(sqsum/n - avg*avg)\n    print('avg %g, stddev %g, min %g, max %g\\n' % \\\n              (avg, stddev, smallest, largest))\n\n\ndef _test(N=2000):\n    _test_generator(N, random, ())\n    _test_generator(N, normalvariate, (0.0, 1.0))\n    _test_generator(N, lognormvariate, (0.0, 1.0))\n    _test_generator(N, vonmisesvariate, (0.0, 1.0))\n    _test_generator(N, gammavariate, (0.01, 1.0))\n    _test_generator(N, gammavariate, (0.1, 1.0))\n    _test_generator(N, gammavariate, (0.1, 2.0))\n    _test_generator(N, gammavariate, (0.5, 1.0))\n    _test_generator(N, gammavariate, (0.9, 1.0))\n    _test_generator(N, gammavariate, (1.0, 1.0))\n    _test_generator(N, gammavariate, (2.0, 1.0))\n    _test_generator(N, gammavariate, (20.0, 1.0))\n    _test_generator(N, gammavariate, (200.0, 1.0))\n    _test_generator(N, gauss, (0.0, 1.0))\n    _test_generator(N, betavariate, (3.0, 3.0))\n    _test_generator(N, triangular, (0.0, 1.0, 1.0/3.0))\n\n# Create one instance, seeded from current time, and export its methods\n# as module-level functions.  The functions share state across all uses\n#(both in the user's code and in the Python libraries), but that's fine\n# for most programs and is easier for the casual user than making them\n# instantiate their own Random() instance.\n\n_inst = Random()\nseed = _inst.seed\nrandom = _inst.random\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\n\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\n\n\nif __name__ == '__main__':\n    _test()\n", 815], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py": ["# Module 'ntpath' -- common operations on WinNT/Win95 pathnames\n\"\"\"Common pathname manipulations, WindowsNT/95 version.\n\nInstead of importing this module directly, import os and refer to this\nmodule as os.path.\n\"\"\"\n\n# strings representing various path-related bits and pieces\n# These are primarily for export; internally, they are hardcoded.\n# Should be set before imports for resolving cyclic dependency.\ncurdir = '.'\npardir = '..'\nextsep = '.'\nsep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\n\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\", \"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n           \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\",\n           \"extsep\",\"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\",\n           \"samefile\", \"sameopenfile\", \"samestat\", \"commonpath\"]\n\ndef _get_bothseps(path):\n    if isinstance(path, bytes):\n        return b'\\\\/'\n    else:\n        return '\\\\/'\n\n# Normalize the case of a pathname and map slashes to backslashes.\n# Other normalizations (such as optimizing '../' away) are not done\n# (this is done by normpath).\n\ndef normcase(s):\n    \"\"\"Normalize case of pathname.\n\n    Makes all characters lowercase and all slashes into backslashes.\"\"\"\n    s = os.fspath(s)\n    if isinstance(s, bytes):\n        return s.replace(b'/', b'\\\\').lower()\n    else:\n        return s.replace('/', '\\\\').lower()\n\n\n# Return whether a path is absolute.\n# Trivial in Posix, harder on Windows.\n# For Windows it is absolute if it starts with a slash or backslash (current\n# volume), or if a pathname after the volume-letter-and-colon or UNC-resource\n# starts with a slash or backslash.\n\ndef isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    # Paths beginning with \\\\?\\ are always absolute, but do not\n    # necessarily contain a drive.\n    if isinstance(s, bytes):\n        if s.replace(b'/', b'\\\\').startswith(b'\\\\\\\\?\\\\'):\n            return True\n    else:\n        if s.replace('/', '\\\\').startswith('\\\\\\\\?\\\\'):\n            return True\n    s = splitdrive(s)[1]\n    return len(s) > 0 and s[0] in _get_bothseps(s)\n\n\n# Join two (or more) paths.\ndef join(path, *paths):\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        seps = b'\\\\/'\n        colon = b':'\n    else:\n        sep = '\\\\'\n        seps = '\\\\/'\n        colon = ':'\n    try:\n        if not paths:\n            path[:0] + sep  #23780: Ensure compatible data type even if p is null.\n        result_drive, result_path = splitdrive(path)\n        for p in map(os.fspath, paths):\n            p_drive, p_path = splitdrive(p)\n            if p_path and p_path[0] in seps:\n                # Second path is absolute\n                if p_drive or not result_drive:\n                    result_drive = p_drive\n                result_path = p_path\n                continue\n            elif p_drive and p_drive != result_drive:\n                if p_drive.lower() != result_drive.lower():\n                    # Different drives => ignore the first path entirely\n                    result_drive = p_drive\n                    result_path = p_path\n                    continue\n                # Same drive in different case\n                result_drive = p_drive\n            # Second path is relative to the first\n            if result_path and result_path[-1] not in seps:\n                result_path = result_path + sep\n            result_path = result_path + p_path\n        ## add separator between UNC and non-absolute path\n        if (result_path and result_path[0] not in seps and\n            result_drive and result_drive[-1:] != colon):\n            return result_drive + sep + result_path\n        return result_drive + result_path\n    except (TypeError, AttributeError, BytesWarning):\n        genericpath._check_arg_types('join', path, *paths)\n        raise\n\n\n# Split a path in a drive specification (a drive letter followed by a\n# colon) and the path specification.\n# It is always true that drivespec + pathspec == p\ndef splitdrive(p):\n    \"\"\"Split a pathname into drive/UNC sharepoint and relative path specifiers.\n    Returns a 2-tuple (drive_or_unc, path); either part may be empty.\n\n    If you assign\n        result = splitdrive(p)\n    It is always true that:\n        result[0] + result[1] == p\n\n    If the path contained a drive letter, drive_or_unc will contain everything\n    up to and including the colon.  e.g. splitdrive(\"c:/dir\") returns (\"c:\", \"/dir\")\n\n    If the path contained a UNC path, the drive_or_unc will contain the host name\n    and share up to but not including the fourth directory separator character.\n    e.g. splitdrive(\"//host/computer/dir\") returns (\"//host/computer\", \"/dir\")\n\n    Paths cannot contain both a drive letter and a UNC path.\n\n    \"\"\"\n    p = os.fspath(p)\n    if len(p) >= 2:\n        if isinstance(p, bytes):\n            sep = b'\\\\'\n            altsep = b'/'\n            colon = b':'\n        else:\n            sep = '\\\\'\n            altsep = '/'\n            colon = ':'\n        normp = p.replace(altsep, sep)\n        if (normp[0:2] == sep*2) and (normp[2:3] != sep):\n            # is a UNC path:\n            # vvvvvvvvvvvvvvvvvvvv drive letter or UNC path\n            # \\\\machine\\mountpoint\\directory\\etc\\...\n            #           directory ^^^^^^^^^^^^^^^\n            index = normp.find(sep, 2)\n            if index == -1:\n                return p[:0], p\n            index2 = normp.find(sep, index + 1)\n            # a UNC path can't have two slashes in a row\n            # (after the initial two)\n            if index2 == index + 1:\n                return p[:0], p\n            if index2 == -1:\n                index2 = len(p)\n            return p[:index2], p[index2:]\n        if normp[1:2] == colon:\n            return p[:2], p[2:]\n    return p[:0], p\n\n\n# Split a path in head (everything up to the last '/') and tail (the\n# rest).  After the trailing '/' is stripped, the invariant\n# join(head, tail) == p holds.\n# The resulting head won't end in '/' unless it is the root.\n\ndef split(p):\n    \"\"\"Split a pathname.\n\n    Return tuple (head, tail) where tail is everything after the final slash.\n    Either part may be empty.\"\"\"\n    p = os.fspath(p)\n    seps = _get_bothseps(p)\n    d, p = splitdrive(p)\n    # set i to index beyond p's last slash\n    i = len(p)\n    while i and p[i-1] not in seps:\n        i -= 1\n    head, tail = p[:i], p[i:]  # now tail has no slashes\n    # remove trailing slashes from head, unless it's all slashes\n    head = head.rstrip(seps) or head\n    return d + head, tail\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\ndef splitext(p):\n    p = os.fspath(p)\n    if isinstance(p, bytes):\n        return genericpath._splitext(p, b'\\\\', b'/', b'.')\n    else:\n        return genericpath._splitext(p, '\\\\', '/', '.')\nsplitext.__doc__ = genericpath._splitext.__doc__\n\n\n# Return the tail (basename) part of a path.\n\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    return split(p)[1]\n\n\n# Return the head (dirname) part of a path.\n\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    return split(p)[0]\n\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn't exist.\n\ndef islink(path):\n    \"\"\"Test whether a path is a symbolic link.\n    This will always return false for Windows prior to 6.0.\n    \"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, ValueError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n\n# Being true for dangling symbolic links is also useful.\n\ndef lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, ValueError):\n        return False\n    return True\n\n# Is a path a mount point?\n# Any drive letter root (eg c:\\)\n# Any share UNC (eg \\\\server\\share)\n# Any volume mounted on a filesystem folder\n#\n# No one method detects all three situations. Historically we've lexically\n# detected drive letter roots and share UNCs. The canonical approach to\n# detecting mounted volumes (querying the reparse tag) fails for the most\n# common case: drive letter roots. The alternative which uses GetVolumePathName\n# fails if the drive letter is the result of a SUBST.\ntry:\n    from nt import _getvolumepathname\nexcept ImportError:\n    _getvolumepathname = None\ndef ismount(path):\n    \"\"\"Test whether a path is a mount point (a drive root, the root of a\n    share, or a mounted volume)\"\"\"\n    path = os.fspath(path)\n    seps = _get_bothseps(path)\n    path = abspath(path)\n    root, rest = splitdrive(path)\n    if root and root[0] in seps:\n        return (not rest) or (rest in seps)\n    if rest in seps:\n        return True\n\n    if _getvolumepathname:\n        return path.rstrip(seps) == _getvolumepathname(path).rstrip(seps)\n    else:\n        return False\n\n\n# Expand paths beginning with '~' or '~user'.\n# '~' means $HOME; '~user' means that user's home directory.\n# If the path doesn't begin with '~', or if the user or $HOME is unknown,\n# the path is returned unchanged (leaving error reporting to whatever\n# function is called with the expanded path as argument).\n# See also module 'glob' for expansion of *, ? and [...] in pathnames.\n# (A function should also be defined to do full *sh-style environment\n# variable expansion.)\n\ndef expanduser(path):\n    \"\"\"Expand ~ and ~user constructs.\n\n    If user or $HOME is unknown, do nothing.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        tilde = b'~'\n    else:\n        tilde = '~'\n    if not path.startswith(tilde):\n        return path\n    i, n = 1, len(path)\n    while i < n and path[i] not in _get_bothseps(path):\n        i += 1\n\n    if 'USERPROFILE' in os.environ:\n        userhome = os.environ['USERPROFILE']\n    elif not 'HOMEPATH' in os.environ:\n        return path\n    else:\n        try:\n            drive = os.environ['HOMEDRIVE']\n        except KeyError:\n            drive = ''\n        userhome = join(drive, os.environ['HOMEPATH'])\n\n    if isinstance(path, bytes):\n        userhome = os.fsencode(userhome)\n\n    if i != 1: #~user\n        userhome = join(dirname(userhome), path[1:i])\n\n    return userhome + path[i:]\n\n\n# Expand paths containing shell variable substitutions.\n# The following rules apply:\n#       - no expansion within single quotes\n#       - '$$' is translated into '$'\n#       - '%%' is translated into '%' if '%%' are not seen in %var1%%var2%\n#       - ${varname} is accepted.\n#       - $varname is accepted.\n#       - %varname% is accepted.\n#       - varnames can be made out of letters, digits and the characters '_-'\n#         (though is not verified in the ${varname} and %varname% cases)\n# XXX With COMMAND.COM you can use any characters in a variable name,\n# XXX except '^|<>='.\n\ndef expandvars(path):\n    \"\"\"Expand shell variables of the forms $var, ${var} and %var%.\n\n    Unknown variables are left unchanged.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        if b'$' not in path and b'%' not in path:\n            return path\n        import string\n        varchars = bytes(string.ascii_letters + string.digits + '_-', 'ascii')\n        quote = b'\\''\n        percent = b'%'\n        brace = b'{'\n        rbrace = b'}'\n        dollar = b'$'\n        environ = getattr(os, 'environb', None)\n    else:\n        if '$' not in path and '%' not in path:\n            return path\n        import string\n        varchars = string.ascii_letters + string.digits + '_-'\n        quote = '\\''\n        percent = '%'\n        brace = '{'\n        rbrace = '}'\n        dollar = '$'\n        environ = os.environ\n    res = path[:0]\n    index = 0\n    pathlen = len(path)\n    while index < pathlen:\n        c = path[index:index+1]\n        if c == quote:   # no expansion within single quotes\n            path = path[index + 1:]\n            pathlen = len(path)\n            try:\n                index = path.index(c)\n                res += c + path[:index + 1]\n            except ValueError:\n                res += c + path\n                index = pathlen - 1\n        elif c == percent:  # variable or '%'\n            if path[index + 1:index + 2] == percent:\n                res += c\n                index += 1\n            else:\n                path = path[index+1:]\n                pathlen = len(path)\n                try:\n                    index = path.index(percent)\n                except ValueError:\n                    res += percent + path\n                    index = pathlen - 1\n                else:\n                    var = path[:index]\n                    try:\n                        if environ is None:\n                            value = os.fsencode(os.environ[os.fsdecode(var)])\n                        else:\n                            value = environ[var]\n                    except KeyError:\n                        value = percent + var + percent\n                    res += value\n        elif c == dollar:  # variable or '$$'\n            if path[index + 1:index + 2] == dollar:\n                res += c\n                index += 1\n            elif path[index + 1:index + 2] == brace:\n                path = path[index+2:]\n                pathlen = len(path)\n                try:\n                    index = path.index(rbrace)\n                except ValueError:\n                    res += dollar + brace + path\n                    index = pathlen - 1\n                else:\n                    var = path[:index]\n                    try:\n                        if environ is None:\n                            value = os.fsencode(os.environ[os.fsdecode(var)])\n                        else:\n                            value = environ[var]\n                    except KeyError:\n                        value = dollar + brace + var + rbrace\n                    res += value\n            else:\n                var = path[:0]\n                index += 1\n                c = path[index:index + 1]\n                while c and c in varchars:\n                    var += c\n                    index += 1\n                    c = path[index:index + 1]\n                try:\n                    if environ is None:\n                        value = os.fsencode(os.environ[os.fsdecode(var)])\n                    else:\n                        value = environ[var]\n                except KeyError:\n                    value = dollar + var\n                res += value\n                if c:\n                    index -= 1\n        else:\n            res += c\n        index += 1\n    return res\n\n\n# Normalize a path, e.g. A//B, A/./B and A/foo/../B all become A\\B.\n# Previously, this function also truncated pathnames to 8+3 format,\n# but as this module is called \"ntpath\", that's obviously wrong!\n\ndef normpath(path):\n    \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        altsep = b'/'\n        curdir = b'.'\n        pardir = b'..'\n        special_prefixes = (b'\\\\\\\\.\\\\', b'\\\\\\\\?\\\\')\n    else:\n        sep = '\\\\'\n        altsep = '/'\n        curdir = '.'\n        pardir = '..'\n        special_prefixes = ('\\\\\\\\.\\\\', '\\\\\\\\?\\\\')\n    if path.startswith(special_prefixes):\n        # in the case of paths with these prefixes:\n        # \\\\.\\ -> device names\n        # \\\\?\\ -> literal paths\n        # do not do any normalization, but return the path\n        # unchanged apart from the call to os.fspath()\n        return path\n    path = path.replace(altsep, sep)\n    prefix, path = splitdrive(path)\n\n    # collapse initial backslashes\n    if path.startswith(sep):\n        prefix += sep\n        path = path.lstrip(sep)\n\n    comps = path.split(sep)\n    i = 0\n    while i < len(comps):\n        if not comps[i] or comps[i] == curdir:\n            del comps[i]\n        elif comps[i] == pardir:\n            if i > 0 and comps[i-1] != pardir:\n                del comps[i-1:i+1]\n                i -= 1\n            elif i == 0 and prefix.endswith(sep):\n                del comps[i]\n            else:\n                i += 1\n        else:\n            i += 1\n    # If the path is now empty, substitute '.'\n    if not prefix and not comps:\n        comps.append(curdir)\n    return prefix + sep.join(comps)\n\ndef _abspath_fallback(path):\n    \"\"\"Return the absolute version of a path as a fallback function in case\n    `nt._getfullpathname` is not available or raises OSError. See bpo-31047 for\n    more.\n\n    \"\"\"\n\n    path = os.fspath(path)\n    if not isabs(path):\n        if isinstance(path, bytes):\n            cwd = os.getcwdb()\n        else:\n            cwd = os.getcwd()\n        path = join(cwd, path)\n    return normpath(path)\n\n# Return an absolute path.\ntry:\n    from nt import _getfullpathname\n\nexcept ImportError: # not running on Windows - mock up something sensible\n    abspath = _abspath_fallback\n\nelse:  # use native Windows method on Windows\n    def abspath(path):\n        \"\"\"Return the absolute version of a path.\"\"\"\n        try:\n            return normpath(_getfullpathname(path))\n        except (OSError, ValueError):\n            return _abspath_fallback(path)\n\ntry:\n    from nt import _getfinalpathname, readlink as _nt_readlink\nexcept ImportError:\n    # realpath is a no-op on systems without _getfinalpathname support.\n    realpath = abspath\nelse:\n    def _readlink_deep(path):\n        # These error codes indicate that we should stop reading links and\n        # return the path we currently have.\n        # 1: ERROR_INVALID_FUNCTION\n        # 2: ERROR_FILE_NOT_FOUND\n        # 3: ERROR_DIRECTORY_NOT_FOUND\n        # 5: ERROR_ACCESS_DENIED\n        # 21: ERROR_NOT_READY (implies drive with no media)\n        # 32: ERROR_SHARING_VIOLATION (probably an NTFS paging file)\n        # 50: ERROR_NOT_SUPPORTED (implies no support for reparse points)\n        # 67: ERROR_BAD_NET_NAME (implies remote server unavailable)\n        # 87: ERROR_INVALID_PARAMETER\n        # 4390: ERROR_NOT_A_REPARSE_POINT\n        # 4392: ERROR_INVALID_REPARSE_DATA\n        # 4393: ERROR_REPARSE_TAG_INVALID\n        allowed_winerror = 1, 2, 3, 5, 21, 32, 50, 67, 87, 4390, 4392, 4393\n\n        seen = set()\n        while normcase(path) not in seen:\n            seen.add(normcase(path))\n            try:\n                old_path = path\n                path = _nt_readlink(path)\n                # Links may be relative, so resolve them against their\n                # own location\n                if not isabs(path):\n                    # If it's something other than a symlink, we don't know\n                    # what it's actually going to be resolved against, so\n                    # just return the old path.\n                    if not islink(old_path):\n                        path = old_path\n                        break\n                    path = normpath(join(dirname(old_path), path))\n            except OSError as ex:\n                if ex.winerror in allowed_winerror:\n                    break\n                raise\n            except ValueError:\n                # Stop on reparse points that are not symlinks\n                break\n        return path\n\n    def _getfinalpathname_nonstrict(path):\n        # These error codes indicate that we should stop resolving the path\n        # and return the value we currently have.\n        # 1: ERROR_INVALID_FUNCTION\n        # 2: ERROR_FILE_NOT_FOUND\n        # 3: ERROR_DIRECTORY_NOT_FOUND\n        # 5: ERROR_ACCESS_DENIED\n        # 21: ERROR_NOT_READY (implies drive with no media)\n        # 32: ERROR_SHARING_VIOLATION (probably an NTFS paging file)\n        # 50: ERROR_NOT_SUPPORTED\n        # 67: ERROR_BAD_NET_NAME (implies remote server unavailable)\n        # 87: ERROR_INVALID_PARAMETER\n        # 123: ERROR_INVALID_NAME\n        # 1920: ERROR_CANT_ACCESS_FILE\n        # 1921: ERROR_CANT_RESOLVE_FILENAME (implies unfollowable symlink)\n        allowed_winerror = 1, 2, 3, 5, 21, 32, 50, 67, 87, 123, 1920, 1921\n\n        # Non-strict algorithm is to find as much of the target directory\n        # as we can and join the rest.\n        tail = ''\n        while path:\n            try:\n                path = _getfinalpathname(path)\n                return join(path, tail) if tail else path\n            except OSError as ex:\n                if ex.winerror not in allowed_winerror:\n                    raise\n                try:\n                    # The OS could not resolve this path fully, so we attempt\n                    # to follow the link ourselves. If we succeed, join the tail\n                    # and return.\n                    new_path = _readlink_deep(path)\n                    if new_path != path:\n                        return join(new_path, tail) if tail else new_path\n                except OSError:\n                    # If we fail to readlink(), let's keep traversing\n                    pass\n                path, name = split(path)\n                # TODO (bpo-38186): Request the real file name from the directory\n                # entry using FindFirstFileW. For now, we will return the path\n                # as best we have it\n                if path and not name:\n                    return path + tail\n                tail = join(name, tail) if tail else name\n        return tail\n\n    def realpath(path):\n        path = normpath(path)\n        if isinstance(path, bytes):\n            prefix = b'\\\\\\\\?\\\\'\n            unc_prefix = b'\\\\\\\\?\\\\UNC\\\\'\n            new_unc_prefix = b'\\\\\\\\'\n            cwd = os.getcwdb()\n            # bpo-38081: Special case for realpath(b'nul')\n            if normcase(path) == normcase(os.fsencode(devnull)):\n                return b'\\\\\\\\.\\\\NUL'\n        else:\n            prefix = '\\\\\\\\?\\\\'\n            unc_prefix = '\\\\\\\\?\\\\UNC\\\\'\n            new_unc_prefix = '\\\\\\\\'\n            cwd = os.getcwd()\n            # bpo-38081: Special case for realpath('nul')\n            if normcase(path) == normcase(devnull):\n                return '\\\\\\\\.\\\\NUL'\n        had_prefix = path.startswith(prefix)\n        if not had_prefix and not isabs(path):\n            path = join(cwd, path)\n        try:\n            path = _getfinalpathname(path)\n            initial_winerror = 0\n        except OSError as ex:\n            initial_winerror = ex.winerror\n            path = _getfinalpathname_nonstrict(path)\n        # The path returned by _getfinalpathname will always start with \\\\?\\ -\n        # strip off that prefix unless it was already provided on the original\n        # path.\n        if not had_prefix and path.startswith(prefix):\n            # For UNC paths, the prefix will actually be \\\\?\\UNC\\\n            # Handle that case as well.\n            if path.startswith(unc_prefix):\n                spath = new_unc_prefix + path[len(unc_prefix):]\n            else:\n                spath = path[len(prefix):]\n            # Ensure that the non-prefixed path resolves to the same path\n            try:\n                if _getfinalpathname(spath) == path:\n                    path = spath\n            except OSError as ex:\n                # If the path does not exist and originally did not exist, then\n                # strip the prefix anyway.\n                if ex.winerror == initial_winerror:\n                    path = spath\n        return path\n\n\n# Win9x family and earlier have no Unicode filename support.\nsupports_unicode_filenames = (hasattr(sys, \"getwindowsversion\") and\n                              sys.getwindowsversion()[3] >= 2)\n\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        curdir = b'.'\n        pardir = b'..'\n    else:\n        sep = '\\\\'\n        curdir = '.'\n        pardir = '..'\n\n    if start is None:\n        start = curdir\n\n    if not path:\n        raise ValueError(\"no path specified\")\n\n    start = os.fspath(start)\n    try:\n        start_abs = abspath(normpath(start))\n        path_abs = abspath(normpath(path))\n        start_drive, start_rest = splitdrive(start_abs)\n        path_drive, path_rest = splitdrive(path_abs)\n        if normcase(start_drive) != normcase(path_drive):\n            raise ValueError(\"path is on mount %r, start on mount %r\" % (\n                path_drive, start_drive))\n\n        start_list = [x for x in start_rest.split(sep) if x]\n        path_list = [x for x in path_rest.split(sep) if x]\n        # Work out how much of the filepath is shared by start and path.\n        i = 0\n        for e1, e2 in zip(start_list, path_list):\n            if normcase(e1) != normcase(e2):\n                break\n            i += 1\n\n        rel_list = [pardir] * (len(start_list)-i) + path_list[i:]\n        if not rel_list:\n            return curdir\n        return join(*rel_list)\n    except (TypeError, ValueError, AttributeError, BytesWarning, DeprecationWarning):\n        genericpath._check_arg_types('relpath', path, start)\n        raise\n\n\n# Return the longest common sub-path of the sequence of paths given as input.\n# The function is case-insensitive and 'separator-insensitive', i.e. if the\n# only difference between two paths is the use of '\\' versus '/' as separator,\n# they are deemed to be equal.\n#\n# However, the returned path will have the standard '\\' separator (even if the\n# given paths had the alternative '/' separator) and will have the case of the\n# first path given in the sequence. Additionally, any trailing separator is\n# stripped from the returned path.\n\ndef commonpath(paths):\n    \"\"\"Given a sequence of path names, returns the longest common sub-path.\"\"\"\n\n    if not paths:\n        raise ValueError('commonpath() arg is an empty sequence')\n\n    paths = tuple(map(os.fspath, paths))\n    if isinstance(paths[0], bytes):\n        sep = b'\\\\'\n        altsep = b'/'\n        curdir = b'.'\n    else:\n        sep = '\\\\'\n        altsep = '/'\n        curdir = '.'\n\n    try:\n        drivesplits = [splitdrive(p.replace(altsep, sep).lower()) for p in paths]\n        split_paths = [p.split(sep) for d, p in drivesplits]\n\n        try:\n            isabs, = set(p[:1] == sep for d, p in drivesplits)\n        except ValueError:\n            raise ValueError(\"Can't mix absolute and relative paths\") from None\n\n        # Check that all drive letters or UNC paths match. The check is made only\n        # now otherwise type errors for mixing strings and bytes would not be\n        # caught.\n        if len(set(d for d, p in drivesplits)) != 1:\n            raise ValueError(\"Paths don't have the same drive\")\n\n        drive, path = splitdrive(paths[0].replace(altsep, sep))\n        common = path.split(sep)\n        common = [c for c in common if c and c != curdir]\n\n        split_paths = [[c for c in s if c and c != curdir] for s in split_paths]\n        s1 = min(split_paths)\n        s2 = max(split_paths)\n        for i, c in enumerate(s1):\n            if c != s2[i]:\n                common = common[:i]\n                break\n        else:\n            common = common[:len(s1)]\n\n        prefix = drive + sep if isabs else drive\n        return prefix + sep.join(common)\n    except (TypeError, AttributeError):\n        genericpath._check_arg_types('commonpath', *paths)\n        raise\n\n\ntry:\n    # The genericpath.isdir implementation uses os.stat and checks the mode\n    # attribute to tell whether or not the path is a directory.\n    # This is overkill on Windows - just pass the path to GetFileAttributes\n    # and check the attribute from there.\n    from nt import _isdir as isdir\nexcept ImportError:\n    # Use genericpath.isdir as imported above.\n    pass\n", 794], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py": ["#\n# Module providing the `Process` class which emulates `threading.Thread`\n#\n# multiprocessing/process.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\n__all__ = ['BaseProcess', 'current_process', 'active_children',\n           'parent_process']\n\n#\n# Imports\n#\n\nimport os\nimport sys\nimport signal\nimport itertools\nimport threading\nfrom _weakrefset import WeakSet\n\n#\n#\n#\n\ntry:\n    ORIGINAL_DIR = os.path.abspath(os.getcwd())\nexcept OSError:\n    ORIGINAL_DIR = None\n\n#\n# Public functions\n#\n\ndef current_process():\n    '''\n    Return process object representing the current process\n    '''\n    return _current_process\n\ndef active_children():\n    '''\n    Return list of process objects corresponding to live child processes\n    '''\n    _cleanup()\n    return list(_children)\n\n\ndef parent_process():\n    '''\n    Return process object representing the parent process\n    '''\n    return _parent_process\n\n#\n#\n#\n\ndef _cleanup():\n    # check for processes which have finished\n    for p in list(_children):\n        if p._popen.poll() is not None:\n            _children.discard(p)\n\n#\n# The `Process` class\n#\n\nclass BaseProcess(object):\n    '''\n    Process objects represent activity that is run in a separate process\n\n    The class is analogous to `threading.Thread`\n    '''\n    def _Popen(self):\n        raise NotImplementedError\n\n    def __init__(self, group=None, target=None, name=None, args=(), kwargs={},\n                 *, daemon=None):\n        assert group is None, 'group argument must be None for now'\n        count = next(_process_counter)\n        self._identity = _current_process._identity + (count,)\n        self._config = _current_process._config.copy()\n        self._parent_pid = os.getpid()\n        self._parent_name = _current_process.name\n        self._popen = None\n        self._closed = False\n        self._target = target\n        self._args = tuple(args)\n        self._kwargs = dict(kwargs)\n        self._name = name or type(self).__name__ + '-' + \\\n                     ':'.join(str(i) for i in self._identity)\n        if daemon is not None:\n            self.daemon = daemon\n        _dangling.add(self)\n\n    def _check_closed(self):\n        if self._closed:\n            raise ValueError(\"process object is closed\")\n\n    def run(self):\n        '''\n        Method to be run in sub-process; can be overridden in sub-class\n        '''\n        if self._target:\n            self._target(*self._args, **self._kwargs)\n\n    def start(self):\n        '''\n        Start child process\n        '''\n        self._check_closed()\n        assert self._popen is None, 'cannot start a process twice'\n        assert self._parent_pid == os.getpid(), \\\n               'can only start a process object created by current process'\n        assert not _current_process._config.get('daemon'), \\\n               'daemonic processes are not allowed to have children'\n        _cleanup()\n        self._popen = self._Popen(self)\n        self._sentinel = self._popen.sentinel\n        # Avoid a refcycle if the target function holds an indirect\n        # reference to the process object (see bpo-30775)\n        del self._target, self._args, self._kwargs\n        _children.add(self)\n\n    def terminate(self):\n        '''\n        Terminate process; sends SIGTERM signal or uses TerminateProcess()\n        '''\n        self._check_closed()\n        self._popen.terminate()\n\n    def kill(self):\n        '''\n        Terminate process; sends SIGKILL signal or uses TerminateProcess()\n        '''\n        self._check_closed()\n        self._popen.kill()\n\n    def join(self, timeout=None):\n        '''\n        Wait until child process terminates\n        '''\n        self._check_closed()\n        assert self._parent_pid == os.getpid(), 'can only join a child process'\n        assert self._popen is not None, 'can only join a started process'\n        res = self._popen.wait(timeout)\n        if res is not None:\n            _children.discard(self)\n\n    def is_alive(self):\n        '''\n        Return whether process is alive\n        '''\n        self._check_closed()\n        if self is _current_process:\n            return True\n        assert self._parent_pid == os.getpid(), 'can only test a child process'\n\n        if self._popen is None:\n            return False\n\n        returncode = self._popen.poll()\n        if returncode is None:\n            return True\n        else:\n            _children.discard(self)\n            return False\n\n    def close(self):\n        '''\n        Close the Process object.\n\n        This method releases resources held by the Process object.  It is\n        an error to call this method if the child process is still running.\n        '''\n        if self._popen is not None:\n            if self._popen.poll() is None:\n                raise ValueError(\"Cannot close a process while it is still running. \"\n                                 \"You should first call join() or terminate().\")\n            self._popen.close()\n            self._popen = None\n            del self._sentinel\n            _children.discard(self)\n        self._closed = True\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        assert isinstance(name, str), 'name must be a string'\n        self._name = name\n\n    @property\n    def daemon(self):\n        '''\n        Return whether process is a daemon\n        '''\n        return self._config.get('daemon', False)\n\n    @daemon.setter\n    def daemon(self, daemonic):\n        '''\n        Set whether process is a daemon\n        '''\n        assert self._popen is None, 'process has already started'\n        self._config['daemon'] = daemonic\n\n    @property\n    def authkey(self):\n        return self._config['authkey']\n\n    @authkey.setter\n    def authkey(self, authkey):\n        '''\n        Set authorization key of process\n        '''\n        self._config['authkey'] = AuthenticationString(authkey)\n\n    @property\n    def exitcode(self):\n        '''\n        Return exit code of process or `None` if it has yet to stop\n        '''\n        self._check_closed()\n        if self._popen is None:\n            return self._popen\n        return self._popen.poll()\n\n    @property\n    def ident(self):\n        '''\n        Return identifier (PID) of process or `None` if it has yet to start\n        '''\n        self._check_closed()\n        if self is _current_process:\n            return os.getpid()\n        else:\n            return self._popen and self._popen.pid\n\n    pid = ident\n\n    @property\n    def sentinel(self):\n        '''\n        Return a file descriptor (Unix) or handle (Windows) suitable for\n        waiting for process termination.\n        '''\n        self._check_closed()\n        try:\n            return self._sentinel\n        except AttributeError:\n            raise ValueError(\"process not started\") from None\n\n    def __repr__(self):\n        exitcode = None\n        if self is _current_process:\n            status = 'started'\n        elif self._closed:\n            status = 'closed'\n        elif self._parent_pid != os.getpid():\n            status = 'unknown'\n        elif self._popen is None:\n            status = 'initial'\n        else:\n            exitcode = self._popen.poll()\n            if exitcode is not None:\n                status = 'stopped'\n            else:\n                status = 'started'\n\n        info = [type(self).__name__, 'name=%r' % self._name]\n        if self._popen is not None:\n            info.append('pid=%s' % self._popen.pid)\n        info.append('parent=%s' % self._parent_pid)\n        info.append(status)\n        if exitcode is not None:\n            exitcode = _exitcode_to_name.get(exitcode, exitcode)\n            info.append('exitcode=%s' % exitcode)\n        if self.daemon:\n            info.append('daemon')\n        return '<%s>' % ' '.join(info)\n\n    ##\n\n    def _bootstrap(self, parent_sentinel=None):\n        from . import util, context\n        global _current_process, _parent_process, _process_counter, _children\n\n        try:\n            if self._start_method is not None:\n                context._force_start_method(self._start_method)\n            _process_counter = itertools.count(1)\n            _children = set()\n            util._close_stdin()\n            old_process = _current_process\n            _current_process = self\n            _parent_process = _ParentProcess(\n                self._parent_name, self._parent_pid, parent_sentinel)\n            if threading._HAVE_THREAD_NATIVE_ID:\n                threading.main_thread()._set_native_id()\n            try:\n                util._finalizer_registry.clear()\n                util._run_after_forkers()\n            finally:\n                # delay finalization of the old process object until after\n                # _run_after_forkers() is executed\n                del old_process\n            util.info('child process calling self.run()')\n            try:\n                self.run()\n                exitcode = 0\n            finally:\n                util._exit_function()\n        except SystemExit as e:\n            if not e.args:\n                exitcode = 1\n            elif isinstance(e.args[0], int):\n                exitcode = e.args[0]\n            else:\n                sys.stderr.write(str(e.args[0]) + '\\n')\n                exitcode = 1\n        except:\n            exitcode = 1\n            import traceback\n            sys.stderr.write('Process %s:\\n' % self.name)\n            traceback.print_exc()\n        finally:\n            threading._shutdown()\n            util.info('process exiting with exitcode %d' % exitcode)\n            util._flush_std_streams()\n\n        return exitcode\n\n#\n# We subclass bytes to avoid accidental transmission of auth keys over network\n#\n\nclass AuthenticationString(bytes):\n    def __reduce__(self):\n        from .context import get_spawning_popen\n        if get_spawning_popen() is None:\n            raise TypeError(\n                'Pickling an AuthenticationString object is '\n                'disallowed for security reasons'\n                )\n        return AuthenticationString, (bytes(self),)\n\n\n#\n# Create object representing the parent process\n#\n\nclass _ParentProcess(BaseProcess):\n\n    def __init__(self, name, pid, sentinel):\n        self._identity = ()\n        self._name = name\n        self._pid = pid\n        self._parent_pid = None\n        self._popen = None\n        self._closed = False\n        self._sentinel = sentinel\n        self._config = {}\n\n    def is_alive(self):\n        from multiprocessing.connection import wait\n        return not wait([self._sentinel], timeout=0)\n\n    @property\n    def ident(self):\n        return self._pid\n\n    def join(self, timeout=None):\n        '''\n        Wait until parent process terminates\n        '''\n        from multiprocessing.connection import wait\n        wait([self._sentinel], timeout=timeout)\n\n    pid = ident\n\n#\n# Create object representing the main process\n#\n\nclass _MainProcess(BaseProcess):\n\n    def __init__(self):\n        self._identity = ()\n        self._name = 'MainProcess'\n        self._parent_pid = None\n        self._popen = None\n        self._closed = False\n        self._config = {'authkey': AuthenticationString(os.urandom(32)),\n                        'semprefix': '/mp'}\n        # Note that some versions of FreeBSD only allow named\n        # semaphores to have names of up to 14 characters.  Therefore\n        # we choose a short prefix.\n        #\n        # On MacOSX in a sandbox it may be necessary to use a\n        # different prefix -- see #19478.\n        #\n        # Everything in self._config will be inherited by descendant\n        # processes.\n\n    def close(self):\n        pass\n\n\n_parent_process = None\n_current_process = _MainProcess()\n_process_counter = itertools.count(1)\n_children = set()\ndel _MainProcess\n\n#\n# Give names to some return codes\n#\n\n_exitcode_to_name = {}\n\nfor name, signum in list(signal.__dict__.items()):\n    if name[:3]=='SIG' and '_' not in name:\n        _exitcode_to_name[-signum] = f'-{name}'\n\n# For debug and leak testing\n_dangling = WeakSet()\n", 432], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py": ["#\n# Module providing various facilities to other parts of the package\n#\n# multiprocessing/util.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\nimport os\nimport itertools\nimport sys\nimport weakref\nimport atexit\nimport threading        # we want threading to install it's\n                        # cleanup function before multiprocessing does\nfrom subprocess import _args_from_interpreter_flags\n\nfrom . import process\n\n__all__ = [\n    'sub_debug', 'debug', 'info', 'sub_warning', 'get_logger',\n    'log_to_stderr', 'get_temp_dir', 'register_after_fork',\n    'is_exiting', 'Finalize', 'ForkAwareThreadLock', 'ForkAwareLocal',\n    'close_all_fds_except', 'SUBDEBUG', 'SUBWARNING',\n    ]\n\n#\n# Logging\n#\n\nNOTSET = 0\nSUBDEBUG = 5\nDEBUG = 10\nINFO = 20\nSUBWARNING = 25\n\nLOGGER_NAME = 'multiprocessing'\nDEFAULT_LOGGING_FORMAT = '[%(levelname)s/%(processName)s] %(message)s'\n\n_logger = None\n_log_to_stderr = False\n\ndef sub_debug(msg, *args):\n    if _logger:\n        _logger.log(SUBDEBUG, msg, *args)\n\ndef debug(msg, *args):\n    if _logger:\n        _logger.log(DEBUG, msg, *args)\n\ndef info(msg, *args):\n    if _logger:\n        _logger.log(INFO, msg, *args)\n\ndef sub_warning(msg, *args):\n    if _logger:\n        _logger.log(SUBWARNING, msg, *args)\n\ndef get_logger():\n    '''\n    Returns logger used by multiprocessing\n    '''\n    global _logger\n    import logging\n\n    logging._acquireLock()\n    try:\n        if not _logger:\n\n            _logger = logging.getLogger(LOGGER_NAME)\n            _logger.propagate = 0\n\n            # XXX multiprocessing should cleanup before logging\n            if hasattr(atexit, 'unregister'):\n                atexit.unregister(_exit_function)\n                atexit.register(_exit_function)\n            else:\n                atexit._exithandlers.remove((_exit_function, (), {}))\n                atexit._exithandlers.append((_exit_function, (), {}))\n\n    finally:\n        logging._releaseLock()\n\n    return _logger\n\ndef log_to_stderr(level=None):\n    '''\n    Turn on logging and add a handler which prints to stderr\n    '''\n    global _log_to_stderr\n    import logging\n\n    logger = get_logger()\n    formatter = logging.Formatter(DEFAULT_LOGGING_FORMAT)\n    handler = logging.StreamHandler()\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n\n    if level:\n        logger.setLevel(level)\n    _log_to_stderr = True\n    return _logger\n\n\n# Abstract socket support\n\ndef _platform_supports_abstract_sockets():\n    if sys.platform == \"linux\":\n        return True\n    if hasattr(sys, 'getandroidapilevel'):\n        return True\n    return False\n\n\ndef is_abstract_socket_namespace(address):\n    if not address:\n        return False\n    if isinstance(address, bytes):\n        return address[0] == 0\n    elif isinstance(address, str):\n        return address[0] == \"\\0\"\n    raise TypeError('address type of {address!r} unrecognized')\n\n\nabstract_sockets_supported = _platform_supports_abstract_sockets()\n\n#\n# Function returning a temp directory which will be removed on exit\n#\n\ndef _remove_temp_dir(rmtree, tempdir):\n    rmtree(tempdir)\n\n    current_process = process.current_process()\n    # current_process() can be None if the finalizer is called\n    # late during Python finalization\n    if current_process is not None:\n        current_process._config['tempdir'] = None\n\ndef get_temp_dir():\n    # get name of a temp directory which will be automatically cleaned up\n    tempdir = process.current_process()._config.get('tempdir')\n    if tempdir is None:\n        import shutil, tempfile\n        tempdir = tempfile.mkdtemp(prefix='pymp-')\n        info('created temp directory %s', tempdir)\n        # keep a strong reference to shutil.rmtree(), since the finalizer\n        # can be called late during Python shutdown\n        Finalize(None, _remove_temp_dir, args=(shutil.rmtree, tempdir),\n                 exitpriority=-100)\n        process.current_process()._config['tempdir'] = tempdir\n    return tempdir\n\n#\n# Support for reinitialization of objects when bootstrapping a child process\n#\n\n_afterfork_registry = weakref.WeakValueDictionary()\n_afterfork_counter = itertools.count()\n\ndef _run_after_forkers():\n    items = list(_afterfork_registry.items())\n    items.sort()\n    for (index, ident, func), obj in items:\n        try:\n            func(obj)\n        except Exception as e:\n            info('after forker raised exception %s', e)\n\ndef register_after_fork(obj, func):\n    _afterfork_registry[(next(_afterfork_counter), id(obj), func)] = obj\n\n#\n# Finalization using weakrefs\n#\n\n_finalizer_registry = {}\n_finalizer_counter = itertools.count()\n\n\nclass Finalize(object):\n    '''\n    Class which supports object finalization using weakrefs\n    '''\n    def __init__(self, obj, callback, args=(), kwargs=None, exitpriority=None):\n        if (exitpriority is not None) and not isinstance(exitpriority,int):\n            raise TypeError(\n                \"Exitpriority ({0!r}) must be None or int, not {1!s}\".format(\n                    exitpriority, type(exitpriority)))\n\n        if obj is not None:\n            self._weakref = weakref.ref(obj, self)\n        elif exitpriority is None:\n            raise ValueError(\"Without object, exitpriority cannot be None\")\n\n        self._callback = callback\n        self._args = args\n        self._kwargs = kwargs or {}\n        self._key = (exitpriority, next(_finalizer_counter))\n        self._pid = os.getpid()\n\n        _finalizer_registry[self._key] = self\n\n    def __call__(self, wr=None,\n                 # Need to bind these locally because the globals can have\n                 # been cleared at shutdown\n                 _finalizer_registry=_finalizer_registry,\n                 sub_debug=sub_debug, getpid=os.getpid):\n        '''\n        Run the callback unless it has already been called or cancelled\n        '''\n        try:\n            del _finalizer_registry[self._key]\n        except KeyError:\n            sub_debug('finalizer no longer registered')\n        else:\n            if self._pid != getpid():\n                sub_debug('finalizer ignored because different process')\n                res = None\n            else:\n                sub_debug('finalizer calling %s with args %s and kwargs %s',\n                          self._callback, self._args, self._kwargs)\n                res = self._callback(*self._args, **self._kwargs)\n            self._weakref = self._callback = self._args = \\\n                            self._kwargs = self._key = None\n            return res\n\n    def cancel(self):\n        '''\n        Cancel finalization of the object\n        '''\n        try:\n            del _finalizer_registry[self._key]\n        except KeyError:\n            pass\n        else:\n            self._weakref = self._callback = self._args = \\\n                            self._kwargs = self._key = None\n\n    def still_active(self):\n        '''\n        Return whether this finalizer is still waiting to invoke callback\n        '''\n        return self._key in _finalizer_registry\n\n    def __repr__(self):\n        try:\n            obj = self._weakref()\n        except (AttributeError, TypeError):\n            obj = None\n\n        if obj is None:\n            return '<%s object, dead>' % self.__class__.__name__\n\n        x = '<%s object, callback=%s' % (\n                self.__class__.__name__,\n                getattr(self._callback, '__name__', self._callback))\n        if self._args:\n            x += ', args=' + str(self._args)\n        if self._kwargs:\n            x += ', kwargs=' + str(self._kwargs)\n        if self._key[0] is not None:\n            x += ', exitpriority=' + str(self._key[0])\n        return x + '>'\n\n\ndef _run_finalizers(minpriority=None):\n    '''\n    Run all finalizers whose exit priority is not None and at least minpriority\n\n    Finalizers with highest priority are called first; finalizers with\n    the same priority will be called in reverse order of creation.\n    '''\n    if _finalizer_registry is None:\n        # This function may be called after this module's globals are\n        # destroyed.  See the _exit_function function in this module for more\n        # notes.\n        return\n\n    if minpriority is None:\n        f = lambda p : p[0] is not None\n    else:\n        f = lambda p : p[0] is not None and p[0] >= minpriority\n\n    # Careful: _finalizer_registry may be mutated while this function\n    # is running (either by a GC run or by another thread).\n\n    # list(_finalizer_registry) should be atomic, while\n    # list(_finalizer_registry.items()) is not.\n    keys = [key for key in list(_finalizer_registry) if f(key)]\n    keys.sort(reverse=True)\n\n    for key in keys:\n        finalizer = _finalizer_registry.get(key)\n        # key may have been removed from the registry\n        if finalizer is not None:\n            sub_debug('calling %s', finalizer)\n            try:\n                finalizer()\n            except Exception:\n                import traceback\n                traceback.print_exc()\n\n    if minpriority is None:\n        _finalizer_registry.clear()\n\n#\n# Clean up on exit\n#\n\ndef is_exiting():\n    '''\n    Returns true if the process is shutting down\n    '''\n    return _exiting or _exiting is None\n\n_exiting = False\n\ndef _exit_function(info=info, debug=debug, _run_finalizers=_run_finalizers,\n                   active_children=process.active_children,\n                   current_process=process.current_process):\n    # We hold on to references to functions in the arglist due to the\n    # situation described below, where this function is called after this\n    # module's globals are destroyed.\n\n    global _exiting\n\n    if not _exiting:\n        _exiting = True\n\n        info('process shutting down')\n        debug('running all \"atexit\" finalizers with priority >= 0')\n        _run_finalizers(0)\n\n        if current_process() is not None:\n            # We check if the current process is None here because if\n            # it's None, any call to ``active_children()`` will raise\n            # an AttributeError (active_children winds up trying to\n            # get attributes from util._current_process).  One\n            # situation where this can happen is if someone has\n            # manipulated sys.modules, causing this module to be\n            # garbage collected.  The destructor for the module type\n            # then replaces all values in the module dict with None.\n            # For instance, after setuptools runs a test it replaces\n            # sys.modules with a copy created earlier.  See issues\n            # #9775 and #15881.  Also related: #4106, #9205, and\n            # #9207.\n\n            for p in active_children():\n                if p.daemon:\n                    info('calling terminate() for daemon %s', p.name)\n                    p._popen.terminate()\n\n            for p in active_children():\n                info('calling join() for process %s', p.name)\n                p.join()\n\n        debug('running the remaining \"atexit\" finalizers')\n        _run_finalizers()\n\natexit.register(_exit_function)\n\n#\n# Some fork aware types\n#\n\nclass ForkAwareThreadLock(object):\n    def __init__(self):\n        self._reset()\n        register_after_fork(self, ForkAwareThreadLock._reset)\n\n    def _reset(self):\n        self._lock = threading.Lock()\n        self.acquire = self._lock.acquire\n        self.release = self._lock.release\n\n    def __enter__(self):\n        return self._lock.__enter__()\n\n    def __exit__(self, *args):\n        return self._lock.__exit__(*args)\n\n\nclass ForkAwareLocal(threading.local):\n    def __init__(self):\n        register_after_fork(self, lambda obj : obj.__dict__.clear())\n    def __reduce__(self):\n        return type(self), ()\n\n#\n# Close fds except those specified\n#\n\ntry:\n    MAXFD = os.sysconf(\"SC_OPEN_MAX\")\nexcept Exception:\n    MAXFD = 256\n\ndef close_all_fds_except(fds):\n    fds = list(fds) + [-1, MAXFD]\n    fds.sort()\n    assert fds[-1] == MAXFD, 'fd too large'\n    for i in range(len(fds) - 1):\n        os.closerange(fds[i]+1, fds[i+1])\n#\n# Close sys.stdin and replace stdin with os.devnull\n#\n\ndef _close_stdin():\n    if sys.stdin is None:\n        return\n\n    try:\n        sys.stdin.close()\n    except (OSError, ValueError):\n        pass\n\n    try:\n        fd = os.open(os.devnull, os.O_RDONLY)\n        try:\n            sys.stdin = open(fd, closefd=False)\n        except:\n            os.close(fd)\n            raise\n    except (OSError, ValueError):\n        pass\n\n#\n# Flush standard streams, if any\n#\n\ndef _flush_std_streams():\n    try:\n        sys.stdout.flush()\n    except (AttributeError, ValueError):\n        pass\n    try:\n        sys.stderr.flush()\n    except (AttributeError, ValueError):\n        pass\n\n#\n# Start a program with only specified fds kept open\n#\n\ndef spawnv_passfds(path, args, passfds):\n    import _posixsubprocess\n    passfds = tuple(sorted(map(int, passfds)))\n    errpipe_read, errpipe_write = os.pipe()\n    try:\n        return _posixsubprocess.fork_exec(\n            args, [os.fsencode(path)], True, passfds, None, None,\n            -1, -1, -1, -1, -1, -1, errpipe_read, errpipe_write,\n            False, False, None)\n    finally:\n        os.close(errpipe_read)\n        os.close(errpipe_write)\n\n\ndef close_fds(*fds):\n    \"\"\"Close each file descriptor given as an argument\"\"\"\n    for fd in fds:\n        os.close(fd)\n\n\ndef _cleanup_tests():\n    \"\"\"Cleanup multiprocessing resources when multiprocessing tests\n    completed.\"\"\"\n\n    from test import support\n\n    # cleanup multiprocessing\n    process._cleanup()\n\n    # Stop the ForkServer process if it's running\n    from multiprocessing import forkserver\n    forkserver._forkserver._stop()\n\n    # Stop the ResourceTracker process if it's running\n    from multiprocessing import resource_tracker\n    resource_tracker._resource_tracker._stop()\n\n    # bpo-37421: Explicitly call _run_finalizers() to remove immediately\n    # temporary directories created by multiprocessing.util.get_temp_dir().\n    _run_finalizers()\n    support.gc_collect()\n\n    support.reap_children()\n", 489], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py": ["\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"\n\nimport os as _os\nimport sys as _sys\nimport _thread\n\nfrom time import monotonic as _time\nfrom _weakrefset import WeakSet\nfrom itertools import islice as _islice, count as _count\ntry:\n    from _collections import deque as _deque\nexcept ImportError:\n    from collections import deque as _deque\n\n# Note regarding PEP 8 compliant names\n#  This threading model was originally inspired by Java, and inherited\n# the convention of camelCase function and method names from that\n# language. Those original names are not in any imminent danger of\n# being deprecated (even for Py3k),so this module provides them as an\n# alias for the PEP 8 compliant names\n# Note that using the new PEP 8 compliant names facilitates substitution\n# with the multiprocessing module, which doesn't provide the old\n# Java inspired names.\n\n__all__ = ['get_ident', 'active_count', 'Condition', 'current_thread',\n           'enumerate', 'main_thread', 'TIMEOUT_MAX',\n           'Event', 'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Thread',\n           'Barrier', 'BrokenBarrierError', 'Timer', 'ThreadError',\n           'setprofile', 'settrace', 'local', 'stack_size',\n           'excepthook', 'ExceptHookArgs']\n\n# Rename some stuff so \"from threading import *\" is safe\n_start_new_thread = _thread.start_new_thread\n_allocate_lock = _thread.allocate_lock\n_set_sentinel = _thread._set_sentinel\nget_ident = _thread.get_ident\ntry:\n    get_native_id = _thread.get_native_id\n    _HAVE_THREAD_NATIVE_ID = True\n    __all__.append('get_native_id')\nexcept AttributeError:\n    _HAVE_THREAD_NATIVE_ID = False\nThreadError = _thread.error\ntry:\n    _CRLock = _thread.RLock\nexcept AttributeError:\n    _CRLock = None\nTIMEOUT_MAX = _thread.TIMEOUT_MAX\ndel _thread\n\n\n# Support for profile and trace hooks\n\n_profile_hook = None\n_trace_hook = None\n\ndef setprofile(func):\n    \"\"\"Set a profile function for all threads started from the threading module.\n\n    The func will be passed to sys.setprofile() for each thread, before its\n    run() method is called.\n\n    \"\"\"\n    global _profile_hook\n    _profile_hook = func\n\ndef settrace(func):\n    \"\"\"Set a trace function for all threads started from the threading module.\n\n    The func will be passed to sys.settrace() for each thread, before its run()\n    method is called.\n\n    \"\"\"\n    global _trace_hook\n    _trace_hook = func\n\n# Synchronization classes\n\nLock = _allocate_lock\n\ndef RLock(*args, **kwargs):\n    \"\"\"Factory function that returns a new reentrant lock.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it again\n    without blocking; the thread must release it once for each time it has\n    acquired it.\n\n    \"\"\"\n    if _CRLock is None:\n        return _PyRLock(*args, **kwargs)\n    return _CRLock(*args, **kwargs)\n\nclass _RLock:\n    \"\"\"This class implements reentrant lock objects.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it\n    again without blocking; the thread must release it once for each time it\n    has acquired it.\n\n    \"\"\"\n\n    def __init__(self):\n        self._block = _allocate_lock()\n        self._owner = None\n        self._count = 0\n\n    def __repr__(self):\n        owner = self._owner\n        try:\n            owner = _active[owner].name\n        except KeyError:\n            pass\n        return \"<%s %s.%s object owner=%r count=%d at %s>\" % (\n            \"locked\" if self._block.locked() else \"unlocked\",\n            self.__class__.__module__,\n            self.__class__.__qualname__,\n            owner,\n            self._count,\n            hex(id(self))\n        )\n\n    def acquire(self, blocking=True, timeout=-1):\n        \"\"\"Acquire a lock, blocking or non-blocking.\n\n        When invoked without arguments: if this thread already owns the lock,\n        increment the recursion level by one, and return immediately. Otherwise,\n        if another thread owns the lock, block until the lock is unlocked. Once\n        the lock is unlocked (not owned by any thread), then grab ownership, set\n        the recursion level to one, and return. If more than one thread is\n        blocked waiting until the lock is unlocked, only one at a time will be\n        able to grab ownership of the lock. There is no return value in this\n        case.\n\n        When invoked with the blocking argument set to true, do the same thing\n        as when called without arguments, and return true.\n\n        When invoked with the blocking argument set to false, do not block. If a\n        call without an argument would block, return false immediately;\n        otherwise, do the same thing as when called without arguments, and\n        return true.\n\n        When invoked with the floating-point timeout argument set to a positive\n        value, block for at most the number of seconds specified by timeout\n        and as long as the lock cannot be acquired.  Return true if the lock has\n        been acquired, false if the timeout has elapsed.\n\n        \"\"\"\n        me = get_ident()\n        if self._owner == me:\n            self._count += 1\n            return 1\n        rc = self._block.acquire(blocking, timeout)\n        if rc:\n            self._owner = me\n            self._count = 1\n        return rc\n\n    __enter__ = acquire\n\n    def release(self):\n        \"\"\"Release a lock, decrementing the recursion level.\n\n        If after the decrement it is zero, reset the lock to unlocked (not owned\n        by any thread), and if any other threads are blocked waiting for the\n        lock to become unlocked, allow exactly one of them to proceed. If after\n        the decrement the recursion level is still nonzero, the lock remains\n        locked and owned by the calling thread.\n\n        Only call this method when the calling thread owns the lock. A\n        RuntimeError is raised if this method is called when the lock is\n        unlocked.\n\n        There is no return value.\n\n        \"\"\"\n        if self._owner != get_ident():\n            raise RuntimeError(\"cannot release un-acquired lock\")\n        self._count = count = self._count - 1\n        if not count:\n            self._owner = None\n            self._block.release()\n\n    def __exit__(self, t, v, tb):\n        self.release()\n\n    # Internal methods used by condition variables\n\n    def _acquire_restore(self, state):\n        self._block.acquire()\n        self._count, self._owner = state\n\n    def _release_save(self):\n        if self._count == 0:\n            raise RuntimeError(\"cannot release un-acquired lock\")\n        count = self._count\n        self._count = 0\n        owner = self._owner\n        self._owner = None\n        self._block.release()\n        return (count, owner)\n\n    def _is_owned(self):\n        return self._owner == get_ident()\n\n_PyRLock = _RLock\n\n\nclass Condition:\n    \"\"\"Class that implements a condition variable.\n\n    A condition variable allows one or more threads to wait until they are\n    notified by another thread.\n\n    If the lock argument is given and not None, it must be a Lock or RLock\n    object, and it is used as the underlying lock. Otherwise, a new RLock object\n    is created and used as the underlying lock.\n\n    \"\"\"\n\n    def __init__(self, lock=None):\n        if lock is None:\n            lock = RLock()\n        self._lock = lock\n        # Export the lock's acquire() and release() methods\n        self.acquire = lock.acquire\n        self.release = lock.release\n        # If the lock defines _release_save() and/or _acquire_restore(),\n        # these override the default implementations (which just call\n        # release() and acquire() on the lock).  Ditto for _is_owned().\n        try:\n            self._release_save = lock._release_save\n        except AttributeError:\n            pass\n        try:\n            self._acquire_restore = lock._acquire_restore\n        except AttributeError:\n            pass\n        try:\n            self._is_owned = lock._is_owned\n        except AttributeError:\n            pass\n        self._waiters = _deque()\n\n    def __enter__(self):\n        return self._lock.__enter__()\n\n    def __exit__(self, *args):\n        return self._lock.__exit__(*args)\n\n    def __repr__(self):\n        return \"<Condition(%s, %d)>\" % (self._lock, len(self._waiters))\n\n    def _release_save(self):\n        self._lock.release()           # No state to save\n\n    def _acquire_restore(self, x):\n        self._lock.acquire()           # Ignore saved state\n\n    def _is_owned(self):\n        # Return True if lock is owned by current_thread.\n        # This method is called only if _lock doesn't have _is_owned().\n        if self._lock.acquire(0):\n            self._lock.release()\n            return False\n        else:\n            return True\n\n    def wait(self, timeout=None):\n        \"\"\"Wait until notified or until a timeout occurs.\n\n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n\n        This method releases the underlying lock, and then blocks until it is\n        awakened by a notify() or notify_all() call for the same condition\n        variable in another thread, or until the optional timeout occurs. Once\n        awakened or timed out, it re-acquires the lock and returns.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        When the underlying lock is an RLock, it is not released using its\n        release() method, since this may not actually unlock the lock when it\n        was acquired multiple times recursively. Instead, an internal interface\n        of the RLock class is used, which really unlocks it even when it has\n        been recursively acquired several times. Another internal interface is\n        then used to restore the recursion level when the lock is reacquired.\n\n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot wait on un-acquired lock\")\n        waiter = _allocate_lock()\n        waiter.acquire()\n        self._waiters.append(waiter)\n        saved_state = self._release_save()\n        gotit = False\n        try:    # restore state no matter what (e.g., KeyboardInterrupt)\n            if timeout is None:\n                waiter.acquire()\n                gotit = True\n            else:\n                if timeout > 0:\n                    gotit = waiter.acquire(True, timeout)\n                else:\n                    gotit = waiter.acquire(False)\n            return gotit\n        finally:\n            self._acquire_restore(saved_state)\n            if not gotit:\n                try:\n                    self._waiters.remove(waiter)\n                except ValueError:\n                    pass\n\n    def wait_for(self, predicate, timeout=None):\n        \"\"\"Wait until a condition evaluates to True.\n\n        predicate should be a callable which result will be interpreted as a\n        boolean value.  A timeout may be provided giving the maximum time to\n        wait.\n\n        \"\"\"\n        endtime = None\n        waittime = timeout\n        result = predicate()\n        while not result:\n            if waittime is not None:\n                if endtime is None:\n                    endtime = _time() + waittime\n                else:\n                    waittime = endtime - _time()\n                    if waittime <= 0:\n                        break\n            self.wait(waittime)\n            result = predicate()\n        return result\n\n    def notify(self, n=1):\n        \"\"\"Wake up one or more threads waiting on this condition, if any.\n\n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n\n        This method wakes up at most n of the threads waiting for the condition\n        variable; it is a no-op if no threads are waiting.\n\n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot notify on un-acquired lock\")\n        all_waiters = self._waiters\n        waiters_to_notify = _deque(_islice(all_waiters, n))\n        if not waiters_to_notify:\n            return\n        for waiter in waiters_to_notify:\n            waiter.release()\n            try:\n                all_waiters.remove(waiter)\n            except ValueError:\n                pass\n\n    def notify_all(self):\n        \"\"\"Wake up all threads waiting on this condition.\n\n        If the calling thread has not acquired the lock when this method\n        is called, a RuntimeError is raised.\n\n        \"\"\"\n        self.notify(len(self._waiters))\n\n    notifyAll = notify_all\n\n\nclass Semaphore:\n    \"\"\"This class implements semaphore objects.\n\n    Semaphores manage a counter representing the number of release() calls minus\n    the number of acquire() calls, plus an initial value. The acquire() method\n    blocks if necessary until it can return without making the counter\n    negative. If not given, value defaults to 1.\n\n    \"\"\"\n\n    # After Tim Peters' semaphore class, but not quite the same (no maximum)\n\n    def __init__(self, value=1):\n        if value < 0:\n            raise ValueError(\"semaphore initial value must be >= 0\")\n        self._cond = Condition(Lock())\n        self._value = value\n\n    def acquire(self, blocking=True, timeout=None):\n        \"\"\"Acquire a semaphore, decrementing the internal counter by one.\n\n        When invoked without arguments: if the internal counter is larger than\n        zero on entry, decrement it by one and return immediately. If it is zero\n        on entry, block, waiting until some other thread has called release() to\n        make it larger than zero. This is done with proper interlocking so that\n        if multiple acquire() calls are blocked, release() will wake exactly one\n        of them up. The implementation may pick one at random, so the order in\n        which blocked threads are awakened should not be relied on. There is no\n        return value in this case.\n\n        When invoked with blocking set to true, do the same thing as when called\n        without arguments, and return true.\n\n        When invoked with blocking set to false, do not block. If a call without\n        an argument would block, return false immediately; otherwise, do the\n        same thing as when called without arguments, and return true.\n\n        When invoked with a timeout other than None, it will block for at\n        most timeout seconds.  If acquire does not complete successfully in\n        that interval, return false.  Return true otherwise.\n\n        \"\"\"\n        if not blocking and timeout is not None:\n            raise ValueError(\"can't specify timeout for non-blocking acquire\")\n        rc = False\n        endtime = None\n        with self._cond:\n            while self._value == 0:\n                if not blocking:\n                    break\n                if timeout is not None:\n                    if endtime is None:\n                        endtime = _time() + timeout\n                    else:\n                        timeout = endtime - _time()\n                        if timeout <= 0:\n                            break\n                self._cond.wait(timeout)\n            else:\n                self._value -= 1\n                rc = True\n        return rc\n\n    __enter__ = acquire\n\n    def release(self):\n        \"\"\"Release a semaphore, incrementing the internal counter by one.\n\n        When the counter is zero on entry and another thread is waiting for it\n        to become larger than zero again, wake up that thread.\n\n        \"\"\"\n        with self._cond:\n            self._value += 1\n            self._cond.notify()\n\n    def __exit__(self, t, v, tb):\n        self.release()\n\n\nclass BoundedSemaphore(Semaphore):\n    \"\"\"Implements a bounded semaphore.\n\n    A bounded semaphore checks to make sure its current value doesn't exceed its\n    initial value. If it does, ValueError is raised. In most situations\n    semaphores are used to guard resources with limited capacity.\n\n    If the semaphore is released too many times it's a sign of a bug. If not\n    given, value defaults to 1.\n\n    Like regular semaphores, bounded semaphores manage a counter representing\n    the number of release() calls minus the number of acquire() calls, plus an\n    initial value. The acquire() method blocks if necessary until it can return\n    without making the counter negative. If not given, value defaults to 1.\n\n    \"\"\"\n\n    def __init__(self, value=1):\n        Semaphore.__init__(self, value)\n        self._initial_value = value\n\n    def release(self):\n        \"\"\"Release a semaphore, incrementing the internal counter by one.\n\n        When the counter is zero on entry and another thread is waiting for it\n        to become larger than zero again, wake up that thread.\n\n        If the number of releases exceeds the number of acquires,\n        raise a ValueError.\n\n        \"\"\"\n        with self._cond:\n            if self._value >= self._initial_value:\n                raise ValueError(\"Semaphore released too many times\")\n            self._value += 1\n            self._cond.notify()\n\n\nclass Event:\n    \"\"\"Class implementing event objects.\n\n    Events manage a flag that can be set to true with the set() method and reset\n    to false with the clear() method. The wait() method blocks until the flag is\n    true.  The flag is initially false.\n\n    \"\"\"\n\n    # After Tim Peters' event class (without is_posted())\n\n    def __init__(self):\n        self._cond = Condition(Lock())\n        self._flag = False\n\n    def _reset_internal_locks(self):\n        # private!  called by Thread._reset_internal_locks by _after_fork()\n        self._cond.__init__(Lock())\n\n    def is_set(self):\n        \"\"\"Return true if and only if the internal flag is true.\"\"\"\n        return self._flag\n\n    isSet = is_set\n\n    def set(self):\n        \"\"\"Set the internal flag to true.\n\n        All threads waiting for it to become true are awakened. Threads\n        that call wait() once the flag is true will not block at all.\n\n        \"\"\"\n        with self._cond:\n            self._flag = True\n            self._cond.notify_all()\n\n    def clear(self):\n        \"\"\"Reset the internal flag to false.\n\n        Subsequently, threads calling wait() will block until set() is called to\n        set the internal flag to true again.\n\n        \"\"\"\n        with self._cond:\n            self._flag = False\n\n    def wait(self, timeout=None):\n        \"\"\"Block until the internal flag is true.\n\n        If the internal flag is true on entry, return immediately. Otherwise,\n        block until another thread calls set() to set the flag to true, or until\n        the optional timeout occurs.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        This method returns the internal flag on exit, so it will always return\n        True except if a timeout is given and the operation times out.\n\n        \"\"\"\n        with self._cond:\n            signaled = self._flag\n            if not signaled:\n                signaled = self._cond.wait(timeout)\n            return signaled\n\n\n# A barrier class.  Inspired in part by the pthread_barrier_* api and\n# the CyclicBarrier class from Java.  See\n# http://sourceware.org/pthreads-win32/manual/pthread_barrier_init.html and\n# http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/\n#        CyclicBarrier.html\n# for information.\n# We maintain two main states, 'filling' and 'draining' enabling the barrier\n# to be cyclic.  Threads are not allowed into it until it has fully drained\n# since the previous cycle.  In addition, a 'resetting' state exists which is\n# similar to 'draining' except that threads leave with a BrokenBarrierError,\n# and a 'broken' state in which all threads get the exception.\nclass Barrier:\n    \"\"\"Implements a Barrier.\n\n    Useful for synchronizing a fixed number of threads at known synchronization\n    points.  Threads block on 'wait()' and are simultaneously awoken once they\n    have all made that call.\n\n    \"\"\"\n\n    def __init__(self, parties, action=None, timeout=None):\n        \"\"\"Create a barrier, initialised to 'parties' threads.\n\n        'action' is a callable which, when supplied, will be called by one of\n        the threads after they have all entered the barrier and just prior to\n        releasing them all. If a 'timeout' is provided, it is used as the\n        default for all subsequent 'wait()' calls.\n\n        \"\"\"\n        self._cond = Condition(Lock())\n        self._action = action\n        self._timeout = timeout\n        self._parties = parties\n        self._state = 0 #0 filling, 1, draining, -1 resetting, -2 broken\n        self._count = 0\n\n    def wait(self, timeout=None):\n        \"\"\"Wait for the barrier.\n\n        When the specified number of threads have started waiting, they are all\n        simultaneously awoken. If an 'action' was provided for the barrier, one\n        of the threads will have executed that callback prior to returning.\n        Returns an individual index number from 0 to 'parties-1'.\n\n        \"\"\"\n        if timeout is None:\n            timeout = self._timeout\n        with self._cond:\n            self._enter() # Block while the barrier drains.\n            index = self._count\n            self._count += 1\n            try:\n                if index + 1 == self._parties:\n                    # We release the barrier\n                    self._release()\n                else:\n                    # We wait until someone releases us\n                    self._wait(timeout)\n                return index\n            finally:\n                self._count -= 1\n                # Wake up any threads waiting for barrier to drain.\n                self._exit()\n\n    # Block until the barrier is ready for us, or raise an exception\n    # if it is broken.\n    def _enter(self):\n        while self._state in (-1, 1):\n            # It is draining or resetting, wait until done\n            self._cond.wait()\n        #see if the barrier is in a broken state\n        if self._state < 0:\n            raise BrokenBarrierError\n        assert self._state == 0\n\n    # Optionally run the 'action' and release the threads waiting\n    # in the barrier.\n    def _release(self):\n        try:\n            if self._action:\n                self._action()\n            # enter draining state\n            self._state = 1\n            self._cond.notify_all()\n        except:\n            #an exception during the _action handler.  Break and reraise\n            self._break()\n            raise\n\n    # Wait in the barrier until we are released.  Raise an exception\n    # if the barrier is reset or broken.\n    def _wait(self, timeout):\n        if not self._cond.wait_for(lambda : self._state != 0, timeout):\n            #timed out.  Break the barrier\n            self._break()\n            raise BrokenBarrierError\n        if self._state < 0:\n            raise BrokenBarrierError\n        assert self._state == 1\n\n    # If we are the last thread to exit the barrier, signal any threads\n    # waiting for the barrier to drain.\n    def _exit(self):\n        if self._count == 0:\n            if self._state in (-1, 1):\n                #resetting or draining\n                self._state = 0\n                self._cond.notify_all()\n\n    def reset(self):\n        \"\"\"Reset the barrier to the initial state.\n\n        Any threads currently waiting will get the BrokenBarrier exception\n        raised.\n\n        \"\"\"\n        with self._cond:\n            if self._count > 0:\n                if self._state == 0:\n                    #reset the barrier, waking up threads\n                    self._state = -1\n                elif self._state == -2:\n                    #was broken, set it to reset state\n                    #which clears when the last thread exits\n                    self._state = -1\n            else:\n                self._state = 0\n            self._cond.notify_all()\n\n    def abort(self):\n        \"\"\"Place the barrier into a 'broken' state.\n\n        Useful in case of error.  Any currently waiting threads and threads\n        attempting to 'wait()' will have BrokenBarrierError raised.\n\n        \"\"\"\n        with self._cond:\n            self._break()\n\n    def _break(self):\n        # An internal error was detected.  The barrier is set to\n        # a broken state all parties awakened.\n        self._state = -2\n        self._cond.notify_all()\n\n    @property\n    def parties(self):\n        \"\"\"Return the number of threads required to trip the barrier.\"\"\"\n        return self._parties\n\n    @property\n    def n_waiting(self):\n        \"\"\"Return the number of threads currently waiting at the barrier.\"\"\"\n        # We don't need synchronization here since this is an ephemeral result\n        # anyway.  It returns the correct value in the steady state.\n        if self._state == 0:\n            return self._count\n        return 0\n\n    @property\n    def broken(self):\n        \"\"\"Return True if the barrier is in a broken state.\"\"\"\n        return self._state == -2\n\n# exception raised by the Barrier class\nclass BrokenBarrierError(RuntimeError):\n    pass\n\n\n# Helper to generate new thread names\n_counter = _count().__next__\n_counter() # Consume 0 so first non-main thread has id 1.\ndef _newname(template=\"Thread-%d\"):\n    return template % _counter()\n\n# Active thread administration\n_active_limbo_lock = _allocate_lock()\n_active = {}    # maps thread id to Thread object\n_limbo = {}\n_dangling = WeakSet()\n# Set of Thread._tstate_lock locks of non-daemon threads used by _shutdown()\n# to wait until all Python thread states get deleted:\n# see Thread._set_tstate_lock().\n_shutdown_locks_lock = _allocate_lock()\n_shutdown_locks = set()\n\n# Main class for threads\n\nclass Thread:\n    \"\"\"A class that represents a thread of control.\n\n    This class can be safely subclassed in a limited fashion. There are two ways\n    to specify the activity: by passing a callable object to the constructor, or\n    by overriding the run() method in a subclass.\n\n    \"\"\"\n\n    _initialized = False\n\n    def __init__(self, group=None, target=None, name=None,\n                 args=(), kwargs=None, *, daemon=None):\n        \"\"\"This constructor should always be called with keyword arguments. Arguments are:\n\n        *group* should be None; reserved for future extension when a ThreadGroup\n        class is implemented.\n\n        *target* is the callable object to be invoked by the run()\n        method. Defaults to None, meaning nothing is called.\n\n        *name* is the thread name. By default, a unique name is constructed of\n        the form \"Thread-N\" where N is a small decimal number.\n\n        *args* is the argument tuple for the target invocation. Defaults to ().\n\n        *kwargs* is a dictionary of keyword arguments for the target\n        invocation. Defaults to {}.\n\n        If a subclass overrides the constructor, it must make sure to invoke\n        the base class constructor (Thread.__init__()) before doing anything\n        else to the thread.\n\n        \"\"\"\n        assert group is None, \"group argument must be None for now\"\n        if kwargs is None:\n            kwargs = {}\n        self._target = target\n        self._name = str(name or _newname())\n        self._args = args\n        self._kwargs = kwargs\n        if daemon is not None:\n            self._daemonic = daemon\n        else:\n            self._daemonic = current_thread().daemon\n        self._ident = None\n        if _HAVE_THREAD_NATIVE_ID:\n            self._native_id = None\n        self._tstate_lock = None\n        self._started = Event()\n        self._is_stopped = False\n        self._initialized = True\n        # Copy of sys.stderr used by self._invoke_excepthook()\n        self._stderr = _sys.stderr\n        self._invoke_excepthook = _make_invoke_excepthook()\n        # For debugging and _after_fork()\n        _dangling.add(self)\n\n    def _reset_internal_locks(self, is_alive):\n        # private!  Called by _after_fork() to reset our internal locks as\n        # they may be in an invalid state leading to a deadlock or crash.\n        self._started._reset_internal_locks()\n        if is_alive:\n            self._set_tstate_lock()\n        else:\n            # The thread isn't alive after fork: it doesn't have a tstate\n            # anymore.\n            self._is_stopped = True\n            self._tstate_lock = None\n\n    def __repr__(self):\n        assert self._initialized, \"Thread.__init__() was not called\"\n        status = \"initial\"\n        if self._started.is_set():\n            status = \"started\"\n        self.is_alive() # easy way to get ._is_stopped set when appropriate\n        if self._is_stopped:\n            status = \"stopped\"\n        if self._daemonic:\n            status += \" daemon\"\n        if self._ident is not None:\n            status += \" %s\" % self._ident\n        return \"<%s(%s, %s)>\" % (self.__class__.__name__, self._name, status)\n\n    def start(self):\n        \"\"\"Start the thread's activity.\n\n        It must be called at most once per thread object. It arranges for the\n        object's run() method to be invoked in a separate thread of control.\n\n        This method will raise a RuntimeError if called more than once on the\n        same thread object.\n\n        \"\"\"\n        if not self._initialized:\n            raise RuntimeError(\"thread.__init__() not called\")\n\n        if self._started.is_set():\n            raise RuntimeError(\"threads can only be started once\")\n        with _active_limbo_lock:\n            _limbo[self] = self\n        try:\n            _start_new_thread(self._bootstrap, ())\n        except Exception:\n            with _active_limbo_lock:\n                del _limbo[self]\n            raise\n        self._started.wait()\n\n    def run(self):\n        \"\"\"Method representing the thread's activity.\n\n        You may override this method in a subclass. The standard run() method\n        invokes the callable object passed to the object's constructor as the\n        target argument, if any, with sequential and keyword arguments taken\n        from the args and kwargs arguments, respectively.\n\n        \"\"\"\n        try:\n            if self._target:\n                self._target(*self._args, **self._kwargs)\n        finally:\n            # Avoid a refcycle if the thread is running a function with\n            # an argument that has a member that points to the thread.\n            del self._target, self._args, self._kwargs\n\n    def _bootstrap(self):\n        # Wrapper around the real bootstrap code that ignores\n        # exceptions during interpreter cleanup.  Those typically\n        # happen when a daemon thread wakes up at an unfortunate\n        # moment, finds the world around it destroyed, and raises some\n        # random exception *** while trying to report the exception in\n        # _bootstrap_inner() below ***.  Those random exceptions\n        # don't help anybody, and they confuse users, so we suppress\n        # them.  We suppress them only when it appears that the world\n        # indeed has already been destroyed, so that exceptions in\n        # _bootstrap_inner() during normal business hours are properly\n        # reported.  Also, we only suppress them for daemonic threads;\n        # if a non-daemonic encounters this, something else is wrong.\n        try:\n            self._bootstrap_inner()\n        except:\n            if self._daemonic and _sys is None:\n                return\n            raise\n\n    def _set_ident(self):\n        self._ident = get_ident()\n\n    if _HAVE_THREAD_NATIVE_ID:\n        def _set_native_id(self):\n            self._native_id = get_native_id()\n\n    def _set_tstate_lock(self):\n        \"\"\"\n        Set a lock object which will be released by the interpreter when\n        the underlying thread state (see pystate.h) gets deleted.\n        \"\"\"\n        self._tstate_lock = _set_sentinel()\n        self._tstate_lock.acquire()\n\n        if not self.daemon:\n            with _shutdown_locks_lock:\n                _shutdown_locks.add(self._tstate_lock)\n\n    def _bootstrap_inner(self):\n        try:\n            self._set_ident()\n            self._set_tstate_lock()\n            if _HAVE_THREAD_NATIVE_ID:\n                self._set_native_id()\n            self._started.set()\n            with _active_limbo_lock:\n                _active[self._ident] = self\n                del _limbo[self]\n\n            if _trace_hook:\n                _sys.settrace(_trace_hook)\n            if _profile_hook:\n                _sys.setprofile(_profile_hook)\n\n            try:\n                self.run()\n            except:\n                self._invoke_excepthook(self)\n        finally:\n            with _active_limbo_lock:\n                try:\n                    # We don't call self._delete() because it also\n                    # grabs _active_limbo_lock.\n                    del _active[get_ident()]\n                except:\n                    pass\n\n    def _stop(self):\n        # After calling ._stop(), .is_alive() returns False and .join() returns\n        # immediately.  ._tstate_lock must be released before calling ._stop().\n        #\n        # Normal case:  C code at the end of the thread's life\n        # (release_sentinel in _threadmodule.c) releases ._tstate_lock, and\n        # that's detected by our ._wait_for_tstate_lock(), called by .join()\n        # and .is_alive().  Any number of threads _may_ call ._stop()\n        # simultaneously (for example, if multiple threads are blocked in\n        # .join() calls), and they're not serialized.  That's harmless -\n        # they'll just make redundant rebindings of ._is_stopped and\n        # ._tstate_lock.  Obscure:  we rebind ._tstate_lock last so that the\n        # \"assert self._is_stopped\" in ._wait_for_tstate_lock() always works\n        # (the assert is executed only if ._tstate_lock is None).\n        #\n        # Special case:  _main_thread releases ._tstate_lock via this\n        # module's _shutdown() function.\n        lock = self._tstate_lock\n        if lock is not None:\n            assert not lock.locked()\n        self._is_stopped = True\n        self._tstate_lock = None\n        if not self.daemon:\n            with _shutdown_locks_lock:\n                _shutdown_locks.discard(lock)\n\n    def _delete(self):\n        \"Remove current thread from the dict of currently running threads.\"\n        with _active_limbo_lock:\n            del _active[get_ident()]\n            # There must not be any python code between the previous line\n            # and after the lock is released.  Otherwise a tracing function\n            # could try to acquire the lock again in the same thread, (in\n            # current_thread()), and would block.\n\n    def join(self, timeout=None):\n        \"\"\"Wait until the thread terminates.\n\n        This blocks the calling thread until the thread whose join() method is\n        called terminates -- either normally or through an unhandled exception\n        or until the optional timeout occurs.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof). As join() always returns None, you must call\n        is_alive() after join() to decide whether a timeout happened -- if the\n        thread is still alive, the join() call timed out.\n\n        When the timeout argument is not present or None, the operation will\n        block until the thread terminates.\n\n        A thread can be join()ed many times.\n\n        join() raises a RuntimeError if an attempt is made to join the current\n        thread as that would cause a deadlock. It is also an error to join() a\n        thread before it has been started and attempts to do so raises the same\n        exception.\n\n        \"\"\"\n        if not self._initialized:\n            raise RuntimeError(\"Thread.__init__() not called\")\n        if not self._started.is_set():\n            raise RuntimeError(\"cannot join thread before it is started\")\n        if self is current_thread():\n            raise RuntimeError(\"cannot join current thread\")\n\n        if timeout is None:\n            self._wait_for_tstate_lock()\n        else:\n            # the behavior of a negative timeout isn't documented, but\n            # historically .join(timeout=x) for x<0 has acted as if timeout=0\n            self._wait_for_tstate_lock(timeout=max(timeout, 0))\n\n    def _wait_for_tstate_lock(self, block=True, timeout=-1):\n        # Issue #18808: wait for the thread state to be gone.\n        # At the end of the thread's life, after all knowledge of the thread\n        # is removed from C data structures, C code releases our _tstate_lock.\n        # This method passes its arguments to _tstate_lock.acquire().\n        # If the lock is acquired, the C code is done, and self._stop() is\n        # called.  That sets ._is_stopped to True, and ._tstate_lock to None.\n        lock = self._tstate_lock\n        if lock is None:  # already determined that the C code is done\n            assert self._is_stopped\n        elif lock.acquire(block, timeout):\n            lock.release()\n            self._stop()\n\n    @property\n    def name(self):\n        \"\"\"A string used for identification purposes only.\n\n        It has no semantics. Multiple threads may be given the same name. The\n        initial name is set by the constructor.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        assert self._initialized, \"Thread.__init__() not called\"\n        self._name = str(name)\n\n    @property\n    def ident(self):\n        \"\"\"Thread identifier of this thread or None if it has not been started.\n\n        This is a nonzero integer. See the get_ident() function. Thread\n        identifiers may be recycled when a thread exits and another thread is\n        created. The identifier is available even after the thread has exited.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._ident\n\n    if _HAVE_THREAD_NATIVE_ID:\n        @property\n        def native_id(self):\n            \"\"\"Native integral thread ID of this thread, or None if it has not been started.\n\n            This is a non-negative integer. See the get_native_id() function.\n            This represents the Thread ID as reported by the kernel.\n\n            \"\"\"\n            assert self._initialized, \"Thread.__init__() not called\"\n            return self._native_id\n\n    def is_alive(self):\n        \"\"\"Return whether the thread is alive.\n\n        This method returns True just before the run() method starts until just\n        after the run() method terminates. The module function enumerate()\n        returns a list of all alive threads.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        if self._is_stopped or not self._started.is_set():\n            return False\n        self._wait_for_tstate_lock(False)\n        return not self._is_stopped\n\n    def isAlive(self):\n        \"\"\"Return whether the thread is alive.\n\n        This method is deprecated, use is_alive() instead.\n        \"\"\"\n        import warnings\n        warnings.warn('isAlive() is deprecated, use is_alive() instead',\n                      DeprecationWarning, stacklevel=2)\n        return self.is_alive()\n\n    @property\n    def daemon(self):\n        \"\"\"A boolean value indicating whether this thread is a daemon thread.\n\n        This must be set before start() is called, otherwise RuntimeError is\n        raised. Its initial value is inherited from the creating thread; the\n        main thread is not a daemon thread and therefore all threads created in\n        the main thread default to daemon = False.\n\n        The entire Python program exits when only daemon threads are left.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._daemonic\n\n    @daemon.setter\n    def daemon(self, daemonic):\n        if not self._initialized:\n            raise RuntimeError(\"Thread.__init__() not called\")\n        if self._started.is_set():\n            raise RuntimeError(\"cannot set daemon status of active thread\")\n        self._daemonic = daemonic\n\n    def isDaemon(self):\n        return self.daemon\n\n    def setDaemon(self, daemonic):\n        self.daemon = daemonic\n\n    def getName(self):\n        return self.name\n\n    def setName(self, name):\n        self.name = name\n\n\ntry:\n    from _thread import (_excepthook as excepthook,\n                         _ExceptHookArgs as ExceptHookArgs)\nexcept ImportError:\n    # Simple Python implementation if _thread._excepthook() is not available\n    from traceback import print_exception as _print_exception\n    from collections import namedtuple\n\n    _ExceptHookArgs = namedtuple(\n        'ExceptHookArgs',\n        'exc_type exc_value exc_traceback thread')\n\n    def ExceptHookArgs(args):\n        return _ExceptHookArgs(*args)\n\n    def excepthook(args, /):\n        \"\"\"\n        Handle uncaught Thread.run() exception.\n        \"\"\"\n        if args.exc_type == SystemExit:\n            # silently ignore SystemExit\n            return\n\n        if _sys is not None and _sys.stderr is not None:\n            stderr = _sys.stderr\n        elif args.thread is not None:\n            stderr = args.thread._stderr\n            if stderr is None:\n                # do nothing if sys.stderr is None and sys.stderr was None\n                # when the thread was created\n                return\n        else:\n            # do nothing if sys.stderr is None and args.thread is None\n            return\n\n        if args.thread is not None:\n            name = args.thread.name\n        else:\n            name = get_ident()\n        print(f\"Exception in thread {name}:\",\n              file=stderr, flush=True)\n        _print_exception(args.exc_type, args.exc_value, args.exc_traceback,\n                         file=stderr)\n        stderr.flush()\n\n\ndef _make_invoke_excepthook():\n    # Create a local namespace to ensure that variables remain alive\n    # when _invoke_excepthook() is called, even if it is called late during\n    # Python shutdown. It is mostly needed for daemon threads.\n\n    old_excepthook = excepthook\n    old_sys_excepthook = _sys.excepthook\n    if old_excepthook is None:\n        raise RuntimeError(\"threading.excepthook is None\")\n    if old_sys_excepthook is None:\n        raise RuntimeError(\"sys.excepthook is None\")\n\n    sys_exc_info = _sys.exc_info\n    local_print = print\n    local_sys = _sys\n\n    def invoke_excepthook(thread):\n        global excepthook\n        try:\n            hook = excepthook\n            if hook is None:\n                hook = old_excepthook\n\n            args = ExceptHookArgs([*sys_exc_info(), thread])\n\n            hook(args)\n        except Exception as exc:\n            exc.__suppress_context__ = True\n            del exc\n\n            if local_sys is not None and local_sys.stderr is not None:\n                stderr = local_sys.stderr\n            else:\n                stderr = thread._stderr\n\n            local_print(\"Exception in threading.excepthook:\",\n                        file=stderr, flush=True)\n\n            if local_sys is not None and local_sys.excepthook is not None:\n                sys_excepthook = local_sys.excepthook\n            else:\n                sys_excepthook = old_sys_excepthook\n\n            sys_excepthook(*sys_exc_info())\n        finally:\n            # Break reference cycle (exception stored in a variable)\n            args = None\n\n    return invoke_excepthook\n\n\n# The timer class was contributed by Itamar Shtull-Trauring\n\nclass Timer(Thread):\n    \"\"\"Call a function after a specified number of seconds:\n\n            t = Timer(30.0, f, args=None, kwargs=None)\n            t.start()\n            t.cancel()     # stop the timer's action if it's still waiting\n\n    \"\"\"\n\n    def __init__(self, interval, function, args=None, kwargs=None):\n        Thread.__init__(self)\n        self.interval = interval\n        self.function = function\n        self.args = args if args is not None else []\n        self.kwargs = kwargs if kwargs is not None else {}\n        self.finished = Event()\n\n    def cancel(self):\n        \"\"\"Stop the timer if it hasn't finished yet.\"\"\"\n        self.finished.set()\n\n    def run(self):\n        self.finished.wait(self.interval)\n        if not self.finished.is_set():\n            self.function(*self.args, **self.kwargs)\n        self.finished.set()\n\n\n# Special thread class to represent the main thread\n\nclass _MainThread(Thread):\n\n    def __init__(self):\n        Thread.__init__(self, name=\"MainThread\", daemon=False)\n        self._set_tstate_lock()\n        self._started.set()\n        self._set_ident()\n        if _HAVE_THREAD_NATIVE_ID:\n            self._set_native_id()\n        with _active_limbo_lock:\n            _active[self._ident] = self\n\n\n# Dummy thread class to represent threads not started here.\n# These aren't garbage collected when they die, nor can they be waited for.\n# If they invoke anything in threading.py that calls current_thread(), they\n# leave an entry in the _active dict forever after.\n# Their purpose is to return *something* from current_thread().\n# They are marked as daemon threads so we won't wait for them\n# when we exit (conform previous semantics).\n\nclass _DummyThread(Thread):\n\n    def __init__(self):\n        Thread.__init__(self, name=_newname(\"Dummy-%d\"), daemon=True)\n\n        self._started.set()\n        self._set_ident()\n        if _HAVE_THREAD_NATIVE_ID:\n            self._set_native_id()\n        with _active_limbo_lock:\n            _active[self._ident] = self\n\n    def _stop(self):\n        pass\n\n    def is_alive(self):\n        assert not self._is_stopped and self._started.is_set()\n        return True\n\n    def join(self, timeout=None):\n        assert False, \"cannot join a dummy thread\"\n\n\n# Global API functions\n\ndef current_thread():\n    \"\"\"Return the current Thread object, corresponding to the caller's thread of control.\n\n    If the caller's thread of control was not created through the threading\n    module, a dummy thread object with limited functionality is returned.\n\n    \"\"\"\n    try:\n        return _active[get_ident()]\n    except KeyError:\n        return _DummyThread()\n\ncurrentThread = current_thread\n\ndef active_count():\n    \"\"\"Return the number of Thread objects currently alive.\n\n    The returned count is equal to the length of the list returned by\n    enumerate().\n\n    \"\"\"\n    with _active_limbo_lock:\n        return len(_active) + len(_limbo)\n\nactiveCount = active_count\n\ndef _enumerate():\n    # Same as enumerate(), but without the lock. Internal use only.\n    return list(_active.values()) + list(_limbo.values())\n\ndef enumerate():\n    \"\"\"Return a list of all Thread objects currently alive.\n\n    The list includes daemonic threads, dummy thread objects created by\n    current_thread(), and the main thread. It excludes terminated threads and\n    threads that have not yet been started.\n\n    \"\"\"\n    with _active_limbo_lock:\n        return list(_active.values()) + list(_limbo.values())\n\nfrom _thread import stack_size\n\n# Create the main thread object,\n# and make it available for the interpreter\n# (Py_Main) as threading._shutdown.\n\n_main_thread = _MainThread()\n\ndef _shutdown():\n    \"\"\"\n    Wait until the Python thread state of all non-daemon threads get deleted.\n    \"\"\"\n    # Obscure:  other threads may be waiting to join _main_thread.  That's\n    # dubious, but some code does it.  We can't wait for C code to release\n    # the main thread's tstate_lock - that won't happen until the interpreter\n    # is nearly dead.  So we release it here.  Note that just calling _stop()\n    # isn't enough:  other threads may already be waiting on _tstate_lock.\n    if _main_thread._is_stopped:\n        # _shutdown() was already called\n        return\n\n    # Main thread\n    tlock = _main_thread._tstate_lock\n    # The main thread isn't finished yet, so its thread state lock can't have\n    # been released.\n    assert tlock is not None\n    assert tlock.locked()\n    tlock.release()\n    _main_thread._stop()\n\n    # Join all non-deamon threads\n    while True:\n        with _shutdown_locks_lock:\n            locks = list(_shutdown_locks)\n            _shutdown_locks.clear()\n\n        if not locks:\n            break\n\n        for lock in locks:\n            # mimick Thread.join()\n            lock.acquire()\n            lock.release()\n\n        # new threads can be spawned while we were waiting for the other\n        # threads to complete\n\n\ndef main_thread():\n    \"\"\"Return the main thread object.\n\n    In normal conditions, the main thread is the thread from which the\n    Python interpreter was started.\n    \"\"\"\n    return _main_thread\n\n# get thread-local implementation, either from the thread\n# module, or from the python fallback\n\ntry:\n    from _thread import _local as local\nexcept ImportError:\n    from _threading_local import local\n\n\ndef _after_fork():\n    \"\"\"\n    Cleanup threading module state that should not exist after a fork.\n    \"\"\"\n    # Reset _active_limbo_lock, in case we forked while the lock was held\n    # by another (non-forked) thread.  http://bugs.python.org/issue874900\n    global _active_limbo_lock, _main_thread\n    global _shutdown_locks_lock, _shutdown_locks\n    _active_limbo_lock = _allocate_lock()\n\n    # fork() only copied the current thread; clear references to others.\n    new_active = {}\n\n    try:\n        current = _active[get_ident()]\n    except KeyError:\n        # fork() was called in a thread which was not spawned\n        # by threading.Thread. For example, a thread spawned\n        # by thread.start_new_thread().\n        current = _MainThread()\n\n    _main_thread = current\n\n    # reset _shutdown() locks: threads re-register their _tstate_lock below\n    _shutdown_locks_lock = _allocate_lock()\n    _shutdown_locks = set()\n\n    with _active_limbo_lock:\n        # Dangling thread instances must still have their locks reset,\n        # because someone may join() them.\n        threads = set(_enumerate())\n        threads.update(_dangling)\n        for thread in threads:\n            # Any lock/condition variable may be currently locked or in an\n            # invalid state, so we reinitialize them.\n            if thread is current:\n                # There is only one active thread. We reset the ident to\n                # its new value since it can have changed.\n                thread._reset_internal_locks(True)\n                ident = get_ident()\n                thread._ident = ident\n                new_active[ident] = thread\n            else:\n                # All the others are already stopped.\n                thread._reset_internal_locks(False)\n                thread._stop()\n\n        _limbo.clear()\n        _active.clear()\n        _active.update(new_active)\n        assert len(_active) == 1\n\n\nif hasattr(_os, \"register_at_fork\"):\n    _os.register_at_fork(after_in_child=_after_fork)\n", 1466], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py": ["# Access WeakSet through the weakref module.\n# This code is separated-out because it is needed\n# by abc.py to load everything else at startup.\n\nfrom _weakref import ref\n\n__all__ = ['WeakSet']\n\n\nclass _IterationGuard:\n    # This context manager registers itself in the current iterators of the\n    # weak container, such as to delay all removals until the context manager\n    # exits.\n    # This technique should be relatively thread-safe (since sets are).\n\n    def __init__(self, weakcontainer):\n        # Don't create cycles\n        self.weakcontainer = ref(weakcontainer)\n\n    def __enter__(self):\n        w = self.weakcontainer()\n        if w is not None:\n            w._iterating.add(self)\n        return self\n\n    def __exit__(self, e, t, b):\n        w = self.weakcontainer()\n        if w is not None:\n            s = w._iterating\n            s.remove(self)\n            if not s:\n                w._commit_removals()\n\n\nclass WeakSet:\n    def __init__(self, data=None):\n        self.data = set()\n        def _remove(item, selfref=ref(self)):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(item)\n                else:\n                    self.data.discard(item)\n        self._remove = _remove\n        # A list of keys to be removed\n        self._pending_removals = []\n        self._iterating = set()\n        if data is not None:\n            self.update(data)\n\n    def _commit_removals(self):\n        l = self._pending_removals\n        discard = self.data.discard\n        while l:\n            discard(l.pop())\n\n    def __iter__(self):\n        with _IterationGuard(self):\n            for itemref in self.data:\n                item = itemref()\n                if item is not None:\n                    # Caveat: the iterator will keep a strong reference to\n                    # `item` until it is resumed or closed.\n                    yield item\n\n    def __len__(self):\n        return len(self.data) - len(self._pending_removals)\n\n    def __contains__(self, item):\n        try:\n            wr = ref(item)\n        except TypeError:\n            return False\n        return wr in self.data\n\n    def __reduce__(self):\n        return (self.__class__, (list(self),),\n                getattr(self, '__dict__', None))\n\n    def add(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.add(ref(item, self._remove))\n\n    def clear(self):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.clear()\n\n    def copy(self):\n        return self.__class__(self)\n\n    def pop(self):\n        if self._pending_removals:\n            self._commit_removals()\n        while True:\n            try:\n                itemref = self.data.pop()\n            except KeyError:\n                raise KeyError('pop from empty WeakSet') from None\n            item = itemref()\n            if item is not None:\n                return item\n\n    def remove(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.remove(ref(item))\n\n    def discard(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.discard(ref(item))\n\n    def update(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        for element in other:\n            self.add(element)\n\n    def __ior__(self, other):\n        self.update(other)\n        return self\n\n    def difference(self, other):\n        newset = self.copy()\n        newset.difference_update(other)\n        return newset\n    __sub__ = difference\n\n    def difference_update(self, other):\n        self.__isub__(other)\n    def __isub__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        if self is other:\n            self.data.clear()\n        else:\n            self.data.difference_update(ref(item) for item in other)\n        return self\n\n    def intersection(self, other):\n        return self.__class__(item for item in other if item in self)\n    __and__ = intersection\n\n    def intersection_update(self, other):\n        self.__iand__(other)\n    def __iand__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.intersection_update(ref(item) for item in other)\n        return self\n\n    def issubset(self, other):\n        return self.data.issubset(ref(item) for item in other)\n    __le__ = issubset\n\n    def __lt__(self, other):\n        return self.data < set(map(ref, other))\n\n    def issuperset(self, other):\n        return self.data.issuperset(ref(item) for item in other)\n    __ge__ = issuperset\n\n    def __gt__(self, other):\n        return self.data > set(map(ref, other))\n\n    def __eq__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.data == set(map(ref, other))\n\n    def symmetric_difference(self, other):\n        newset = self.copy()\n        newset.symmetric_difference_update(other)\n        return newset\n    __xor__ = symmetric_difference\n\n    def symmetric_difference_update(self, other):\n        self.__ixor__(other)\n    def __ixor__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        if self is other:\n            self.data.clear()\n        else:\n            self.data.symmetric_difference_update(ref(item, self._remove) for item in other)\n        return self\n\n    def union(self, other):\n        return self.__class__(e for s in (self, other) for e in s)\n    __or__ = union\n\n    def isdisjoint(self, other):\n        return len(self.intersection(other)) == 0\n\n    def __repr__(self):\n        return repr(self.data)\n", 199], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py": ["#\n# Code used to start processes when using the spawn or forkserver\n# start methods.\n#\n# multiprocessing/spawn.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\nimport os\nimport sys\nimport runpy\nimport types\n\nfrom . import get_start_method, set_start_method\nfrom . import process\nfrom .context import reduction\nfrom . import util\n\n__all__ = ['_main', 'freeze_support', 'set_executable', 'get_executable',\n           'get_preparation_data', 'get_command_line', 'import_main_path']\n\n#\n# _python_exe is the assumed path to the python executable.\n# People embedding Python want to modify it.\n#\n\nif sys.platform != 'win32':\n    WINEXE = False\n    WINSERVICE = False\nelse:\n    WINEXE = getattr(sys, 'frozen', False)\n    WINSERVICE = sys.executable.lower().endswith(\"pythonservice.exe\")\n\nif WINSERVICE:\n    _python_exe = os.path.join(sys.exec_prefix, 'python.exe')\nelse:\n    _python_exe = sys.executable\n\ndef set_executable(exe):\n    global _python_exe\n    _python_exe = exe\n\ndef get_executable():\n    return _python_exe\n\n#\n#\n#\n\ndef is_forking(argv):\n    '''\n    Return whether commandline indicates we are forking\n    '''\n    if len(argv) >= 2 and argv[1] == '--multiprocessing-fork':\n        return True\n    else:\n        return False\n\n\ndef freeze_support():\n    '''\n    Run code for process object if this in not the main process\n    '''\n    if is_forking(sys.argv):\n        kwds = {}\n        for arg in sys.argv[2:]:\n            name, value = arg.split('=')\n            if value == 'None':\n                kwds[name] = None\n            else:\n                kwds[name] = int(value)\n        spawn_main(**kwds)\n        sys.exit()\n\n\ndef get_command_line(**kwds):\n    '''\n    Returns prefix of command line used for spawning a child process\n    '''\n    if getattr(sys, 'frozen', False):\n        return ([sys.executable, '--multiprocessing-fork'] +\n                ['%s=%r' % item for item in kwds.items()])\n    else:\n        prog = 'from multiprocessing.spawn import spawn_main; spawn_main(%s)'\n        prog %= ', '.join('%s=%r' % item for item in kwds.items())\n        opts = util._args_from_interpreter_flags()\n        return [_python_exe] + opts + ['-c', prog, '--multiprocessing-fork']\n\n\ndef spawn_main(pipe_handle, parent_pid=None, tracker_fd=None):\n    '''\n    Run code specified by data received over pipe\n    '''\n    assert is_forking(sys.argv), \"Not forking\"\n    if sys.platform == 'win32':\n        import msvcrt\n        import _winapi\n\n        if parent_pid is not None:\n            source_process = _winapi.OpenProcess(\n                _winapi.SYNCHRONIZE | _winapi.PROCESS_DUP_HANDLE,\n                False, parent_pid)\n        else:\n            source_process = None\n        new_handle = reduction.duplicate(pipe_handle,\n                                         source_process=source_process)\n        fd = msvcrt.open_osfhandle(new_handle, os.O_RDONLY)\n        parent_sentinel = source_process\n    else:\n        from . import resource_tracker\n        resource_tracker._resource_tracker._fd = tracker_fd\n        fd = pipe_handle\n        parent_sentinel = os.dup(pipe_handle)\n    exitcode = _main(fd, parent_sentinel)\n    sys.exit(exitcode)\n\n\ndef _main(fd, parent_sentinel):\n    with os.fdopen(fd, 'rb', closefd=True) as from_parent:\n        process.current_process()._inheriting = True\n        try:\n            preparation_data = reduction.pickle.load(from_parent)\n            prepare(preparation_data)\n            self = reduction.pickle.load(from_parent)\n        finally:\n            del process.current_process()._inheriting\n    return self._bootstrap(parent_sentinel)\n\n\ndef _check_not_importing_main():\n    if getattr(process.current_process(), '_inheriting', False):\n        raise RuntimeError('''\n        An attempt has been made to start a new process before the\n        current process has finished its bootstrapping phase.\n\n        This probably means that you are not using fork to start your\n        child processes and you have forgotten to use the proper idiom\n        in the main module:\n\n            if __name__ == '__main__':\n                freeze_support()\n                ...\n\n        The \"freeze_support()\" line can be omitted if the program\n        is not going to be frozen to produce an executable.''')\n\n\ndef get_preparation_data(name):\n    '''\n    Return info about parent needed by child to unpickle process object\n    '''\n    _check_not_importing_main()\n    d = dict(\n        log_to_stderr=util._log_to_stderr,\n        authkey=process.current_process().authkey,\n        )\n\n    if util._logger is not None:\n        d['log_level'] = util._logger.getEffectiveLevel()\n\n    sys_path=sys.path.copy()\n    try:\n        i = sys_path.index('')\n    except ValueError:\n        pass\n    else:\n        sys_path[i] = process.ORIGINAL_DIR\n\n    d.update(\n        name=name,\n        sys_path=sys_path,\n        sys_argv=sys.argv,\n        orig_dir=process.ORIGINAL_DIR,\n        dir=os.getcwd(),\n        start_method=get_start_method(),\n        )\n\n    # Figure out whether to initialise main in the subprocess as a module\n    # or through direct execution (or to leave it alone entirely)\n    main_module = sys.modules['__main__']\n    main_mod_name = getattr(main_module.__spec__, \"name\", None)\n    if main_mod_name is not None:\n        d['init_main_from_name'] = main_mod_name\n    elif sys.platform != 'win32' or (not WINEXE and not WINSERVICE):\n        main_path = getattr(main_module, '__file__', None)\n        if main_path is not None:\n            if (not os.path.isabs(main_path) and\n                        process.ORIGINAL_DIR is not None):\n                main_path = os.path.join(process.ORIGINAL_DIR, main_path)\n            d['init_main_from_path'] = os.path.normpath(main_path)\n\n    return d\n\n#\n# Prepare current process\n#\n\nold_main_modules = []\n\ndef prepare(data):\n    '''\n    Try to get current process ready to unpickle process object\n    '''\n    if 'name' in data:\n        process.current_process().name = data['name']\n\n    if 'authkey' in data:\n        process.current_process().authkey = data['authkey']\n\n    if 'log_to_stderr' in data and data['log_to_stderr']:\n        util.log_to_stderr()\n\n    if 'log_level' in data:\n        util.get_logger().setLevel(data['log_level'])\n\n    if 'sys_path' in data:\n        sys.path = data['sys_path']\n\n    if 'sys_argv' in data:\n        sys.argv = data['sys_argv']\n\n    if 'dir' in data:\n        os.chdir(data['dir'])\n\n    if 'orig_dir' in data:\n        process.ORIGINAL_DIR = data['orig_dir']\n\n    if 'start_method' in data:\n        set_start_method(data['start_method'], force=True)\n\n    if 'init_main_from_name' in data:\n        _fixup_main_from_name(data['init_main_from_name'])\n    elif 'init_main_from_path' in data:\n        _fixup_main_from_path(data['init_main_from_path'])\n\n# Multiprocessing module helpers to fix up the main module in\n# spawned subprocesses\ndef _fixup_main_from_name(mod_name):\n    # __main__.py files for packages, directories, zip archives, etc, run\n    # their \"main only\" code unconditionally, so we don't even try to\n    # populate anything in __main__, nor do we make any changes to\n    # __main__ attributes\n    current_main = sys.modules['__main__']\n    if mod_name == \"__main__\" or mod_name.endswith(\".__main__\"):\n        return\n\n    # If this process was forked, __main__ may already be populated\n    if getattr(current_main.__spec__, \"name\", None) == mod_name:\n        return\n\n    # Otherwise, __main__ may contain some non-main code where we need to\n    # support unpickling it properly. We rerun it as __mp_main__ and make\n    # the normal __main__ an alias to that\n    old_main_modules.append(current_main)\n    main_module = types.ModuleType(\"__mp_main__\")\n    main_content = runpy.run_module(mod_name,\n                                    run_name=\"__mp_main__\",\n                                    alter_sys=True)\n    main_module.__dict__.update(main_content)\n    sys.modules['__main__'] = sys.modules['__mp_main__'] = main_module\n\n\ndef _fixup_main_from_path(main_path):\n    # If this process was forked, __main__ may already be populated\n    current_main = sys.modules['__main__']\n\n    # Unfortunately, the main ipython launch script historically had no\n    # \"if __name__ == '__main__'\" guard, so we work around that\n    # by treating it like a __main__.py file\n    # See https://github.com/ipython/ipython/issues/4698\n    main_name = os.path.splitext(os.path.basename(main_path))[0]\n    if main_name == 'ipython':\n        return\n\n    # Otherwise, if __file__ already has the setting we expect,\n    # there's nothing more to do\n    if getattr(current_main, '__file__', None) == main_path:\n        return\n\n    # If the parent process has sent a path through rather than a module\n    # name we assume it is an executable script that may contain\n    # non-main code that needs to be executed\n    old_main_modules.append(current_main)\n    main_module = types.ModuleType(\"__mp_main__\")\n    main_content = runpy.run_path(main_path,\n                                  run_name=\"__mp_main__\")\n    main_module.__dict__.update(main_content)\n    sys.modules['__main__'] = sys.modules['__mp_main__'] = main_module\n\n\ndef import_main_path(main_path):\n    '''\n    Set sys.modules['__main__'] to module at main_path\n    '''\n    _fixup_main_from_path(main_path)\n", 297], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py": ["import os\nimport msvcrt\nimport signal\nimport sys\nimport _winapi\n\nfrom .context import reduction, get_spawning_popen, set_spawning_popen\nfrom . import spawn\nfrom . import util\n\n__all__ = ['Popen']\n\n#\n#\n#\n\nTERMINATE = 0x10000\nWINEXE = (sys.platform == 'win32' and getattr(sys, 'frozen', False))\nWINSERVICE = sys.executable.lower().endswith(\"pythonservice.exe\")\n\n\ndef _path_eq(p1, p2):\n    return p1 == p2 or os.path.normcase(p1) == os.path.normcase(p2)\n\nWINENV = not _path_eq(sys.executable, sys._base_executable)\n\n\ndef _close_handles(*handles):\n    for handle in handles:\n        _winapi.CloseHandle(handle)\n\n\n#\n# We define a Popen class similar to the one from subprocess, but\n# whose constructor takes a process object as its argument.\n#\n\nclass Popen(object):\n    '''\n    Start a subprocess to run the code of a process object\n    '''\n    method = 'spawn'\n\n    def __init__(self, process_obj):\n        prep_data = spawn.get_preparation_data(process_obj._name)\n\n        # read end of pipe will be duplicated by the child process\n        # -- see spawn_main() in spawn.py.\n        #\n        # bpo-33929: Previously, the read end of pipe was \"stolen\" by the child\n        # process, but it leaked a handle if the child process had been\n        # terminated before it could steal the handle from the parent process.\n        rhandle, whandle = _winapi.CreatePipe(None, 0)\n        wfd = msvcrt.open_osfhandle(whandle, 0)\n        cmd = spawn.get_command_line(parent_pid=os.getpid(),\n                                     pipe_handle=rhandle)\n        cmd = ' '.join('\"%s\"' % x for x in cmd)\n\n        python_exe = spawn.get_executable()\n\n        # bpo-35797: When running in a venv, we bypass the redirect\n        # executor and launch our base Python.\n        if WINENV and _path_eq(python_exe, sys.executable):\n            python_exe = sys._base_executable\n            env = os.environ.copy()\n            env[\"__PYVENV_LAUNCHER__\"] = sys.executable\n        else:\n            env = None\n\n        with open(wfd, 'wb', closefd=True) as to_child:\n            # start process\n            try:\n                hp, ht, pid, tid = _winapi.CreateProcess(\n                    python_exe, cmd,\n                    None, None, False, 0, env, None, None)\n                _winapi.CloseHandle(ht)\n            except:\n                _winapi.CloseHandle(rhandle)\n                raise\n\n            # set attributes of self\n            self.pid = pid\n            self.returncode = None\n            self._handle = hp\n            self.sentinel = int(hp)\n            self.finalizer = util.Finalize(self, _close_handles,\n                                           (self.sentinel, int(rhandle)))\n\n            # send information to child\n            set_spawning_popen(self)\n            try:\n                reduction.dump(prep_data, to_child)\n                reduction.dump(process_obj, to_child)\n            finally:\n                set_spawning_popen(None)\n\n    def duplicate_for_child(self, handle):\n        assert self is get_spawning_popen()\n        return reduction.duplicate(handle, self.sentinel)\n\n    def wait(self, timeout=None):\n        if self.returncode is None:\n            if timeout is None:\n                msecs = _winapi.INFINITE\n            else:\n                msecs = max(0, int(timeout * 1000 + 0.5))\n\n            res = _winapi.WaitForSingleObject(int(self._handle), msecs)\n            if res == _winapi.WAIT_OBJECT_0:\n                code = _winapi.GetExitCodeProcess(self._handle)\n                if code == TERMINATE:\n                    code = -signal.SIGTERM\n                self.returncode = code\n\n        return self.returncode\n\n    def poll(self):\n        return self.wait(timeout=0)\n\n    def terminate(self):\n        if self.returncode is None:\n            try:\n                _winapi.TerminateProcess(int(self._handle), TERMINATE)\n            except OSError:\n                if self.wait(timeout=1.0) is None:\n                    raise\n\n    kill = terminate\n\n    def close(self):\n        self.finalizer()\n", 131], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\subprocess.py": ["# subprocess - Subprocesses with accessible I/O streams\n#\n# For more information about this module, see PEP 324.\n#\n# Copyright (c) 2003-2005 by Peter Astrand <astrand@lysator.liu.se>\n#\n# Licensed to PSF under a Contributor Agreement.\n# See http://www.python.org/2.4/license for licensing details.\n\nr\"\"\"Subprocesses with accessible I/O streams\n\nThis module allows you to spawn processes, connect to their\ninput/output/error pipes, and obtain their return codes.\n\nFor a complete description of this module see the Python documentation.\n\nMain API\n========\nrun(...): Runs a command, waits for it to complete, then returns a\n          CompletedProcess instance.\nPopen(...): A class for flexibly executing a command in a new process\n\nConstants\n---------\nDEVNULL: Special value that indicates that os.devnull should be used\nPIPE:    Special value that indicates a pipe should be created\nSTDOUT:  Special value that indicates that stderr should go to stdout\n\n\nOlder API\n=========\ncall(...): Runs a command, waits for it to complete, then returns\n    the return code.\ncheck_call(...): Same as call() but raises CalledProcessError()\n    if return code is not 0\ncheck_output(...): Same as check_call() but returns the contents of\n    stdout instead of a return code\ngetoutput(...): Runs a command in the shell, waits for it to complete,\n    then returns the output\ngetstatusoutput(...): Runs a command in the shell, waits for it to complete,\n    then returns a (exitcode, output) tuple\n\"\"\"\n\nimport builtins\nimport errno\nimport io\nimport os\nimport time\nimport signal\nimport sys\nimport threading\nimport warnings\nimport contextlib\nfrom time import monotonic as _time\n\n\n__all__ = [\"Popen\", \"PIPE\", \"STDOUT\", \"call\", \"check_call\", \"getstatusoutput\",\n           \"getoutput\", \"check_output\", \"run\", \"CalledProcessError\", \"DEVNULL\",\n           \"SubprocessError\", \"TimeoutExpired\", \"CompletedProcess\"]\n           # NOTE: We intentionally exclude list2cmdline as it is\n           # considered an internal implementation detail.  issue10838.\n\ntry:\n    import msvcrt\n    import _winapi\n    _mswindows = True\nexcept ModuleNotFoundError:\n    _mswindows = False\n    import _posixsubprocess\n    import select\n    import selectors\nelse:\n    from _winapi import (CREATE_NEW_CONSOLE, CREATE_NEW_PROCESS_GROUP,\n                         STD_INPUT_HANDLE, STD_OUTPUT_HANDLE,\n                         STD_ERROR_HANDLE, SW_HIDE,\n                         STARTF_USESTDHANDLES, STARTF_USESHOWWINDOW,\n                         ABOVE_NORMAL_PRIORITY_CLASS, BELOW_NORMAL_PRIORITY_CLASS,\n                         HIGH_PRIORITY_CLASS, IDLE_PRIORITY_CLASS,\n                         NORMAL_PRIORITY_CLASS, REALTIME_PRIORITY_CLASS,\n                         CREATE_NO_WINDOW, DETACHED_PROCESS,\n                         CREATE_DEFAULT_ERROR_MODE, CREATE_BREAKAWAY_FROM_JOB)\n\n    __all__.extend([\"CREATE_NEW_CONSOLE\", \"CREATE_NEW_PROCESS_GROUP\",\n                    \"STD_INPUT_HANDLE\", \"STD_OUTPUT_HANDLE\",\n                    \"STD_ERROR_HANDLE\", \"SW_HIDE\",\n                    \"STARTF_USESTDHANDLES\", \"STARTF_USESHOWWINDOW\",\n                    \"STARTUPINFO\",\n                    \"ABOVE_NORMAL_PRIORITY_CLASS\", \"BELOW_NORMAL_PRIORITY_CLASS\",\n                    \"HIGH_PRIORITY_CLASS\", \"IDLE_PRIORITY_CLASS\",\n                    \"NORMAL_PRIORITY_CLASS\", \"REALTIME_PRIORITY_CLASS\",\n                    \"CREATE_NO_WINDOW\", \"DETACHED_PROCESS\",\n                    \"CREATE_DEFAULT_ERROR_MODE\", \"CREATE_BREAKAWAY_FROM_JOB\"])\n\n\n# Exception classes used by this module.\nclass SubprocessError(Exception): pass\n\n\nclass CalledProcessError(SubprocessError):\n    \"\"\"Raised when run() is called with check=True and the process\n    returns a non-zero exit status.\n\n    Attributes:\n      cmd, returncode, stdout, stderr, output\n    \"\"\"\n    def __init__(self, returncode, cmd, output=None, stderr=None):\n        self.returncode = returncode\n        self.cmd = cmd\n        self.output = output\n        self.stderr = stderr\n\n    def __str__(self):\n        if self.returncode and self.returncode < 0:\n            try:\n                return \"Command '%s' died with %r.\" % (\n                        self.cmd, signal.Signals(-self.returncode))\n            except ValueError:\n                return \"Command '%s' died with unknown signal %d.\" % (\n                        self.cmd, -self.returncode)\n        else:\n            return \"Command '%s' returned non-zero exit status %d.\" % (\n                    self.cmd, self.returncode)\n\n    @property\n    def stdout(self):\n        \"\"\"Alias for output attribute, to match stderr\"\"\"\n        return self.output\n\n    @stdout.setter\n    def stdout(self, value):\n        # There's no obvious reason to set this, but allow it anyway so\n        # .stdout is a transparent alias for .output\n        self.output = value\n\n\nclass TimeoutExpired(SubprocessError):\n    \"\"\"This exception is raised when the timeout expires while waiting for a\n    child process.\n\n    Attributes:\n        cmd, output, stdout, stderr, timeout\n    \"\"\"\n    def __init__(self, cmd, timeout, output=None, stderr=None):\n        self.cmd = cmd\n        self.timeout = timeout\n        self.output = output\n        self.stderr = stderr\n\n    def __str__(self):\n        return (\"Command '%s' timed out after %s seconds\" %\n                (self.cmd, self.timeout))\n\n    @property\n    def stdout(self):\n        return self.output\n\n    @stdout.setter\n    def stdout(self, value):\n        # There's no obvious reason to set this, but allow it anyway so\n        # .stdout is a transparent alias for .output\n        self.output = value\n\n\nif _mswindows:\n    class STARTUPINFO:\n        def __init__(self, *, dwFlags=0, hStdInput=None, hStdOutput=None,\n                     hStdError=None, wShowWindow=0, lpAttributeList=None):\n            self.dwFlags = dwFlags\n            self.hStdInput = hStdInput\n            self.hStdOutput = hStdOutput\n            self.hStdError = hStdError\n            self.wShowWindow = wShowWindow\n            self.lpAttributeList = lpAttributeList or {\"handle_list\": []}\n\n        def copy(self):\n            attr_list = self.lpAttributeList.copy()\n            if 'handle_list' in attr_list:\n                attr_list['handle_list'] = list(attr_list['handle_list'])\n\n            return STARTUPINFO(dwFlags=self.dwFlags,\n                               hStdInput=self.hStdInput,\n                               hStdOutput=self.hStdOutput,\n                               hStdError=self.hStdError,\n                               wShowWindow=self.wShowWindow,\n                               lpAttributeList=attr_list)\n\n\n    class Handle(int):\n        closed = False\n\n        def Close(self, CloseHandle=_winapi.CloseHandle):\n            if not self.closed:\n                self.closed = True\n                CloseHandle(self)\n\n        def Detach(self):\n            if not self.closed:\n                self.closed = True\n                return int(self)\n            raise ValueError(\"already closed\")\n\n        def __repr__(self):\n            return \"%s(%d)\" % (self.__class__.__name__, int(self))\n\n        __del__ = Close\nelse:\n    # When select or poll has indicated that the file is writable,\n    # we can write up to _PIPE_BUF bytes without risk of blocking.\n    # POSIX defines PIPE_BUF as >= 512.\n    _PIPE_BUF = getattr(select, 'PIPE_BUF', 512)\n\n    # poll/select have the advantage of not requiring any extra file\n    # descriptor, contrarily to epoll/kqueue (also, they require a single\n    # syscall).\n    if hasattr(selectors, 'PollSelector'):\n        _PopenSelector = selectors.PollSelector\n    else:\n        _PopenSelector = selectors.SelectSelector\n\n\nif _mswindows:\n    # On Windows we just need to close `Popen._handle` when we no longer need\n    # it, so that the kernel can free it. `Popen._handle` gets closed\n    # implicitly when the `Popen` instance is finalized (see `Handle.__del__`,\n    # which is calling `CloseHandle` as requested in [1]), so there is nothing\n    # for `_cleanup` to do.\n    #\n    # [1] https://docs.microsoft.com/en-us/windows/desktop/ProcThread/\n    # creating-processes\n    _active = None\n\n    def _cleanup():\n        pass\nelse:\n    # This lists holds Popen instances for which the underlying process had not\n    # exited at the time its __del__ method got called: those processes are\n    # wait()ed for synchronously from _cleanup() when a new Popen object is\n    # created, to avoid zombie processes.\n    _active = []\n\n    def _cleanup():\n        if _active is None:\n            return\n        for inst in _active[:]:\n            res = inst._internal_poll(_deadstate=sys.maxsize)\n            if res is not None:\n                try:\n                    _active.remove(inst)\n                except ValueError:\n                    # This can happen if two threads create a new Popen instance.\n                    # It's harmless that it was already removed, so ignore.\n                    pass\n\nPIPE = -1\nSTDOUT = -2\nDEVNULL = -3\n\n\n# XXX This function is only used by multiprocessing and the test suite,\n# but it's here so that it can be imported when Python is compiled without\n# threads.\n\ndef _optim_args_from_interpreter_flags():\n    \"\"\"Return a list of command-line arguments reproducing the current\n    optimization settings in sys.flags.\"\"\"\n    args = []\n    value = sys.flags.optimize\n    if value > 0:\n        args.append('-' + 'O' * value)\n    return args\n\n\ndef _args_from_interpreter_flags():\n    \"\"\"Return a list of command-line arguments reproducing the current\n    settings in sys.flags, sys.warnoptions and sys._xoptions.\"\"\"\n    flag_opt_map = {\n        'debug': 'd',\n        # 'inspect': 'i',\n        # 'interactive': 'i',\n        'dont_write_bytecode': 'B',\n        'no_site': 'S',\n        'verbose': 'v',\n        'bytes_warning': 'b',\n        'quiet': 'q',\n        # -O is handled in _optim_args_from_interpreter_flags()\n    }\n    args = _optim_args_from_interpreter_flags()\n    for flag, opt in flag_opt_map.items():\n        v = getattr(sys.flags, flag)\n        if v > 0:\n            args.append('-' + opt * v)\n\n    if sys.flags.isolated:\n        args.append('-I')\n    else:\n        if sys.flags.ignore_environment:\n            args.append('-E')\n        if sys.flags.no_user_site:\n            args.append('-s')\n\n    # -W options\n    warnopts = sys.warnoptions[:]\n    bytes_warning = sys.flags.bytes_warning\n    xoptions = getattr(sys, '_xoptions', {})\n    dev_mode = ('dev' in xoptions)\n\n    if bytes_warning > 1:\n        warnopts.remove(\"error::BytesWarning\")\n    elif bytes_warning:\n        warnopts.remove(\"default::BytesWarning\")\n    if dev_mode:\n        warnopts.remove('default')\n    for opt in warnopts:\n        args.append('-W' + opt)\n\n    # -X options\n    if dev_mode:\n        args.extend(('-X', 'dev'))\n    for opt in ('faulthandler', 'tracemalloc', 'importtime',\n                'showalloccount', 'showrefcount', 'utf8'):\n        if opt in xoptions:\n            value = xoptions[opt]\n            if value is True:\n                arg = opt\n            else:\n                arg = '%s=%s' % (opt, value)\n            args.extend(('-X', arg))\n\n    return args\n\n\ndef call(*popenargs, timeout=None, **kwargs):\n    \"\"\"Run command with arguments.  Wait for command to complete or\n    timeout, then return the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    retcode = call([\"ls\", \"-l\"])\n    \"\"\"\n    with Popen(*popenargs, **kwargs) as p:\n        try:\n            return p.wait(timeout=timeout)\n        except:  # Including KeyboardInterrupt, wait handled that.\n            p.kill()\n            # We don't call p.wait() again as p.__exit__ does that for us.\n            raise\n\n\ndef check_call(*popenargs, **kwargs):\n    \"\"\"Run command with arguments.  Wait for command to complete.  If\n    the exit code was zero then return, otherwise raise\n    CalledProcessError.  The CalledProcessError object will have the\n    return code in the returncode attribute.\n\n    The arguments are the same as for the call function.  Example:\n\n    check_call([\"ls\", \"-l\"])\n    \"\"\"\n    retcode = call(*popenargs, **kwargs)\n    if retcode:\n        cmd = kwargs.get(\"args\")\n        if cmd is None:\n            cmd = popenargs[0]\n        raise CalledProcessError(retcode, cmd)\n    return 0\n\n\ndef check_output(*popenargs, timeout=None, **kwargs):\n    r\"\"\"Run command with arguments and return its output.\n\n    If the exit code was non-zero it raises a CalledProcessError.  The\n    CalledProcessError object will have the return code in the returncode\n    attribute and output in the output attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    >>> check_output([\"ls\", \"-l\", \"/dev/null\"])\n    b'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n'\n\n    The stdout argument is not allowed as it is used internally.\n    To capture standard error in the result, use stderr=STDOUT.\n\n    >>> check_output([\"/bin/sh\", \"-c\",\n    ...               \"ls -l non_existent_file ; exit 0\"],\n    ...              stderr=STDOUT)\n    b'ls: non_existent_file: No such file or directory\\n'\n\n    There is an additional optional argument, \"input\", allowing you to\n    pass a string to the subprocess's stdin.  If you use this argument\n    you may not also use the Popen constructor's \"stdin\" argument, as\n    it too will be used internally.  Example:\n\n    >>> check_output([\"sed\", \"-e\", \"s/foo/bar/\"],\n    ...              input=b\"when in the course of fooman events\\n\")\n    b'when in the course of barman events\\n'\n\n    By default, all communication is in bytes, and therefore any \"input\"\n    should be bytes, and the return value will be bytes.  If in text mode,\n    any \"input\" should be a string, and the return value will be a string\n    decoded according to locale encoding, or by \"encoding\" if set. Text mode\n    is triggered by setting any of text, encoding, errors or universal_newlines.\n    \"\"\"\n    if 'stdout' in kwargs:\n        raise ValueError('stdout argument not allowed, it will be overridden.')\n\n    if 'input' in kwargs and kwargs['input'] is None:\n        # Explicitly passing input=None was previously equivalent to passing an\n        # empty string. That is maintained here for backwards compatibility.\n        if kwargs.get('universal_newlines') or kwargs.get('text'):\n            empty = ''\n        else:\n            empty = b''\n        kwargs['input'] = empty\n\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n               **kwargs).stdout\n\n\nclass CompletedProcess(object):\n    \"\"\"A process that has finished running.\n\n    This is returned by run().\n\n    Attributes:\n      args: The list or str args passed to run().\n      returncode: The exit code of the process, negative for signals.\n      stdout: The standard output (None if not captured).\n      stderr: The standard error (None if not captured).\n    \"\"\"\n    def __init__(self, args, returncode, stdout=None, stderr=None):\n        self.args = args\n        self.returncode = returncode\n        self.stdout = stdout\n        self.stderr = stderr\n\n    def __repr__(self):\n        args = ['args={!r}'.format(self.args),\n                'returncode={!r}'.format(self.returncode)]\n        if self.stdout is not None:\n            args.append('stdout={!r}'.format(self.stdout))\n        if self.stderr is not None:\n            args.append('stderr={!r}'.format(self.stderr))\n        return \"{}({})\".format(type(self).__name__, ', '.join(args))\n\n    def check_returncode(self):\n        \"\"\"Raise CalledProcessError if the exit code is non-zero.\"\"\"\n        if self.returncode:\n            raise CalledProcessError(self.returncode, self.args, self.stdout,\n                                     self.stderr)\n\n\ndef run(*popenargs,\n        input=None, capture_output=False, timeout=None, check=False, **kwargs):\n    \"\"\"Run command with arguments and return a CompletedProcess instance.\n\n    The returned instance will have attributes args, returncode, stdout and\n    stderr. By default, stdout and stderr are not captured, and those attributes\n    will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n\n    If check is True and the exit code was non-zero, it raises a\n    CalledProcessError. The CalledProcessError object will have the return code\n    in the returncode attribute, and output & stderr attributes if those streams\n    were captured.\n\n    If timeout is given, and the process takes too long, a TimeoutExpired\n    exception will be raised.\n\n    There is an optional argument \"input\", allowing you to\n    pass bytes or a string to the subprocess's stdin.  If you use this argument\n    you may not also use the Popen constructor's \"stdin\" argument, as\n    it will be used internally.\n\n    By default, all communication is in bytes, and therefore any \"input\" should\n    be bytes, and the stdout and stderr will be bytes. If in text mode, any\n    \"input\" should be a string, and stdout and stderr will be strings decoded\n    according to locale encoding, or by \"encoding\" if set. Text mode is\n    triggered by setting any of text, encoding, errors or universal_newlines.\n\n    The other arguments are the same as for the Popen constructor.\n    \"\"\"\n    if input is not None:\n        if kwargs.get('stdin') is not None:\n            raise ValueError('stdin and input arguments may not both be used.')\n        kwargs['stdin'] = PIPE\n\n    if capture_output:\n        if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n            raise ValueError('stdout and stderr arguments may not be used '\n                             'with capture_output.')\n        kwargs['stdout'] = PIPE\n        kwargs['stderr'] = PIPE\n\n    with Popen(*popenargs, **kwargs) as process:\n        try:\n            stdout, stderr = process.communicate(input, timeout=timeout)\n        except TimeoutExpired as exc:\n            process.kill()\n            if _mswindows:\n                # Windows accumulates the output in a single blocking\n                # read() call run on child threads, with the timeout\n                # being done in a join() on those threads.  communicate()\n                # _after_ kill() is required to collect that and add it\n                # to the exception.\n                exc.stdout, exc.stderr = process.communicate()\n            else:\n                # POSIX _communicate already populated the output so\n                # far into the TimeoutExpired exception.\n                process.wait()\n            raise\n        except:  # Including KeyboardInterrupt, communicate handled that.\n            process.kill()\n            # We don't call process.wait() as .__exit__ does that for us.\n            raise\n        retcode = process.poll()\n        if check and retcode:\n            raise CalledProcessError(retcode, process.args,\n                                     output=stdout, stderr=stderr)\n    return CompletedProcess(process.args, retcode, stdout, stderr)\n\n\ndef list2cmdline(seq):\n    \"\"\"\n    Translate a sequence of arguments into a command line\n    string, using the same rules as the MS C runtime:\n\n    1) Arguments are delimited by white space, which is either a\n       space or a tab.\n\n    2) A string surrounded by double quotation marks is\n       interpreted as a single argument, regardless of white space\n       contained within.  A quoted string can be embedded in an\n       argument.\n\n    3) A double quotation mark preceded by a backslash is\n       interpreted as a literal double quotation mark.\n\n    4) Backslashes are interpreted literally, unless they\n       immediately precede a double quotation mark.\n\n    5) If backslashes immediately precede a double quotation mark,\n       every pair of backslashes is interpreted as a literal\n       backslash.  If the number of backslashes is odd, the last\n       backslash escapes the next double quotation mark as\n       described in rule 3.\n    \"\"\"\n\n    # See\n    # http://msdn.microsoft.com/en-us/library/17w5ykft.aspx\n    # or search http://msdn.microsoft.com for\n    # \"Parsing C++ Command-Line Arguments\"\n    result = []\n    needquote = False\n    for arg in map(os.fsdecode, seq):\n        bs_buf = []\n\n        # Add a space to separate this argument from the others\n        if result:\n            result.append(' ')\n\n        needquote = (\" \" in arg) or (\"\\t\" in arg) or not arg\n        if needquote:\n            result.append('\"')\n\n        for c in arg:\n            if c == '\\\\':\n                # Don't know if we need to double yet.\n                bs_buf.append(c)\n            elif c == '\"':\n                # Double backslashes.\n                result.append('\\\\' * len(bs_buf)*2)\n                bs_buf = []\n                result.append('\\\\\"')\n            else:\n                # Normal char\n                if bs_buf:\n                    result.extend(bs_buf)\n                    bs_buf = []\n                result.append(c)\n\n        # Add remaining backslashes, if any.\n        if bs_buf:\n            result.extend(bs_buf)\n\n        if needquote:\n            result.extend(bs_buf)\n            result.append('\"')\n\n    return ''.join(result)\n\n\n# Various tools for executing commands and looking at their output and status.\n#\n\ndef getstatusoutput(cmd):\n    \"\"\"Return (exitcode, output) of executing cmd in a shell.\n\n    Execute the string 'cmd' in a shell with 'check_output' and\n    return a 2-tuple (status, output). The locale encoding is used\n    to decode the output and process newlines.\n\n    A trailing newline is stripped from the output.\n    The exit status for the command can be interpreted\n    according to the rules for the function 'wait'. Example:\n\n    >>> import subprocess\n    >>> subprocess.getstatusoutput('ls /bin/ls')\n    (0, '/bin/ls')\n    >>> subprocess.getstatusoutput('cat /bin/junk')\n    (1, 'cat: /bin/junk: No such file or directory')\n    >>> subprocess.getstatusoutput('/bin/junk')\n    (127, 'sh: /bin/junk: not found')\n    >>> subprocess.getstatusoutput('/bin/kill $$')\n    (-15, '')\n    \"\"\"\n    try:\n        data = check_output(cmd, shell=True, text=True, stderr=STDOUT)\n        exitcode = 0\n    except CalledProcessError as ex:\n        data = ex.output\n        exitcode = ex.returncode\n    if data[-1:] == '\\n':\n        data = data[:-1]\n    return exitcode, data\n\ndef getoutput(cmd):\n    \"\"\"Return output (stdout or stderr) of executing cmd in a shell.\n\n    Like getstatusoutput(), except the exit status is ignored and the return\n    value is a string containing the command's output.  Example:\n\n    >>> import subprocess\n    >>> subprocess.getoutput('ls /bin/ls')\n    '/bin/ls'\n    \"\"\"\n    return getstatusoutput(cmd)[1]\n\n\ndef _use_posix_spawn():\n    \"\"\"Check if posix_spawn() can be used for subprocess.\n\n    subprocess requires a posix_spawn() implementation that properly reports\n    errors to the parent process, & sets errno on the following failures:\n\n    * Process attribute actions failed.\n    * File actions failed.\n    * exec() failed.\n\n    Prefer an implementation which can use vfork() in some cases for best\n    performance.\n    \"\"\"\n    if _mswindows or not hasattr(os, 'posix_spawn'):\n        # os.posix_spawn() is not available\n        return False\n\n    if sys.platform == 'darwin':\n        # posix_spawn() is a syscall on macOS and properly reports errors\n        return True\n\n    # Check libc name and runtime libc version\n    try:\n        ver = os.confstr('CS_GNU_LIBC_VERSION')\n        # parse 'glibc 2.28' as ('glibc', (2, 28))\n        parts = ver.split(maxsplit=1)\n        if len(parts) != 2:\n            # reject unknown format\n            raise ValueError\n        libc = parts[0]\n        version = tuple(map(int, parts[1].split('.')))\n\n        if sys.platform == 'linux' and libc == 'glibc' and version >= (2, 24):\n            # glibc 2.24 has a new Linux posix_spawn implementation using vfork\n            # which properly reports errors to the parent process.\n            return True\n        # Note: Don't use the implementation in earlier glibc because it doesn't\n        # use vfork (even if glibc 2.26 added a pipe to properly report errors\n        # to the parent process).\n    except (AttributeError, ValueError, OSError):\n        # os.confstr() or CS_GNU_LIBC_VERSION value not available\n        pass\n\n    # By default, assume that posix_spawn() does not properly report errors.\n    return False\n\n\n_USE_POSIX_SPAWN = _use_posix_spawn()\n\n\nclass Popen(object):\n    \"\"\" Execute a child program in a new process.\n\n    For a complete description of the arguments see the Python documentation.\n\n    Arguments:\n      args: A string, or a sequence of program arguments.\n\n      bufsize: supplied as the buffering argument to the open() function when\n          creating the stdin/stdout/stderr pipe file objects\n\n      executable: A replacement program to execute.\n\n      stdin, stdout and stderr: These specify the executed programs' standard\n          input, standard output and standard error file handles, respectively.\n\n      preexec_fn: (POSIX only) An object to be called in the child process\n          just before the child is executed.\n\n      close_fds: Controls closing or inheriting of file descriptors.\n\n      shell: If true, the command will be executed through the shell.\n\n      cwd: Sets the current directory before the child is executed.\n\n      env: Defines the environment variables for the new process.\n\n      text: If true, decode stdin, stdout and stderr using the given encoding\n          (if set) or the system default otherwise.\n\n      universal_newlines: Alias of text, provided for backwards compatibility.\n\n      startupinfo and creationflags (Windows only)\n\n      restore_signals (POSIX only)\n\n      start_new_session (POSIX only)\n\n      pass_fds (POSIX only)\n\n      encoding and errors: Text mode encoding and error handling to use for\n          file objects stdin, stdout and stderr.\n\n    Attributes:\n        stdin, stdout, stderr, pid, returncode\n    \"\"\"\n    _child_created = False  # Set here since __del__ checks it\n\n    def __init__(self, args, bufsize=-1, executable=None,\n                 stdin=None, stdout=None, stderr=None,\n                 preexec_fn=None, close_fds=True,\n                 shell=False, cwd=None, env=None, universal_newlines=None,\n                 startupinfo=None, creationflags=0,\n                 restore_signals=True, start_new_session=False,\n                 pass_fds=(), *, encoding=None, errors=None, text=None):\n        \"\"\"Create new Popen instance.\"\"\"\n        _cleanup()\n        # Held while anything is calling waitpid before returncode has been\n        # updated to prevent clobbering returncode if wait() or poll() are\n        # called from multiple threads at once.  After acquiring the lock,\n        # code must re-check self.returncode to see if another thread just\n        # finished a waitpid() call.\n        self._waitpid_lock = threading.Lock()\n\n        self._input = None\n        self._communication_started = False\n        if bufsize is None:\n            bufsize = -1  # Restore default\n        if not isinstance(bufsize, int):\n            raise TypeError(\"bufsize must be an integer\")\n\n        if _mswindows:\n            if preexec_fn is not None:\n                raise ValueError(\"preexec_fn is not supported on Windows \"\n                                 \"platforms\")\n        else:\n            # POSIX\n            if pass_fds and not close_fds:\n                warnings.warn(\"pass_fds overriding close_fds.\", RuntimeWarning)\n                close_fds = True\n            if startupinfo is not None:\n                raise ValueError(\"startupinfo is only supported on Windows \"\n                                 \"platforms\")\n            if creationflags != 0:\n                raise ValueError(\"creationflags is only supported on Windows \"\n                                 \"platforms\")\n\n        self.args = args\n        self.stdin = None\n        self.stdout = None\n        self.stderr = None\n        self.pid = None\n        self.returncode = None\n        self.encoding = encoding\n        self.errors = errors\n\n        # Validate the combinations of text and universal_newlines\n        if (text is not None and universal_newlines is not None\n            and bool(universal_newlines) != bool(text)):\n            raise SubprocessError('Cannot disambiguate when both text '\n                                  'and universal_newlines are supplied but '\n                                  'different. Pass one or the other.')\n\n        # Input and output objects. The general principle is like\n        # this:\n        #\n        # Parent                   Child\n        # ------                   -----\n        # p2cwrite   ---stdin--->  p2cread\n        # c2pread    <--stdout---  c2pwrite\n        # errread    <--stderr---  errwrite\n        #\n        # On POSIX, the child objects are file descriptors.  On\n        # Windows, these are Windows file handles.  The parent objects\n        # are file descriptors on both platforms.  The parent objects\n        # are -1 when not using PIPEs. The child objects are -1\n        # when not redirecting.\n\n        (p2cread, p2cwrite,\n         c2pread, c2pwrite,\n         errread, errwrite) = self._get_handles(stdin, stdout, stderr)\n\n        # We wrap OS handles *before* launching the child, otherwise a\n        # quickly terminating child could make our fds unwrappable\n        # (see #8458).\n\n        if _mswindows:\n            if p2cwrite != -1:\n                p2cwrite = msvcrt.open_osfhandle(p2cwrite.Detach(), 0)\n            if c2pread != -1:\n                c2pread = msvcrt.open_osfhandle(c2pread.Detach(), 0)\n            if errread != -1:\n                errread = msvcrt.open_osfhandle(errread.Detach(), 0)\n\n        self.text_mode = encoding or errors or text or universal_newlines\n\n        # How long to resume waiting on a child after the first ^C.\n        # There is no right value for this.  The purpose is to be polite\n        # yet remain good for interactive users trying to exit a tool.\n        self._sigint_wait_secs = 0.25  # 1/xkcd221.getRandomNumber()\n\n        self._closed_child_pipe_fds = False\n\n        if self.text_mode:\n            if bufsize == 1:\n                line_buffering = True\n                # Use the default buffer size for the underlying binary streams\n                # since they don't support line buffering.\n                bufsize = -1\n            else:\n                line_buffering = False\n\n        try:\n            if p2cwrite != -1:\n                self.stdin = io.open(p2cwrite, 'wb', bufsize)\n                if self.text_mode:\n                    self.stdin = io.TextIOWrapper(self.stdin, write_through=True,\n                            line_buffering=line_buffering,\n                            encoding=encoding, errors=errors)\n            if c2pread != -1:\n                self.stdout = io.open(c2pread, 'rb', bufsize)\n                if self.text_mode:\n                    self.stdout = io.TextIOWrapper(self.stdout,\n                            encoding=encoding, errors=errors)\n            if errread != -1:\n                self.stderr = io.open(errread, 'rb', bufsize)\n                if self.text_mode:\n                    self.stderr = io.TextIOWrapper(self.stderr,\n                            encoding=encoding, errors=errors)\n\n            self._execute_child(args, executable, preexec_fn, close_fds,\n                                pass_fds, cwd, env,\n                                startupinfo, creationflags, shell,\n                                p2cread, p2cwrite,\n                                c2pread, c2pwrite,\n                                errread, errwrite,\n                                restore_signals, start_new_session)\n        except:\n            # Cleanup if the child failed starting.\n            for f in filter(None, (self.stdin, self.stdout, self.stderr)):\n                try:\n                    f.close()\n                except OSError:\n                    pass  # Ignore EBADF or other errors.\n\n            if not self._closed_child_pipe_fds:\n                to_close = []\n                if stdin == PIPE:\n                    to_close.append(p2cread)\n                if stdout == PIPE:\n                    to_close.append(c2pwrite)\n                if stderr == PIPE:\n                    to_close.append(errwrite)\n                if hasattr(self, '_devnull'):\n                    to_close.append(self._devnull)\n                for fd in to_close:\n                    try:\n                        if _mswindows and isinstance(fd, Handle):\n                            fd.Close()\n                        else:\n                            os.close(fd)\n                    except OSError:\n                        pass\n\n            raise\n\n    @property\n    def universal_newlines(self):\n        # universal_newlines as retained as an alias of text_mode for API\n        # compatibility. bpo-31756\n        return self.text_mode\n\n    @universal_newlines.setter\n    def universal_newlines(self, universal_newlines):\n        self.text_mode = bool(universal_newlines)\n\n    def _translate_newlines(self, data, encoding, errors):\n        data = data.decode(encoding, errors)\n        return data.replace(\"\\r\\n\", \"\\n\").replace(\"\\r\", \"\\n\")\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, value, traceback):\n        if self.stdout:\n            self.stdout.close()\n        if self.stderr:\n            self.stderr.close()\n        try:  # Flushing a BufferedWriter may raise an error\n            if self.stdin:\n                self.stdin.close()\n        finally:\n            if exc_type == KeyboardInterrupt:\n                # https://bugs.python.org/issue25942\n                # In the case of a KeyboardInterrupt we assume the SIGINT\n                # was also already sent to our child processes.  We can't\n                # block indefinitely as that is not user friendly.\n                # If we have not already waited a brief amount of time in\n                # an interrupted .wait() or .communicate() call, do so here\n                # for consistency.\n                if self._sigint_wait_secs > 0:\n                    try:\n                        self._wait(timeout=self._sigint_wait_secs)\n                    except TimeoutExpired:\n                        pass\n                self._sigint_wait_secs = 0  # Note that this has been done.\n                return  # resume the KeyboardInterrupt\n\n            # Wait for the process to terminate, to avoid zombies.\n            self.wait()\n\n    def __del__(self, _maxsize=sys.maxsize, _warn=warnings.warn):\n        if not self._child_created:\n            # We didn't get to successfully create a child process.\n            return\n        if self.returncode is None:\n            # Not reading subprocess exit status creates a zombie process which\n            # is only destroyed at the parent python process exit\n            _warn(\"subprocess %s is still running\" % self.pid,\n                  ResourceWarning, source=self)\n        # In case the child hasn't been waited on, check if it's done.\n        self._internal_poll(_deadstate=_maxsize)\n        if self.returncode is None and _active is not None:\n            # Child is still running, keep us alive until we can wait on it.\n            _active.append(self)\n\n    def _get_devnull(self):\n        if not hasattr(self, '_devnull'):\n            self._devnull = os.open(os.devnull, os.O_RDWR)\n        return self._devnull\n\n    def _stdin_write(self, input):\n        if input:\n            try:\n                self.stdin.write(input)\n            except BrokenPipeError:\n                pass  # communicate() must ignore broken pipe errors.\n            except OSError as exc:\n                if exc.errno == errno.EINVAL:\n                    # bpo-19612, bpo-30418: On Windows, stdin.write() fails\n                    # with EINVAL if the child process exited or if the child\n                    # process is still running but closed the pipe.\n                    pass\n                else:\n                    raise\n\n        try:\n            self.stdin.close()\n        except BrokenPipeError:\n            pass  # communicate() must ignore broken pipe errors.\n        except OSError as exc:\n            if exc.errno == errno.EINVAL:\n                pass\n            else:\n                raise\n\n    def communicate(self, input=None, timeout=None):\n        \"\"\"Interact with process: Send data to stdin and close it.\n        Read data from stdout and stderr, until end-of-file is\n        reached.  Wait for process to terminate.\n\n        The optional \"input\" argument should be data to be sent to the\n        child process, or None, if no data should be sent to the child.\n        communicate() returns a tuple (stdout, stderr).\n\n        By default, all communication is in bytes, and therefore any\n        \"input\" should be bytes, and the (stdout, stderr) will be bytes.\n        If in text mode (indicated by self.text_mode), any \"input\" should\n        be a string, and (stdout, stderr) will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode\n        is triggered by setting any of text, encoding, errors or\n        universal_newlines.\n        \"\"\"\n\n        if self._communication_started and input:\n            raise ValueError(\"Cannot send input after starting communication\")\n\n        # Optimization: If we are not worried about timeouts, we haven't\n        # started communicating, and we have one or zero pipes, using select()\n        # or threads is unnecessary.\n        if (timeout is None and not self._communication_started and\n            [self.stdin, self.stdout, self.stderr].count(None) >= 2):\n            stdout = None\n            stderr = None\n            if self.stdin:\n                self._stdin_write(input)\n            elif self.stdout:\n                stdout = self.stdout.read()\n                self.stdout.close()\n            elif self.stderr:\n                stderr = self.stderr.read()\n                self.stderr.close()\n            self.wait()\n        else:\n            if timeout is not None:\n                endtime = _time() + timeout\n            else:\n                endtime = None\n\n            try:\n                stdout, stderr = self._communicate(input, endtime, timeout)\n            except KeyboardInterrupt:\n                # https://bugs.python.org/issue25942\n                # See the detailed comment in .wait().\n                if timeout is not None:\n                    sigint_timeout = min(self._sigint_wait_secs,\n                                         self._remaining_time(endtime))\n                else:\n                    sigint_timeout = self._sigint_wait_secs\n                self._sigint_wait_secs = 0  # nothing else should wait.\n                try:\n                    self._wait(timeout=sigint_timeout)\n                except TimeoutExpired:\n                    pass\n                raise  # resume the KeyboardInterrupt\n\n            finally:\n                self._communication_started = True\n\n            sts = self.wait(timeout=self._remaining_time(endtime))\n\n        return (stdout, stderr)\n\n\n    def poll(self):\n        \"\"\"Check if child process has terminated. Set and return returncode\n        attribute.\"\"\"\n        return self._internal_poll()\n\n\n    def _remaining_time(self, endtime):\n        \"\"\"Convenience for _communicate when computing timeouts.\"\"\"\n        if endtime is None:\n            return None\n        else:\n            return endtime - _time()\n\n\n    def _check_timeout(self, endtime, orig_timeout, stdout_seq, stderr_seq,\n                       skip_check_and_raise=False):\n        \"\"\"Convenience for checking if a timeout has expired.\"\"\"\n        if endtime is None:\n            return\n        if skip_check_and_raise or _time() > endtime:\n            raise TimeoutExpired(\n                    self.args, orig_timeout,\n                    output=b''.join(stdout_seq) if stdout_seq else None,\n                    stderr=b''.join(stderr_seq) if stderr_seq else None)\n\n\n    def wait(self, timeout=None):\n        \"\"\"Wait for child process to terminate; returns self.returncode.\"\"\"\n        if timeout is not None:\n            endtime = _time() + timeout\n        try:\n            return self._wait(timeout=timeout)\n        except KeyboardInterrupt:\n            # https://bugs.python.org/issue25942\n            # The first keyboard interrupt waits briefly for the child to\n            # exit under the common assumption that it also received the ^C\n            # generated SIGINT and will exit rapidly.\n            if timeout is not None:\n                sigint_timeout = min(self._sigint_wait_secs,\n                                     self._remaining_time(endtime))\n            else:\n                sigint_timeout = self._sigint_wait_secs\n            self._sigint_wait_secs = 0  # nothing else should wait.\n            try:\n                self._wait(timeout=sigint_timeout)\n            except TimeoutExpired:\n                pass\n            raise  # resume the KeyboardInterrupt\n\n    def _close_pipe_fds(self,\n                        p2cread, p2cwrite,\n                        c2pread, c2pwrite,\n                        errread, errwrite):\n        # self._devnull is not always defined.\n        devnull_fd = getattr(self, '_devnull', None)\n\n        with contextlib.ExitStack() as stack:\n            if _mswindows:\n                if p2cread != -1:\n                    stack.callback(p2cread.Close)\n                if c2pwrite != -1:\n                    stack.callback(c2pwrite.Close)\n                if errwrite != -1:\n                    stack.callback(errwrite.Close)\n            else:\n                if p2cread != -1 and p2cwrite != -1 and p2cread != devnull_fd:\n                    stack.callback(os.close, p2cread)\n                if c2pwrite != -1 and c2pread != -1 and c2pwrite != devnull_fd:\n                    stack.callback(os.close, c2pwrite)\n                if errwrite != -1 and errread != -1 and errwrite != devnull_fd:\n                    stack.callback(os.close, errwrite)\n\n            if devnull_fd is not None:\n                stack.callback(os.close, devnull_fd)\n\n        # Prevent a double close of these handles/fds from __init__ on error.\n        self._closed_child_pipe_fds = True\n\n    if _mswindows:\n        #\n        # Windows methods\n        #\n        def _get_handles(self, stdin, stdout, stderr):\n            \"\"\"Construct and return tuple with IO objects:\n            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite\n            \"\"\"\n            if stdin is None and stdout is None and stderr is None:\n                return (-1, -1, -1, -1, -1, -1)\n\n            p2cread, p2cwrite = -1, -1\n            c2pread, c2pwrite = -1, -1\n            errread, errwrite = -1, -1\n\n            if stdin is None:\n                p2cread = _winapi.GetStdHandle(_winapi.STD_INPUT_HANDLE)\n                if p2cread is None:\n                    p2cread, _ = _winapi.CreatePipe(None, 0)\n                    p2cread = Handle(p2cread)\n                    _winapi.CloseHandle(_)\n            elif stdin == PIPE:\n                p2cread, p2cwrite = _winapi.CreatePipe(None, 0)\n                p2cread, p2cwrite = Handle(p2cread), Handle(p2cwrite)\n            elif stdin == DEVNULL:\n                p2cread = msvcrt.get_osfhandle(self._get_devnull())\n            elif isinstance(stdin, int):\n                p2cread = msvcrt.get_osfhandle(stdin)\n            else:\n                # Assuming file-like object\n                p2cread = msvcrt.get_osfhandle(stdin.fileno())\n            p2cread = self._make_inheritable(p2cread)\n\n            if stdout is None:\n                c2pwrite = _winapi.GetStdHandle(_winapi.STD_OUTPUT_HANDLE)\n                if c2pwrite is None:\n                    _, c2pwrite = _winapi.CreatePipe(None, 0)\n                    c2pwrite = Handle(c2pwrite)\n                    _winapi.CloseHandle(_)\n            elif stdout == PIPE:\n                c2pread, c2pwrite = _winapi.CreatePipe(None, 0)\n                c2pread, c2pwrite = Handle(c2pread), Handle(c2pwrite)\n            elif stdout == DEVNULL:\n                c2pwrite = msvcrt.get_osfhandle(self._get_devnull())\n            elif isinstance(stdout, int):\n                c2pwrite = msvcrt.get_osfhandle(stdout)\n            else:\n                # Assuming file-like object\n                c2pwrite = msvcrt.get_osfhandle(stdout.fileno())\n            c2pwrite = self._make_inheritable(c2pwrite)\n\n            if stderr is None:\n                errwrite = _winapi.GetStdHandle(_winapi.STD_ERROR_HANDLE)\n                if errwrite is None:\n                    _, errwrite = _winapi.CreatePipe(None, 0)\n                    errwrite = Handle(errwrite)\n                    _winapi.CloseHandle(_)\n            elif stderr == PIPE:\n                errread, errwrite = _winapi.CreatePipe(None, 0)\n                errread, errwrite = Handle(errread), Handle(errwrite)\n            elif stderr == STDOUT:\n                errwrite = c2pwrite\n            elif stderr == DEVNULL:\n                errwrite = msvcrt.get_osfhandle(self._get_devnull())\n            elif isinstance(stderr, int):\n                errwrite = msvcrt.get_osfhandle(stderr)\n            else:\n                # Assuming file-like object\n                errwrite = msvcrt.get_osfhandle(stderr.fileno())\n            errwrite = self._make_inheritable(errwrite)\n\n            return (p2cread, p2cwrite,\n                    c2pread, c2pwrite,\n                    errread, errwrite)\n\n\n        def _make_inheritable(self, handle):\n            \"\"\"Return a duplicate of handle, which is inheritable\"\"\"\n            h = _winapi.DuplicateHandle(\n                _winapi.GetCurrentProcess(), handle,\n                _winapi.GetCurrentProcess(), 0, 1,\n                _winapi.DUPLICATE_SAME_ACCESS)\n            return Handle(h)\n\n\n        def _filter_handle_list(self, handle_list):\n            \"\"\"Filter out console handles that can't be used\n            in lpAttributeList[\"handle_list\"] and make sure the list\n            isn't empty. This also removes duplicate handles.\"\"\"\n            # An handle with it's lowest two bits set might be a special console\n            # handle that if passed in lpAttributeList[\"handle_list\"], will\n            # cause it to fail.\n            return list({handle for handle in handle_list\n                         if handle & 0x3 != 0x3\n                         or _winapi.GetFileType(handle) !=\n                            _winapi.FILE_TYPE_CHAR})\n\n\n        def _execute_child(self, args, executable, preexec_fn, close_fds,\n                           pass_fds, cwd, env,\n                           startupinfo, creationflags, shell,\n                           p2cread, p2cwrite,\n                           c2pread, c2pwrite,\n                           errread, errwrite,\n                           unused_restore_signals, unused_start_new_session):\n            \"\"\"Execute program (MS Windows version)\"\"\"\n\n            assert not pass_fds, \"pass_fds not supported on Windows.\"\n\n            if isinstance(args, str):\n                pass\n            elif isinstance(args, bytes):\n                if shell:\n                    raise TypeError('bytes args is not allowed on Windows')\n                args = list2cmdline([args])\n            elif isinstance(args, os.PathLike):\n                if shell:\n                    raise TypeError('path-like args is not allowed when '\n                                    'shell is true')\n                args = list2cmdline([args])\n            else:\n                args = list2cmdline(args)\n\n            if executable is not None:\n                executable = os.fsdecode(executable)\n\n            # Process startup details\n            if startupinfo is None:\n                startupinfo = STARTUPINFO()\n            else:\n                # bpo-34044: Copy STARTUPINFO since it is modified above,\n                # so the caller can reuse it multiple times.\n                startupinfo = startupinfo.copy()\n\n            use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n            if use_std_handles:\n                startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n                startupinfo.hStdInput = p2cread\n                startupinfo.hStdOutput = c2pwrite\n                startupinfo.hStdError = errwrite\n\n            attribute_list = startupinfo.lpAttributeList\n            have_handle_list = bool(attribute_list and\n                                    \"handle_list\" in attribute_list and\n                                    attribute_list[\"handle_list\"])\n\n            # If we were given an handle_list or need to create one\n            if have_handle_list or (use_std_handles and close_fds):\n                if attribute_list is None:\n                    attribute_list = startupinfo.lpAttributeList = {}\n                handle_list = attribute_list[\"handle_list\"] = \\\n                    list(attribute_list.get(\"handle_list\", []))\n\n                if use_std_handles:\n                    handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n\n                handle_list[:] = self._filter_handle_list(handle_list)\n\n                if handle_list:\n                    if not close_fds:\n                        warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                      \"overriding close_fds\", RuntimeWarning)\n\n                    # When using the handle_list we always request to inherit\n                    # handles but the only handles that will be inherited are\n                    # the ones in the handle_list\n                    close_fds = False\n\n            if shell:\n                startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n                startupinfo.wShowWindow = _winapi.SW_HIDE\n                if not executable:\n                    # gh-101283: without a fully-qualified path, before Windows\n                    # checks the system directories, it first looks in the\n                    # application directory, and also the current directory if\n                    # NeedCurrentDirectoryForExePathW(ExeName) is true, so try\n                    # to avoid executing unqualified \"cmd.exe\".\n                    comspec = os.environ.get('ComSpec')\n                    if not comspec:\n                        system_root = os.environ.get('SystemRoot', '')\n                        comspec = os.path.join(system_root, 'System32', 'cmd.exe')\n                        if not os.path.isabs(comspec):\n                            raise FileNotFoundError('shell not found: neither %ComSpec% nor %SystemRoot% is set')\n                    if os.path.isabs(comspec):\n                        executable = comspec\n                else:\n                    comspec = executable\n\n                args = '{} /c \"{}\"'.format (comspec, args)\n\n            if cwd is not None:\n                cwd = os.fsdecode(cwd)\n\n            sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n\n            # Start the process\n            try:\n                hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                         # no special security\n                                         None, None,\n                                         int(not close_fds),\n                                         creationflags,\n                                         env,\n                                         cwd,\n                                         startupinfo)\n            finally:\n                # Child is launched. Close the parent's copy of those pipe\n                # handles that only the child should have open.  You need\n                # to make sure that no handles to the write end of the\n                # output pipe are maintained in this process or else the\n                # pipe will not close when the child process exits and the\n                # ReadFile will hang.\n                self._close_pipe_fds(p2cread, p2cwrite,\n                                     c2pread, c2pwrite,\n                                     errread, errwrite)\n\n            # Retain the process handle, but close the thread handle\n            self._child_created = True\n            self._handle = Handle(hp)\n            self.pid = pid\n            _winapi.CloseHandle(ht)\n\n        def _internal_poll(self, _deadstate=None,\n                _WaitForSingleObject=_winapi.WaitForSingleObject,\n                _WAIT_OBJECT_0=_winapi.WAIT_OBJECT_0,\n                _GetExitCodeProcess=_winapi.GetExitCodeProcess):\n            \"\"\"Check if child process has terminated.  Returns returncode\n            attribute.\n\n            This method is called by __del__, so it can only refer to objects\n            in its local scope.\n\n            \"\"\"\n            if self.returncode is None:\n                if _WaitForSingleObject(self._handle, 0) == _WAIT_OBJECT_0:\n                    self.returncode = _GetExitCodeProcess(self._handle)\n            return self.returncode\n\n\n        def _wait(self, timeout):\n            \"\"\"Internal implementation of wait() on Windows.\"\"\"\n            if timeout is None:\n                timeout_millis = _winapi.INFINITE\n            else:\n                timeout_millis = int(timeout * 1000)\n            if self.returncode is None:\n                # API note: Returns immediately if timeout_millis == 0.\n                result = _winapi.WaitForSingleObject(self._handle,\n                                                     timeout_millis)\n                if result == _winapi.WAIT_TIMEOUT:\n                    raise TimeoutExpired(self.args, timeout)\n                self.returncode = _winapi.GetExitCodeProcess(self._handle)\n            return self.returncode\n\n\n        def _readerthread(self, fh, buffer):\n            buffer.append(fh.read())\n            fh.close()\n\n\n        def _communicate(self, input, endtime, orig_timeout):\n            # Start reader threads feeding into a list hanging off of this\n            # object, unless they've already been started.\n            if self.stdout and not hasattr(self, \"_stdout_buff\"):\n                self._stdout_buff = []\n                self.stdout_thread = \\\n                        threading.Thread(target=self._readerthread,\n                                         args=(self.stdout, self._stdout_buff))\n                self.stdout_thread.daemon = True\n                self.stdout_thread.start()\n            if self.stderr and not hasattr(self, \"_stderr_buff\"):\n                self._stderr_buff = []\n                self.stderr_thread = \\\n                        threading.Thread(target=self._readerthread,\n                                         args=(self.stderr, self._stderr_buff))\n                self.stderr_thread.daemon = True\n                self.stderr_thread.start()\n\n            if self.stdin:\n                self._stdin_write(input)\n\n            # Wait for the reader threads, or time out.  If we time out, the\n            # threads remain reading and the fds left open in case the user\n            # calls communicate again.\n            if self.stdout is not None:\n                self.stdout_thread.join(self._remaining_time(endtime))\n                if self.stdout_thread.is_alive():\n                    raise TimeoutExpired(self.args, orig_timeout)\n            if self.stderr is not None:\n                self.stderr_thread.join(self._remaining_time(endtime))\n                if self.stderr_thread.is_alive():\n                    raise TimeoutExpired(self.args, orig_timeout)\n\n            # Collect the output from and close both pipes, now that we know\n            # both have been read successfully.\n            stdout = None\n            stderr = None\n            if self.stdout:\n                stdout = self._stdout_buff\n                self.stdout.close()\n            if self.stderr:\n                stderr = self._stderr_buff\n                self.stderr.close()\n\n            # All data exchanged.  Translate lists into strings.\n            stdout = stdout[0] if stdout else None\n            stderr = stderr[0] if stderr else None\n\n            return (stdout, stderr)\n\n        def send_signal(self, sig):\n            \"\"\"Send a signal to the process.\"\"\"\n            # Don't signal a process that we know has already died.\n            if self.returncode is not None:\n                return\n            if sig == signal.SIGTERM:\n                self.terminate()\n            elif sig == signal.CTRL_C_EVENT:\n                os.kill(self.pid, signal.CTRL_C_EVENT)\n            elif sig == signal.CTRL_BREAK_EVENT:\n                os.kill(self.pid, signal.CTRL_BREAK_EVENT)\n            else:\n                raise ValueError(\"Unsupported signal: {}\".format(sig))\n\n        def terminate(self):\n            \"\"\"Terminates the process.\"\"\"\n            # Don't terminate a process that we know has already died.\n            if self.returncode is not None:\n                return\n            try:\n                _winapi.TerminateProcess(self._handle, 1)\n            except PermissionError:\n                # ERROR_ACCESS_DENIED (winerror 5) is received when the\n                # process already died.\n                rc = _winapi.GetExitCodeProcess(self._handle)\n                if rc == _winapi.STILL_ACTIVE:\n                    raise\n                self.returncode = rc\n\n        kill = terminate\n\n    else:\n        #\n        # POSIX methods\n        #\n        def _get_handles(self, stdin, stdout, stderr):\n            \"\"\"Construct and return tuple with IO objects:\n            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite\n            \"\"\"\n            p2cread, p2cwrite = -1, -1\n            c2pread, c2pwrite = -1, -1\n            errread, errwrite = -1, -1\n\n            if stdin is None:\n                pass\n            elif stdin == PIPE:\n                p2cread, p2cwrite = os.pipe()\n            elif stdin == DEVNULL:\n                p2cread = self._get_devnull()\n            elif isinstance(stdin, int):\n                p2cread = stdin\n            else:\n                # Assuming file-like object\n                p2cread = stdin.fileno()\n\n            if stdout is None:\n                pass\n            elif stdout == PIPE:\n                c2pread, c2pwrite = os.pipe()\n            elif stdout == DEVNULL:\n                c2pwrite = self._get_devnull()\n            elif isinstance(stdout, int):\n                c2pwrite = stdout\n            else:\n                # Assuming file-like object\n                c2pwrite = stdout.fileno()\n\n            if stderr is None:\n                pass\n            elif stderr == PIPE:\n                errread, errwrite = os.pipe()\n            elif stderr == STDOUT:\n                if c2pwrite != -1:\n                    errwrite = c2pwrite\n                else: # child's stdout is not set, use parent's stdout\n                    errwrite = sys.__stdout__.fileno()\n            elif stderr == DEVNULL:\n                errwrite = self._get_devnull()\n            elif isinstance(stderr, int):\n                errwrite = stderr\n            else:\n                # Assuming file-like object\n                errwrite = stderr.fileno()\n\n            return (p2cread, p2cwrite,\n                    c2pread, c2pwrite,\n                    errread, errwrite)\n\n\n        def _posix_spawn(self, args, executable, env, restore_signals,\n                         p2cread, p2cwrite,\n                         c2pread, c2pwrite,\n                         errread, errwrite):\n            \"\"\"Execute program using os.posix_spawn().\"\"\"\n            if env is None:\n                env = os.environ\n\n            kwargs = {}\n            if restore_signals:\n                # See _Py_RestoreSignals() in Python/pylifecycle.c\n                sigset = []\n                for signame in ('SIGPIPE', 'SIGXFZ', 'SIGXFSZ'):\n                    signum = getattr(signal, signame, None)\n                    if signum is not None:\n                        sigset.append(signum)\n                kwargs['setsigdef'] = sigset\n\n            file_actions = []\n            for fd in (p2cwrite, c2pread, errread):\n                if fd != -1:\n                    file_actions.append((os.POSIX_SPAWN_CLOSE, fd))\n            for fd, fd2 in (\n                (p2cread, 0),\n                (c2pwrite, 1),\n                (errwrite, 2),\n            ):\n                if fd != -1:\n                    file_actions.append((os.POSIX_SPAWN_DUP2, fd, fd2))\n            if file_actions:\n                kwargs['file_actions'] = file_actions\n\n            self.pid = os.posix_spawn(executable, args, env, **kwargs)\n            self._child_created = True\n\n            self._close_pipe_fds(p2cread, p2cwrite,\n                                 c2pread, c2pwrite,\n                                 errread, errwrite)\n\n        def _execute_child(self, args, executable, preexec_fn, close_fds,\n                           pass_fds, cwd, env,\n                           startupinfo, creationflags, shell,\n                           p2cread, p2cwrite,\n                           c2pread, c2pwrite,\n                           errread, errwrite,\n                           restore_signals, start_new_session):\n            \"\"\"Execute program (POSIX version)\"\"\"\n\n            if isinstance(args, (str, bytes)):\n                args = [args]\n            elif isinstance(args, os.PathLike):\n                if shell:\n                    raise TypeError('path-like args is not allowed when '\n                                    'shell is true')\n                args = [args]\n            else:\n                args = list(args)\n\n            if shell:\n                # On Android the default shell is at '/system/bin/sh'.\n                unix_shell = ('/system/bin/sh' if\n                          hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n                args = [unix_shell, \"-c\"] + args\n                if executable:\n                    args[0] = executable\n\n            if executable is None:\n                executable = args[0]\n\n            sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n\n            if (_USE_POSIX_SPAWN\n                    and os.path.dirname(executable)\n                    and preexec_fn is None\n                    and not close_fds\n                    and not pass_fds\n                    and cwd is None\n                    and (p2cread == -1 or p2cread > 2)\n                    and (c2pwrite == -1 or c2pwrite > 2)\n                    and (errwrite == -1 or errwrite > 2)\n                    and not start_new_session):\n                self._posix_spawn(args, executable, env, restore_signals,\n                                  p2cread, p2cwrite,\n                                  c2pread, c2pwrite,\n                                  errread, errwrite)\n                return\n\n            orig_executable = executable\n\n            # For transferring possible exec failure from child to parent.\n            # Data format: \"exception name:hex errno:description\"\n            # Pickle is not used; it is complex and involves memory allocation.\n            errpipe_read, errpipe_write = os.pipe()\n            # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n            low_fds_to_close = []\n            while errpipe_write < 3:\n                low_fds_to_close.append(errpipe_write)\n                errpipe_write = os.dup(errpipe_write)\n            for low_fd in low_fds_to_close:\n                os.close(low_fd)\n            try:\n                try:\n                    # We must avoid complex work that could involve\n                    # malloc or free in the child process to avoid\n                    # potential deadlocks, thus we do all this here.\n                    # and pass it to fork_exec()\n\n                    if env is not None:\n                        env_list = []\n                        for k, v in env.items():\n                            k = os.fsencode(k)\n                            if b'=' in k:\n                                raise ValueError(\"illegal environment variable name\")\n                            env_list.append(k + b'=' + os.fsencode(v))\n                    else:\n                        env_list = None  # Use execv instead of execve.\n                    executable = os.fsencode(executable)\n                    if os.path.dirname(executable):\n                        executable_list = (executable,)\n                    else:\n                        # This matches the behavior of os._execvpe().\n                        executable_list = tuple(\n                            os.path.join(os.fsencode(dir), executable)\n                            for dir in os.get_exec_path(env))\n                    fds_to_keep = set(pass_fds)\n                    fds_to_keep.add(errpipe_write)\n                    self.pid = _posixsubprocess.fork_exec(\n                            args, executable_list,\n                            close_fds, tuple(sorted(map(int, fds_to_keep))),\n                            cwd, env_list,\n                            p2cread, p2cwrite, c2pread, c2pwrite,\n                            errread, errwrite,\n                            errpipe_read, errpipe_write,\n                            restore_signals, start_new_session, preexec_fn)\n                    self._child_created = True\n                finally:\n                    # be sure the FD is closed no matter what\n                    os.close(errpipe_write)\n\n                self._close_pipe_fds(p2cread, p2cwrite,\n                                     c2pread, c2pwrite,\n                                     errread, errwrite)\n\n                # Wait for exec to fail or succeed; possibly raising an\n                # exception (limited in size)\n                errpipe_data = bytearray()\n                while True:\n                    part = os.read(errpipe_read, 50000)\n                    errpipe_data += part\n                    if not part or len(errpipe_data) > 50000:\n                        break\n            finally:\n                # be sure the FD is closed no matter what\n                os.close(errpipe_read)\n\n            if errpipe_data:\n                try:\n                    pid, sts = os.waitpid(self.pid, 0)\n                    if pid == self.pid:\n                        self._handle_exitstatus(sts)\n                    else:\n                        self.returncode = sys.maxsize\n                except ChildProcessError:\n                    pass\n\n                try:\n                    exception_name, hex_errno, err_msg = (\n                            errpipe_data.split(b':', 2))\n                    # The encoding here should match the encoding\n                    # written in by the subprocess implementations\n                    # like _posixsubprocess\n                    err_msg = err_msg.decode()\n                except ValueError:\n                    exception_name = b'SubprocessError'\n                    hex_errno = b'0'\n                    err_msg = 'Bad exception data from child: {!r}'.format(\n                                  bytes(errpipe_data))\n                child_exception_type = getattr(\n                        builtins, exception_name.decode('ascii'),\n                        SubprocessError)\n                if issubclass(child_exception_type, OSError) and hex_errno:\n                    errno_num = int(hex_errno, 16)\n                    child_exec_never_called = (err_msg == \"noexec\")\n                    if child_exec_never_called:\n                        err_msg = \"\"\n                        # The error must be from chdir(cwd).\n                        err_filename = cwd\n                    else:\n                        err_filename = orig_executable\n                    if errno_num != 0:\n                        err_msg = os.strerror(errno_num)\n                    raise child_exception_type(errno_num, err_msg, err_filename)\n                raise child_exception_type(err_msg)\n\n\n        def _handle_exitstatus(self, sts, _WIFSIGNALED=os.WIFSIGNALED,\n                _WTERMSIG=os.WTERMSIG, _WIFEXITED=os.WIFEXITED,\n                _WEXITSTATUS=os.WEXITSTATUS, _WIFSTOPPED=os.WIFSTOPPED,\n                _WSTOPSIG=os.WSTOPSIG):\n            \"\"\"All callers to this function MUST hold self._waitpid_lock.\"\"\"\n            # This method is called (indirectly) by __del__, so it cannot\n            # refer to anything outside of its local scope.\n            if _WIFSIGNALED(sts):\n                self.returncode = -_WTERMSIG(sts)\n            elif _WIFEXITED(sts):\n                self.returncode = _WEXITSTATUS(sts)\n            elif _WIFSTOPPED(sts):\n                self.returncode = -_WSTOPSIG(sts)\n            else:\n                # Should never happen\n                raise SubprocessError(\"Unknown child exit status!\")\n\n\n        def _internal_poll(self, _deadstate=None, _waitpid=os.waitpid,\n                _WNOHANG=os.WNOHANG, _ECHILD=errno.ECHILD):\n            \"\"\"Check if child process has terminated.  Returns returncode\n            attribute.\n\n            This method is called by __del__, so it cannot reference anything\n            outside of the local scope (nor can any methods it calls).\n\n            \"\"\"\n            if self.returncode is None:\n                if not self._waitpid_lock.acquire(False):\n                    # Something else is busy calling waitpid.  Don't allow two\n                    # at once.  We know nothing yet.\n                    return None\n                try:\n                    if self.returncode is not None:\n                        return self.returncode  # Another thread waited.\n                    pid, sts = _waitpid(self.pid, _WNOHANG)\n                    if pid == self.pid:\n                        self._handle_exitstatus(sts)\n                except OSError as e:\n                    if _deadstate is not None:\n                        self.returncode = _deadstate\n                    elif e.errno == _ECHILD:\n                        # This happens if SIGCLD is set to be ignored or\n                        # waiting for child processes has otherwise been\n                        # disabled for our process.  This child is dead, we\n                        # can't get the status.\n                        # http://bugs.python.org/issue15756\n                        self.returncode = 0\n                finally:\n                    self._waitpid_lock.release()\n            return self.returncode\n\n\n        def _try_wait(self, wait_flags):\n            \"\"\"All callers to this function MUST hold self._waitpid_lock.\"\"\"\n            try:\n                (pid, sts) = os.waitpid(self.pid, wait_flags)\n            except ChildProcessError:\n                # This happens if SIGCLD is set to be ignored or waiting\n                # for child processes has otherwise been disabled for our\n                # process.  This child is dead, we can't get the status.\n                pid = self.pid\n                sts = 0\n            return (pid, sts)\n\n\n        def _wait(self, timeout):\n            \"\"\"Internal implementation of wait() on POSIX.\"\"\"\n            if self.returncode is not None:\n                return self.returncode\n\n            if timeout is not None:\n                endtime = _time() + timeout\n                # Enter a busy loop if we have a timeout.  This busy loop was\n                # cribbed from Lib/threading.py in Thread.wait() at r71065.\n                delay = 0.0005 # 500 us -> initial delay of 1 ms\n                while True:\n                    if self._waitpid_lock.acquire(False):\n                        try:\n                            if self.returncode is not None:\n                                break  # Another thread waited.\n                            (pid, sts) = self._try_wait(os.WNOHANG)\n                            assert pid == self.pid or pid == 0\n                            if pid == self.pid:\n                                self._handle_exitstatus(sts)\n                                break\n                        finally:\n                            self._waitpid_lock.release()\n                    remaining = self._remaining_time(endtime)\n                    if remaining <= 0:\n                        raise TimeoutExpired(self.args, timeout)\n                    delay = min(delay * 2, remaining, .05)\n                    time.sleep(delay)\n            else:\n                while self.returncode is None:\n                    with self._waitpid_lock:\n                        if self.returncode is not None:\n                            break  # Another thread waited.\n                        (pid, sts) = self._try_wait(0)\n                        # Check the pid and loop as waitpid has been known to\n                        # return 0 even without WNOHANG in odd situations.\n                        # http://bugs.python.org/issue14396.\n                        if pid == self.pid:\n                            self._handle_exitstatus(sts)\n            return self.returncode\n\n\n        def _communicate(self, input, endtime, orig_timeout):\n            if self.stdin and not self._communication_started:\n                # Flush stdio buffer.  This might block, if the user has\n                # been writing to .stdin in an uncontrolled fashion.\n                try:\n                    self.stdin.flush()\n                except BrokenPipeError:\n                    pass  # communicate() must ignore BrokenPipeError.\n                if not input:\n                    try:\n                        self.stdin.close()\n                    except BrokenPipeError:\n                        pass  # communicate() must ignore BrokenPipeError.\n\n            stdout = None\n            stderr = None\n\n            # Only create this mapping if we haven't already.\n            if not self._communication_started:\n                self._fileobj2output = {}\n                if self.stdout:\n                    self._fileobj2output[self.stdout] = []\n                if self.stderr:\n                    self._fileobj2output[self.stderr] = []\n\n            if self.stdout:\n                stdout = self._fileobj2output[self.stdout]\n            if self.stderr:\n                stderr = self._fileobj2output[self.stderr]\n\n            self._save_input(input)\n\n            if self._input:\n                input_view = memoryview(self._input)\n\n            with _PopenSelector() as selector:\n                if self.stdin and input:\n                    selector.register(self.stdin, selectors.EVENT_WRITE)\n                if self.stdout and not self.stdout.closed:\n                    selector.register(self.stdout, selectors.EVENT_READ)\n                if self.stderr and not self.stderr.closed:\n                    selector.register(self.stderr, selectors.EVENT_READ)\n\n                while selector.get_map():\n                    timeout = self._remaining_time(endtime)\n                    if timeout is not None and timeout < 0:\n                        self._check_timeout(endtime, orig_timeout,\n                                            stdout, stderr,\n                                            skip_check_and_raise=True)\n                        raise RuntimeError(  # Impossible :)\n                            '_check_timeout(..., skip_check_and_raise=True) '\n                            'failed to raise TimeoutExpired.')\n\n                    ready = selector.select(timeout)\n                    self._check_timeout(endtime, orig_timeout, stdout, stderr)\n\n                    # XXX Rewrite these to use non-blocking I/O on the file\n                    # objects; they are no longer using C stdio!\n\n                    for key, events in ready:\n                        if key.fileobj is self.stdin:\n                            chunk = input_view[self._input_offset :\n                                               self._input_offset + _PIPE_BUF]\n                            try:\n                                self._input_offset += os.write(key.fd, chunk)\n                            except BrokenPipeError:\n                                selector.unregister(key.fileobj)\n                                key.fileobj.close()\n                            else:\n                                if self._input_offset >= len(self._input):\n                                    selector.unregister(key.fileobj)\n                                    key.fileobj.close()\n                        elif key.fileobj in (self.stdout, self.stderr):\n                            data = os.read(key.fd, 32768)\n                            if not data:\n                                selector.unregister(key.fileobj)\n                                key.fileobj.close()\n                            self._fileobj2output[key.fileobj].append(data)\n\n            self.wait(timeout=self._remaining_time(endtime))\n\n            # All data exchanged.  Translate lists into strings.\n            if stdout is not None:\n                stdout = b''.join(stdout)\n            if stderr is not None:\n                stderr = b''.join(stderr)\n\n            # Translate newlines, if requested.\n            # This also turns bytes into strings.\n            if self.text_mode:\n                if stdout is not None:\n                    stdout = self._translate_newlines(stdout,\n                                                      self.stdout.encoding,\n                                                      self.stdout.errors)\n                if stderr is not None:\n                    stderr = self._translate_newlines(stderr,\n                                                      self.stderr.encoding,\n                                                      self.stderr.errors)\n\n            return (stdout, stderr)\n\n\n        def _save_input(self, input):\n            # This method is called from the _communicate_with_*() methods\n            # so that if we time out while communicating, we can continue\n            # sending input if we retry.\n            if self.stdin and self._input is None:\n                self._input_offset = 0\n                self._input = input\n                if input is not None and self.text_mode:\n                    self._input = self._input.encode(self.stdin.encoding,\n                                                     self.stdin.errors)\n\n\n        def send_signal(self, sig):\n            \"\"\"Send a signal to the process.\"\"\"\n            # Skip signalling a process that we know has already died.\n            if self.returncode is None:\n                os.kill(self.pid, sig)\n\n        def terminate(self):\n            \"\"\"Terminate the process with SIGTERM\n            \"\"\"\n            self.send_signal(signal.SIGTERM)\n\n        def kill(self):\n            \"\"\"Kill the process with SIGKILL\n            \"\"\"\n            self.send_signal(signal.SIGKILL)\n", 1959], "C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\copyreg.py": ["\"\"\"Helper to provide extensibility for pickle.\n\nThis is only useful to add pickle support for extension types defined in\nC, not for instances of user-defined classes.\n\"\"\"\n\n__all__ = [\"pickle\", \"constructor\",\n           \"add_extension\", \"remove_extension\", \"clear_extension_cache\"]\n\ndispatch_table = {}\n\ndef pickle(ob_type, pickle_function, constructor_ob=None):\n    if not callable(pickle_function):\n        raise TypeError(\"reduction functions must be callable\")\n    dispatch_table[ob_type] = pickle_function\n\n    # The constructor_ob function is a vestige of safe for unpickling.\n    # There is no reason for the caller to pass it anymore.\n    if constructor_ob is not None:\n        constructor(constructor_ob)\n\ndef constructor(object):\n    if not callable(object):\n        raise TypeError(\"constructors must be callable\")\n\n# Example: provide pickling support for complex numbers.\n\ntry:\n    complex\nexcept NameError:\n    pass\nelse:\n\n    def pickle_complex(c):\n        return complex, (c.real, c.imag)\n\n    pickle(complex, pickle_complex, complex)\n\n# Support for pickling new-style objects\n\ndef _reconstructor(cls, base, state):\n    if base is object:\n        obj = object.__new__(cls)\n    else:\n        obj = base.__new__(cls, state)\n        if base.__init__ != object.__init__:\n            base.__init__(obj, state)\n    return obj\n\n_HEAPTYPE = 1<<9\n\n# Python code for object.__reduce_ex__ for protocols 0 and 1\n\ndef _reduce_ex(self, proto):\n    assert proto < 2\n    cls = self.__class__\n    for base in cls.__mro__:\n        if hasattr(base, '__flags__') and not base.__flags__ & _HEAPTYPE:\n            break\n    else:\n        base = object # not really reachable\n    if base is object:\n        state = None\n    else:\n        if base is cls:\n            raise TypeError(f\"cannot pickle {cls.__name__!r} object\")\n        state = base(self)\n    args = (cls, base, state)\n    try:\n        getstate = self.__getstate__\n    except AttributeError:\n        if getattr(self, \"__slots__\", None):\n            raise TypeError(f\"cannot pickle {cls.__name__!r} object: \"\n                            f\"a class that defines __slots__ without \"\n                            f\"defining __getstate__ cannot be pickled \"\n                            f\"with protocol {proto}\") from None\n        try:\n            dict = self.__dict__\n        except AttributeError:\n            dict = None\n    else:\n        dict = getstate()\n    if dict:\n        return _reconstructor, args, dict\n    else:\n        return _reconstructor, args\n\n# Helper for __reduce_ex__ protocol 2\n\ndef __newobj__(cls, *args):\n    return cls.__new__(cls, *args)\n\ndef __newobj_ex__(cls, args, kwargs):\n    \"\"\"Used by pickle protocol 4, instead of __newobj__ to allow classes with\n    keyword-only arguments to be pickled correctly.\n    \"\"\"\n    return cls.__new__(cls, *args, **kwargs)\n\ndef _slotnames(cls):\n    \"\"\"Return a list of slot names for a given class.\n\n    This needs to find slots defined by the class and its bases, so we\n    can't simply return the __slots__ attribute.  We must walk down\n    the Method Resolution Order and concatenate the __slots__ of each\n    class found there.  (This assumes classes don't modify their\n    __slots__ attribute to misrepresent their slots after the class is\n    defined.)\n    \"\"\"\n\n    # Get the value from a cache in the class if possible\n    names = cls.__dict__.get(\"__slotnames__\")\n    if names is not None:\n        return names\n\n    # Not cached -- calculate the value\n    names = []\n    if not hasattr(cls, \"__slots__\"):\n        # This class has no slots\n        pass\n    else:\n        # Slots found -- gather slot names from all base classes\n        for c in cls.__mro__:\n            if \"__slots__\" in c.__dict__:\n                slots = c.__dict__['__slots__']\n                # if class has a single slot, it can be given as a string\n                if isinstance(slots, str):\n                    slots = (slots,)\n                for name in slots:\n                    # special descriptors\n                    if name in (\"__dict__\", \"__weakref__\"):\n                        continue\n                    # mangled names\n                    elif name.startswith('__') and not name.endswith('__'):\n                        stripped = c.__name__.lstrip('_')\n                        if stripped:\n                            names.append('_%s%s' % (stripped, name))\n                        else:\n                            names.append(name)\n                    else:\n                        names.append(name)\n\n    # Cache the outcome in the class if at all possible\n    try:\n        cls.__slotnames__ = names\n    except:\n        pass # But don't die if we can't\n\n    return names\n\n# A registry of extension codes.  This is an ad-hoc compression\n# mechanism.  Whenever a global reference to <module>, <name> is about\n# to be pickled, the (<module>, <name>) tuple is looked up here to see\n# if it is a registered extension code for it.  Extension codes are\n# universal, so that the meaning of a pickle does not depend on\n# context.  (There are also some codes reserved for local use that\n# don't have this restriction.)  Codes are positive ints; 0 is\n# reserved.\n\n_extension_registry = {}                # key -> code\n_inverted_registry = {}                 # code -> key\n_extension_cache = {}                   # code -> object\n# Don't ever rebind those names:  pickling grabs a reference to them when\n# it's initialized, and won't see a rebinding.\n\ndef add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")\n    key = (module, name)\n    if (_extension_registry.get(key) == code and\n        _inverted_registry.get(code) == key):\n        return # Redundant registrations are benign\n    if key in _extension_registry:\n        raise ValueError(\"key %s is already registered with code %s\" %\n                         (key, _extension_registry[key]))\n    if code in _inverted_registry:\n        raise ValueError(\"code %s is already in use for key %s\" %\n                         (code, _inverted_registry[code]))\n    _extension_registry[key] = code\n    _inverted_registry[code] = key\n\ndef remove_extension(module, name, code):\n    \"\"\"Unregister an extension code.  For testing only.\"\"\"\n    key = (module, name)\n    if (_extension_registry.get(key) != code or\n        _inverted_registry.get(code) != key):\n        raise ValueError(\"key %s is not registered with code %s\" %\n                         (key, code))\n    del _extension_registry[key]\n    del _inverted_registry[code]\n    if code in _extension_cache:\n        del _extension_cache[code]\n\ndef clear_extension_cache():\n    _extension_cache.clear()\n\n# Standard extension code assignments\n\n# Reserved ranges\n\n# First  Last Count  Purpose\n#     1   127   127  Reserved for Python standard library\n#   128   191    64  Reserved for Zope\n#   192   239    48  Reserved for 3rd parties\n#   240   255    16  Reserved for private use (will never be assigned)\n#   256   Inf   Inf  Reserved for future assignment\n\n# Extension codes are assigned by the Python Software Foundation.\n", 209]}, "functions": {"normal (.\\processing_test.py:46)": [".\\processing_test.py", 46], "find_spec (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\site-packages\\_distutils_hack\\__init__.py:89)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\site-packages\\_distutils_hack\\__init__.py", 89], "<lambda> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\site-packages\\_distutils_hack\\__init__.py:96)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\site-packages\\_distutils_hack\\__init__.py", 96], "_ConnectionBase (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:114)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 114], "PipeConnection (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:268)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 268], "Connection (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:348)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 348], "Listener (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:432)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 432], "SocketListener (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:579)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 579], "PipeListener (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:639)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 639], "ConnectionWrapper (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:765)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 765], "XmlListener (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:787)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 787], "register (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:43)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py", 43], "<module> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:10)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 10], "Queue (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:34)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 34], "JoinableQueue (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:289)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 289], "SimpleQueue (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:332)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 332], "<module> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:10)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 10], "get_context (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:233)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py", 233], "SemLock (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:46)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 46], "Semaphore (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:123)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 123], "BoundedSemaphore (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:142)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 142], "Lock (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:159)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 159], "RLock (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:184)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 184], "Condition (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:210)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 210], "Event (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:321)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 321], "Barrier (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:360)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 360], "<module> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:11)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 11], "_get_candidate_names (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:224)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py", 224], "seed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:123)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py", 123], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:94)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py", 94], "rng (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:133)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py", 133], "_randbelow_with_getrandbits (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:250)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py", 250], "choice (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py:285)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\random.py", 285], "<listcomp> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:147)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py", 147], "__next__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:144)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py", 144], "splitdrive (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:124)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py", 124], "join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:77)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py", 77], "_exists (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:75)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py", 75], "mktemp (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py:390)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\tempfile.py", 390], "arbitrary_address (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:69)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 69], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:117)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 117], "Pipe (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:535)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 535], "get_context (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:187)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py", 187], "get_start_method (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:197)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py", 197], "current_process (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:37)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py", 37], "_make_name (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:114)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 114], "debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:48)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py", 48], "_make_methods (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:90)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 90], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:50)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 50], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:161)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 161], "Lock (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:65)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py", 65], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:144)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 144], "BoundedSemaphore (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:85)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py", 85], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:222)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 222], "_after_fork (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:67)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 67], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:36)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 36], "Queue (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:100)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py", 100], "_newname (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:734)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 734], "current_thread (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1306)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 1306], "daemon (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1095)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 1095], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:505)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 505], "_make_invoke_excepthook (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1177)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 1177], "add (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py:81)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py", 81], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:761)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 761], "is_set (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:513)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 513], "__enter__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:246)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 246], "_is_owned (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:261)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 261], "_release_save (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:255)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 255], "_acquire_restore (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:258)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 258], "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:270)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 270], "__exit__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:249)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 249], "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:540)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 540], "start (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:834)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 834], "daemon (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1110)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 1110], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:186)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py", 186], "_start_thread (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:158)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 158], "notify (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:341)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 341], "put (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:80)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 80], "job (.\\processing_test.py:28)": [".\\processing_test.py", 28], "run (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:859)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 859], "_stop (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:944)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 944], "_wait_for_tstate_lock (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:1017)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 1017], "join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py:979)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\threading.py", 979], "__enter__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:94)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 94], "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:134)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 134], "_check_readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:138)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 138], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:38)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py", 38], "dumps (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:48)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py", 48], "_check_writable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:142)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 142], "_send_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:279)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 279], "send_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:181)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 181], "_recv_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:294)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 294], "recv_bytes (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:208)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 208], "__exit__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:97)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 97], "get (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:92)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 92], "multithread (.\\processing_test.py:53)": [".\\processing_test.py", 53], "sub_debug (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:44)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py", 44], "_finalize_close (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:200)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 200], "__call__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py:205)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\util.py", 205], "_close (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:276)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 276], "__del__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:130)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 130], "_remove (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py:38)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\_weakrefset.py", 38], "close (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:173)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 173], "_feed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:207)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 207], "_finalize_join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:190)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 190], "name (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:189)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py", 189], "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:94)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py", 94], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:80)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py", 80], "_check_closed (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:99)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py", 99], "_cleanup (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:61)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py", 61], "<module> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:11)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py", 11], "_path_eq (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:22)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py", 22], "Popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:38)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py", 38], "<module> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:1)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py", 1], "_check_not_importing_main (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:132)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py", 132], "authkey (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:213)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py", 213], "get_start_method (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:249)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py", 249], "_get_bothseps (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:34)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py", 34], "isabs (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:61)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py", 61], "normpath (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py:450)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\ntpath.py", 450], "get_preparation_data (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:150)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py", 150], "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:87)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py", 87], "_optim_args_from_interpreter_flags (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\subprocess.py:263)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\subprocess.py", 263], "_args_from_interpreter_flags (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\subprocess.py:273)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\subprocess.py", 273], "get_command_line (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:78)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py", 78], "<genexpr> (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:57)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py", 57], "get_executable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py:45)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\spawn.py", 45], "set_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:354)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py", 354], "get_spawning_popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:351)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py", 351], "__reduce__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:344)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py", 344], "dump (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:58)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py", 58], "_slotnames (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\copyreg.py:99)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\copyreg.py", 99], "assert_spawning (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:357)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py", 357], "__getstate__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py:57)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\queues.py", 57], "readable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:158)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 158], "writable (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:163)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 163], "fileno (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:168)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 168], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:106)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py", 106], "reduce_pipe_connection (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py:956)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\connection.py", 956], "duplicate (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py:71)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\reduction.py", 71], "duplicate_for_child (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:97)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py", 97], "__getstate__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py:100)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\synchronize.py", 100], "__init__ (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:44)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py", 44], "_Popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:324)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py", 324], "_Popen (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py:222)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\context.py", 222], "start (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:110)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py", 110], "wait (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:101)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py", 101], "poll (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:117)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py", 117], "join (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py:142)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\process.py", 142], "multicore (.\\processing_test.py:34)": [".\\processing_test.py", 34], "_close_handles (C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py:28)": ["C:\\Users\\dyj\\.conda\\envs\\test2\\lib\\multiprocessing\\popen_spawn_win32.py", 28]}}}